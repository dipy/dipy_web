
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/07_reconstruction/reconst_shore.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_07_reconstruction_reconst_shore.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_07_reconstruction_reconst_shore.py:


==================================================================
Continuous and analytical diffusion signal modelling with 3D-SHORE
==================================================================

We show how to model the diffusion signal as a linear combination
of continuous functions from the SHORE basis [Merlet2013]_, [Özarslan2008]_,
[Özarslan2009]_. We also compute the analytical Orientation Distribution
Function (ODF).

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 13-21

.. code-block:: default


    from dipy.reconst.shore import ShoreModel
    from dipy.viz import window, actor
    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, get_sphere
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti








.. GENERATED FROM PYTHON SOURCE LINES 22-31

Download and read the data for this tutorial.

``fetch_isbi2013_2shell()`` provides data from the `ISBI HARDI contest 2013
<http://hardi.epfl.ch/static/events/2013_ISBI/>`_ acquired for two shells at
b-values 1500 $s/mm^2$ and 2500 $s/mm^2$.

The six parameters of these two functions define the ROI where to reconstruct
the data. They respectively correspond to ``(xmin,xmax,ymin,ymax,zmin,zmax)``
with x, y, z and the three axis defining the spatial positions of the voxels.

.. GENERATED FROM PYTHON SOURCE LINES 31-42

.. code-block:: default



    fraw, fbval, fbvec = get_fnames('isbi2013_2shell')

    data, affine = load_nifti(fraw)
    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)
    gtab = gradient_table(bvals, bvecs)
    data_small = data[10:40, 22, 10:40]

    print('data.shape (%d, %d, %d, %d)' % data.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data.shape (50, 50, 50, 64)




.. GENERATED FROM PYTHON SOURCE LINES 43-59

``data`` contains the voxel data and ``gtab`` contains a ``GradientTable``
object (gradient information e.g. b-values). For example, to show the b-values
it is possible to write::

    print(gtab.bvals)

Instantiate the SHORE Model.

``radial_order`` is the radial order of the SHORE basis.

``zeta`` is the scale factor of the SHORE basis.

``lambdaN`` and ``lambdaL`` are the radial and angular regularization
constants, respectively.

For details regarding these four parameters see [Cheng2011]_ and [Merlet2013]_.

.. GENERATED FROM PYTHON SOURCE LINES 59-68

.. code-block:: default



    radial_order = 6
    zeta = 700
    lambdaN = 1e-8
    lambdaL = 1e-8
    asm = ShoreModel(gtab, radial_order=radial_order,
                     zeta=zeta, lambdaN=lambdaN, lambdaL=lambdaL)








.. GENERATED FROM PYTHON SOURCE LINES 69-70

Fit the SHORE model to the data

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    asmfit = asm.fit(data_small)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/900 [00:00<?, ?it/s]     30%|###       | 274/900 [00:00<00:00, 2734.45it/s]     66%|######5   | 593/900 [00:00<00:00, 3000.43it/s]    100%|##########| 900/900 [00:00<00:00, 3061.28it/s]




.. GENERATED FROM PYTHON SOURCE LINES 75-76

Load an odf reconstruction sphere

.. GENERATED FROM PYTHON SOURCE LINES 76-80

.. code-block:: default



    sphere = get_sphere('repulsion724')








.. GENERATED FROM PYTHON SOURCE LINES 81-82

Compute the ODFs

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default



    odf = asmfit.odf(sphere)
    print('odf.shape (%d, %d, %d)' % odf.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    odf.shape (30, 30, 724)




.. GENERATED FROM PYTHON SOURCE LINES 88-89

Display the ODFs

.. GENERATED FROM PYTHON SOURCE LINES 89-104

.. code-block:: default



    # Enables/disables interactive visualization
    interactive = False

    scene = window.Scene()
    sfu = actor.odf_slicer(odf[:, None, :], sphere=sphere, colormap='plasma',
                           scale=0.5)
    sfu.RotateX(-90)
    sfu.display(y=0)
    scene.add(sfu)
    window.record(scene, out_path='odfs.png', size=(600, 600))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/07_reconstruction/images/sphx_glr_reconst_shore_001.png
   :alt: reconst shore
   :srcset: /examples_built/07_reconstruction/images/sphx_glr_reconst_shore_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-130

.. figure:: odfs.png
   :align: center

   Orientation distribution functions.

References
----------
.. [Özarslan2008] Özarslan E. et al., "Simple harmonic oscillator based
   estimation and reconstruction for one-dimensional q-space MR,” in Proc Intl
   Soc Mag Reson Med, 16, Toronto, Canada, 2008

.. [Özarslan2009] Özarslan E. et al., "Simple harmonic oscillator based
   reconstruction and estimation for three-dimensional q-space MRI," in Proc
   Intl Soc Mag Reson Med, 17, Honolulu, HI, 2009

.. [Merlet2013] Merlet S. et al., "Continuous diffusion signal, EAP and ODF
   estimation via Compressive Sensing in diffusion MRI", Medical Image
   Analysis, 2013.

.. [Cheng2011] Cheng J. et al., "Theoretical Analysis and Practical Insights on
   EAP Estimation via Unified HARDI Framework", MICCAI workshop on
   Computational Diffusion MRI, 2011.

.. include:: ../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.426 seconds)


.. _sphx_glr_download_examples_built_07_reconstruction_reconst_shore.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_shore.py <reconst_shore.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_shore.ipynb <reconst_shore.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
