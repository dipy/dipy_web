
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/07_reconstruction/reconst_shore_metrics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_07_reconstruction_reconst_shore_metrics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_07_reconstruction_reconst_shore_metrics.py:


===========================
Calculate SHORE scalar maps
===========================

We show how to calculate two SHORE-based scalar maps: return to origin
probability (RTOP) [Descoteaux2011]_ and mean square displacement (MSD)
[Wu2007]_, [Wu2008]_ on your data. SHORE can be used with any multiple b-value
dataset like multi-shell or DSI.

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti
    from dipy.reconst.shore import ShoreModel








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Download and get the data filenames for this tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default



    fraw, fbval, fbvec = get_fnames('taiwan_ntu_dsi')








.. GENERATED FROM PYTHON SOURCE LINES 29-34

img contains a nibabel Nifti1Image object (data) and gtab contains a
GradientTable object (gradient information e.g. b-values). For example, to
read the b-values it is possible to write print(gtab.bvals).

Load the raw diffusion data and the affine.

.. GENERATED FROM PYTHON SOURCE LINES 34-43

.. code-block:: default



    data, affine = load_nifti(fraw)
    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)
    bvecs[1:] = (bvecs[1:] /
                 np.sqrt(np.sum(bvecs[1:] * bvecs[1:], axis=1))[:, None])
    gtab = gradient_table(bvals, bvecs)
    print('data.shape (%d, %d, %d, %d)' % data.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data.shape (96, 96, 60, 203)




.. GENERATED FROM PYTHON SOURCE LINES 44-45

Instantiate the Model.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: default



    asm = ShoreModel(gtab)








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Let's just use only one slice only from the data.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default



    dataslice = data[30:70, 20:80, data.shape[2] // 2]








.. GENERATED FROM PYTHON SOURCE LINES 56-57

Fit the signal with the model and calculate the SHORE coefficients.

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default



    asmfit = asm.fit(dataslice)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/2400 [00:00<?, ?it/s]     10%|#         | 244/2400 [00:00<00:00, 2434.25it/s]     21%|##1       | 504/2400 [00:00<00:00, 2526.83it/s]     32%|###1      | 766/2400 [00:00<00:00, 2567.48it/s]     43%|####3     | 1043/2400 [00:00<00:00, 2646.80it/s]     55%|#####4    | 1308/2400 [00:00<00:00, 2581.71it/s]     65%|######5   | 1567/2400 [00:00<00:00, 2580.23it/s]     76%|#######6  | 1828/2400 [00:00<00:00, 2589.56it/s]     87%|########7 | 2094/2400 [00:00<00:00, 2610.44it/s]     98%|#########8| 2363/2400 [00:00<00:00, 2633.67it/s]    100%|##########| 2400/2400 [00:00<00:00, 2597.90it/s]




.. GENERATED FROM PYTHON SOURCE LINES 62-64

Calculate the analytical RTOP on the signal
that corresponds to the integral of the signal.

.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: default



    print('Calculating... rtop_signal')
    rtop_signal = asmfit.rtop_signal()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calculating... rtop_signal




.. GENERATED FROM PYTHON SOURCE LINES 70-72

Now we calculate the analytical RTOP on the propagator,
that corresponds to its central value.

.. GENERATED FROM PYTHON SOURCE LINES 72-76

.. code-block:: default



    print('Calculating... rtop_pdf')
    rtop_pdf = asmfit.rtop_pdf()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calculating... rtop_pdf




.. GENERATED FROM PYTHON SOURCE LINES 77-79

In theory, these two measures must be equal,
to show that we calculate the mean square error on this two measures.

.. GENERATED FROM PYTHON SOURCE LINES 79-84

.. code-block:: default



    mse = np.sum((rtop_signal - rtop_pdf) ** 2) / rtop_signal.size
    print("MSE = %f" % mse)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MSE = 0.000000




.. GENERATED FROM PYTHON SOURCE LINES 85-88

MSE = 0.000000

Let's calculate the analytical mean square displacement on the propagator.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default



    print('Calculating... msd')
    msd = asmfit.msd()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calculating... msd




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Show the maps and save them to a file.

.. GENERATED FROM PYTHON SOURCE LINES 95-112

.. code-block:: default



    fig = plt.figure(figsize=(6, 6))
    ax1 = fig.add_subplot(2, 2, 1, title='rtop_signal')
    ax1.set_axis_off()
    ind = ax1.imshow(rtop_signal.T, interpolation='nearest', origin='lower')
    plt.colorbar(ind)
    ax2 = fig.add_subplot(2, 2, 2, title='rtop_pdf')
    ax2.set_axis_off()
    ind = ax2.imshow(rtop_pdf.T, interpolation='nearest', origin='lower')
    plt.colorbar(ind)
    ax3 = fig.add_subplot(2, 2, 3, title='msd')
    ax3.set_axis_off()
    ind = ax3.imshow(msd.T, interpolation='nearest', origin='lower', vmin=0)
    plt.colorbar(ind)
    plt.savefig('SHORE_maps.png')




.. image-sg:: /examples_built/07_reconstruction/images/sphx_glr_reconst_shore_metrics_001.png
   :alt: reconst shore metrics
   :srcset: /examples_built/07_reconstruction/images/sphx_glr_reconst_shore_metrics_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-134

.. figure:: SHORE_maps.png
   :align: center

   RTOP and MSD calculated using the SHORE model.

References
----------

.. [Descoteaux2011] Descoteaux M. et al., "Multiple q-shell diffusion
   propagator imaging", Medical Image Analysis, vol 15, No. 4, p. 603-621,
   2011.

.. [Wu2007] Wu Y. et al., "Hybrid diffusion imaging", NeuroImage, vol 36, p.
   617-629, 2007.

.. [Wu2008] Wu Y. et al., "Computation of Diffusion Function Measures in
   q-Space Using Magnetic Resonance Hybrid Diffusion Imaging", IEEE
   TRANSACTIONS ON MEDICAL IMAGING, vol. 27, No. 6, p. 858-865, 2008.

.. include:: ../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.959 seconds)


.. _sphx_glr_download_examples_built_07_reconstruction_reconst_shore_metrics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_shore_metrics.py <reconst_shore_metrics.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_shore_metrics.ipynb <reconst_shore_metrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
