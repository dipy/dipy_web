
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/04_preprocessing/denoise_nlmeans.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_04_preprocessing_denoise_nlmeans.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_04_preprocessing_denoise_nlmeans.py:


==============================================
Denoise images using Non-Local Means (NLMEANS)
==============================================

Using the non-local means filter [Coupe08]_ and [Coupe11]_ and  you can denoise
3D or 4D images and boost the SNR of your datasets. You can also decide between
modeling the noise as Gaussian or Rician (default).

.. GENERATED FROM PYTHON SOURCE LINES 11-28

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    from time import time
    from dipy.denoise.nlmeans import nlmeans
    from dipy.denoise.noise_estimate import estimate_sigma
    from dipy.data import get_fnames
    from dipy.io.image import load_nifti, save_nifti


    t1_fname = get_fnames('stanford_t1')
    data, affine = load_nifti(t1_fname)

    mask = data > 1500

    print("vol size", data.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    vol size (81, 106, 76)




.. GENERATED FROM PYTHON SOURCE LINES 29-32

In order to call ``non_local_means`` first you need to estimate the standard
deviation of the noise. We have used N=32 since the Stanford dataset was
acquired on a 3T GE scanner with a 32 array head coil.

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default



    sigma = estimate_sigma(data, N=32)








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Calling the main function ``non_local_means``

.. GENERATED FROM PYTHON SOURCE LINES 38-47

.. code-block:: default



    t = time()

    den = nlmeans(data, sigma=sigma, mask=mask, patch_radius=1,
                  block_radius=2, rician=True)

    print("total time", time() - t)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    total time 0.6275289058685303




.. GENERATED FROM PYTHON SOURCE LINES 48-49

Let us plot the axial slice of the denoised output

.. GENERATED FROM PYTHON SOURCE LINES 49-71

.. code-block:: default



    axial_middle = data.shape[2] // 2

    before = data[:, :, axial_middle].T
    after = den[:, :, axial_middle].T

    difference = np.abs(after.astype(np.float64) - before.astype(np.float64))

    difference[~mask[:, :, axial_middle].T] = 0


    fig, ax = plt.subplots(1, 3)
    ax[0].imshow(before, cmap='gray', origin='lower')
    ax[0].set_title('before')
    ax[1].imshow(after, cmap='gray', origin='lower')
    ax[1].set_title('after')
    ax[2].imshow(difference, cmap='gray', origin='lower')
    ax[2].set_title('difference')

    plt.savefig('denoised.png', bbox_inches='tight')




.. image-sg:: /examples_built/04_preprocessing/images/sphx_glr_denoise_nlmeans_001.png
   :alt: denoise nlmeans
   :srcset: /examples_built/04_preprocessing/images/sphx_glr_denoise_nlmeans_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-76

.. figure:: denoised.png
   :align: center

   **Showing axial slice before (left) and after (right) NLMEANS denoising**

.. GENERATED FROM PYTHON SOURCE LINES 76-80

.. code-block:: default



    save_nifti('denoised.nii.gz', den, affine)








.. GENERATED FROM PYTHON SOURCE LINES 81-97

An improved version of non-local means denoising is adaptive soft coefficient
matching, please refer to :ref:`example_denoise_ascm` for more details.

References
----------

.. [Coupe08] P. Coupe, P. Yger, S. Prima, P. Hellier, C. Kervrann, C. Barillot,
   "An Optimized Blockwise Non Local Means Denoising Filter for 3D Magnetic
   Resonance Images", IEEE Transactions on Medical Imaging, 27(4):425-441, 2008

.. [Coupe11] Pierrick Coupe, Jose Manjon, Montserrat Robles, Louis Collins.
    "Adaptive Multiresolution Non-Local Means Filter for 3D MR Image Denoising"
    IET Image Processing, Institution of Engineering and Technology, 2011


.. include:: ../links_names.inc


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.898 seconds)


.. _sphx_glr_download_examples_built_04_preprocessing_denoise_nlmeans.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: denoise_nlmeans.py <denoise_nlmeans.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: denoise_nlmeans.ipynb <denoise_nlmeans.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
