
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/35_visualization/viz_slice.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_35_visualization_viz_slice.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_35_visualization_viz_slice.py:


=====================
Simple volume slicing
=====================

Here we present an example for visualizing slices from 3D images.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default


    import os

    from dipy.data import fetch_bundles_2_subjects
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.viz import window, actor, ui








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Let's download and load a T1.

.. GENERATED FROM PYTHON SOURCE LINES 19-29

.. code-block:: default



    fetch_bundles_2_subjects()

    fname_t1 = os.path.join(os.path.expanduser('~'), '.dipy',
                            'exp_bundles_and_maps', 'bundles_2_subjects',
                            'subj_1', 't1_warped.nii.gz')

    data, affine = load_nifti(fname_t1)








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Create a Scene object which holds all the actors which we want to visualize.

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: default



    scene = window.Scene()
    scene.background((0.5, 0.5, 0.5))








.. GENERATED FROM PYTHON SOURCE LINES 37-42

Render slices from T1 with a specific value range
=================================================

The T1 has usually a higher range of values than what can be visualized in an
image. We can set the range that we would like to see.

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default



    mean, std = data[data > 0].mean(), data[data > 0].std()
    value_range = (mean - 0.5 * std, mean + 1.5 * std)








.. GENERATED FROM PYTHON SOURCE LINES 48-51

The ``slice`` function will read data and resample the data using an affine
transformation matrix. The default behavior of this function is to show the
middle slice of the last dimension of the resampled data.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default



    slice_actor = actor.slicer(data, affine, value_range)








.. GENERATED FROM PYTHON SOURCE LINES 56-57

The ``slice_actor`` contains an axial slice.

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default



    scene.add(slice_actor)








.. GENERATED FROM PYTHON SOURCE LINES 62-65

The same actor can show any different slice from the given data using its
``display`` function. However, if we want to show multiple slices we need to
copy the actor first.

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default



    slice_actor2 = slice_actor.copy()








.. GENERATED FROM PYTHON SOURCE LINES 70-72

Now we have a new ``slice_actor`` which displays the middle slice of the
sagittal plane.

.. GENERATED FROM PYTHON SOURCE LINES 72-81

.. code-block:: default



    slice_actor2.display(slice_actor2.shape[0]//2, None, None)

    scene.add(slice_actor2)

    scene.reset_camera()
    scene.zoom(1.4)








.. GENERATED FROM PYTHON SOURCE LINES 82-83

In order to interact with the data you will need to uncomment the line below.

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: default



    # window.show(scene, size=(600, 600), reset_camera=False)








.. GENERATED FROM PYTHON SOURCE LINES 88-89

Otherwise, you can save a screenshot using the following command.

.. GENERATED FROM PYTHON SOURCE LINES 89-94

.. code-block:: default



    window.record(scene, out_path='slices.png', size=(600, 600),
                  reset_camera=False)




.. image-sg:: /examples_built/35_visualization/images/sphx_glr_viz_slice_001.png
   :alt: viz slice
   :srcset: /examples_built/35_visualization/images/sphx_glr_viz_slice_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-105

.. figure:: slices.png
   :align: center

   Simple slice viewer.

Render slices from FA with your colormap
========================================

It is also possible to set the colormap of your preference. Here we are loading
an FA image and showing it in a non-standard way using an HSV colormap.

.. GENERATED FROM PYTHON SOURCE LINES 105-118

.. code-block:: default



    fname_fa = os.path.join(os.path.expanduser('~'), '.dipy',
                            'exp_bundles_and_maps', 'bundles_2_subjects',
                            'subj_1', 'fa_1x1x1.nii.gz')

    fa = load_nifti_data(fname_fa)

    lut = actor.colormap_lookup_table(scale_range=(fa.min(), fa.max()*0.8),
                                      hue_range=(0.4, 1.),
                                      saturation_range=(1, 1.),
                                      value_range=(0., 1.))








.. GENERATED FROM PYTHON SOURCE LINES 119-121

This is because the lookup table is applied in the slice after interpolating
to (0, 255).

.. GENERATED FROM PYTHON SOURCE LINES 121-136

.. code-block:: default



    fa_actor = actor.slicer(fa, affine, lookup_colormap=lut)

    scene.clear()
    scene.add(fa_actor)

    scene.reset_camera()
    scene.zoom(1.4)

    # window.show(scene, size=(600, 600), reset_camera=False)

    window.record(scene, out_path='slices_lut.png', size=(600, 600),
                  reset_camera=False)




.. image-sg:: /examples_built/35_visualization/images/sphx_glr_viz_slice_002.png
   :alt: viz slice
   :srcset: /examples_built/35_visualization/images/sphx_glr_viz_slice_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 137-141

.. figure:: slices_lut.png
   :align: center

   **Simple slice viewer with an HSV colormap**.

.. GENERATED FROM PYTHON SOURCE LINES 144-149

Now we would like to add the ability to click on a voxel and show its value
on a panel in the window. The panel is a UI element which requires access to
different areas of the visualization pipeline and therefore we don't recommend
using it with ``window.show``. The more appropriate way is to use the
``ShowManager`` object, which allows accessing the pipeline in different areas.

.. GENERATED FROM PYTHON SOURCE LINES 149-154

.. code-block:: default



    show_m = window.ShowManager(scene, size=(1200, 900))
    show_m.initialize()








.. GENERATED FROM PYTHON SOURCE LINES 155-156

We'll start by creating the panel and adding it to the ``ShowManager``

.. GENERATED FROM PYTHON SOURCE LINES 156-178

.. code-block:: default



    label_position = ui.TextBlock2D(text='Position:')
    label_value = ui.TextBlock2D(text='Value:')

    result_position = ui.TextBlock2D(text='')
    result_value = ui.TextBlock2D(text='')

    panel_picking = ui.Panel2D(size=(250, 125),
                               position=(20, 20),
                               color=(0, 0, 0),
                               opacity=0.75,
                               align="left")

    panel_picking.add_element(label_position, (0.1, 0.55))
    panel_picking.add_element(label_value, (0.1, 0.25))

    panel_picking.add_element(result_position, (0.45, 0.55))
    panel_picking.add_element(result_value, (0.45, 0.25))

    scene.add(panel_picking)








.. GENERATED FROM PYTHON SOURCE LINES 179-181

Add a left-click callback to the slicer. Also disable interpolation so you can
see what you are picking.

.. GENERATED FROM PYTHON SOURCE LINES 181-200

.. code-block:: default




    def left_click_callback(obj, ev):
        """Get the value of the clicked voxel and show it in the panel."""
        event_pos = show_m.iren.GetEventPosition()

        obj.picker.Pick(event_pos[0], event_pos[1], 0, scene)

        i, j, k = obj.picker.GetPointIJK()
        result_position.message = '({}, {}, {})'.format(str(i), str(j), str(k))
        result_value.message = '%.8f' % data[i, j, k]


    fa_actor.SetInterpolate(False)
    fa_actor.AddObserver('LeftButtonPressEvent', left_click_callback, 1.0)

    # show_m.start()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 201-209

Create a mosaic
===============

By using the ``copy`` and ``display`` method of the ``slice_actor`` it becomes
easy and efficient to create a mosaic of all the slices.

So, let's clear the scene and change the projection from perspective to
parallel. We'll also need a new show manager and an associated callback.

.. GENERATED FROM PYTHON SOURCE LINES 209-232

.. code-block:: default



    scene.clear()
    scene.projection('parallel')

    result_position.message = ''
    result_value.message = ''

    show_m_mosaic = window.ShowManager(scene, size=(1200, 900))
    show_m_mosaic.initialize()


    def left_click_callback_mosaic(obj, ev):
        """Get the value of the clicked voxel and show it in the panel."""
        event_pos = show_m_mosaic.iren.GetEventPosition()

        obj.picker.Pick(event_pos[0], event_pos[1], 0, scene)

        i, j, k = obj.picker.GetPointIJK()
        result_position.message = '({}, {}, {})'.format(str(i), str(j), str(k))
        result_value.message = '%.8f' % data[i, j, k]









.. GENERATED FROM PYTHON SOURCE LINES 233-236

Now we need to create two nested for loops which will set the positions of
the grid of the mosaic and add the new actors to the scene. We are going
to use 15 columns and 10 rows but you can adjust those with your datasets.

.. GENERATED FROM PYTHON SOURCE LINES 236-270

.. code-block:: default



    cnt = 0

    X, Y, Z = slice_actor.shape[:3]

    rows = 10
    cols = 15
    border = 10

    for j in range(rows):
        for i in range(cols):
            slice_mosaic = slice_actor.copy()
            slice_mosaic.display(None, None, cnt)
            slice_mosaic.SetPosition((X + border) * i,
                                     0.5 * cols * (Y + border) - (Y + border) * j,
                                     0)
            slice_mosaic.SetInterpolate(False)
            slice_mosaic.AddObserver('LeftButtonPressEvent',
                                     left_click_callback_mosaic,
                                     1.0)
            scene.add(slice_mosaic)
            cnt += 1
            if cnt > Z:
                break
        if cnt > Z:
            break

    scene.reset_camera()
    scene.zoom(1.0)

    # show_m_mosaic.ren.add(panel_picking)
    # show_m_mosaic.start()








.. GENERATED FROM PYTHON SOURCE LINES 271-274

If you uncomment the two lines above, you will be able to move
the mosaic up/down and left/right using the middle mouse button drag,
zoom in/out using the scroll wheel, and pick voxels with left click.

.. GENERATED FROM PYTHON SOURCE LINES 274-279

.. code-block:: default



    window.record(scene, out_path='mosaic.png', size=(900, 600),
                  reset_camera=False)




.. image-sg:: /examples_built/35_visualization/images/sphx_glr_viz_slice_003.png
   :alt: viz slice
   :srcset: /examples_built/35_visualization/images/sphx_glr_viz_slice_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-284

.. figure:: mosaic.png
   :align: center

   A mosaic of all the slices in the T1 volume.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.234 seconds)


.. _sphx_glr_download_examples_built_35_visualization_viz_slice.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: viz_slice.py <viz_slice.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: viz_slice.ipynb <viz_slice.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
