
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/20_registration/bundlewarp_registration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_20_registration_bundlewarp_registration.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_20_registration_bundlewarp_registration.py:


============================================
Nonrigid Bundle Registration with BundleWarp
============================================

This example explains how you can nonlinearly register two bundles from two
different subjects directly in the space of streamlines [Chandio23]_, [Chandio20]_.

To show the concept, we will use two pre-saved uncinate fasciculus bundles. The
algorithm used here is called BundleWarp, streamline-based nonlinear
registration of white matter tracts [Chandio23]_.

.. GENERATED FROM PYTHON SOURCE LINES 14-27

.. code-block:: default

    from os.path import join as pjoin

    from dipy.align.streamwarp import (bundlewarp, bundlewarp_vector_filed,
                                       bundlewarp_shape_analysis)
    from dipy.data import fetch_bundle_warp_dataset
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_tractogram, load_trk
    from dipy.tracking.streamline import (set_number_of_points, unlist_streamlines,
                                          Streamlines)
    from dipy.viz.streamline import (viz_two_bundles, viz_vector_field,
                                     viz_displacement_mag)
    from time import time








.. GENERATED FROM PYTHON SOURCE LINES 28-31

Let's download and loaf two uncinate fasciculus bundles in the left hemisphere
of the brain (UF_L) available here:
https://figshare.com/articles/dataset/Test_Bundles_for_DIPY/22557733

.. GENERATED FROM PYTHON SOURCE LINES 31-42

.. code-block:: default



    bundle_warp_files = fetch_bundle_warp_dataset()
    s_UF_L_path = pjoin(bundle_warp_files[1], 's_UF_L.trk')
    m_UF_L_path = pjoin(bundle_warp_files[1], 'm_UF_L.trk')

    uf_subj1 = load_trk(s_UF_L_path, reference="same",
                        bbox_valid_check=False).streamlines
    uf_subj2 = load_trk(m_UF_L_path, reference="same",
                        bbox_valid_check=False).streamlines








.. GENERATED FROM PYTHON SOURCE LINES 43-45

Let's resample the streamlines so that they both have the same number of points
per streamline. Here we will use 20 points.

.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: default



    static = Streamlines(set_number_of_points(uf_subj1, 20))
    moving = Streamlines(set_number_of_points(uf_subj2, 20))








.. GENERATED FROM PYTHON SOURCE LINES 51-53

We call ``uf_subj2`` a moving bundle as it will be nonlinearly aligned with
``uf_subj1`` (static) bundle. Here is how this is done.

.. GENERATED FROM PYTHON SOURCE LINES 56-57

Let's visualize static bundle in red and moving in green before registration.

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default



    viz_two_bundles(static, moving, fname="static_and_moving.png")





.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_001.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-70

BundleWarp method provides a unique ability to either partially or fully deform
a moving bundle by the use of a single regularization parameter alpha.
alpha controls the trade-off between regularizing the deformation and having
points match very closely. The lower the value of alpha, the more closely the
bundles would match.

Let's partially deform bundle by setting alpha=0.5.

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: default



    start = time()
    deformed_bundle, moving_aligned, distances, match_pairs, warp_map = bundlewarp(
                                   static, moving, alpha=0.5, beta=20, max_iter=15)
    end = time()

    print("time taken by BundleWarp registration in seconds = ", end-start)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    time taken by BundleWarp registration in seconds =  3.4690449237823486




.. GENERATED FROM PYTHON SOURCE LINES 80-83

Let's visualize static bundle in red and moved (warped) in green. Note: You can
set interactive=True in visualization functions throughout this tutorial if you
prefer to get interactive visualization window.

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default



    viz_two_bundles(static, deformed_bundle,
                    fname="static_and_partially_deformed.png")




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_002.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-91

Let's visualize linearly moved bundle in blue and nonlinearly moved bundle in
green to see BundleWarp registration improvement over linear SLR registration.

.. GENERATED FROM PYTHON SOURCE LINES 91-96

.. code-block:: default



    viz_two_bundles(moving_aligned, deformed_bundle,
                    fname="linearly_and_nonlinearly_moved.png", c1=(0, 0, 1))




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_003.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-100

Now, let's visualize deformation vector field generated by BundleWarp.
This shows us visually where and how much and in what directions deformations
were added by BundleWarp.

.. GENERATED FROM PYTHON SOURCE LINES 100-107

.. code-block:: default



    offsets, directions, colors = bundlewarp_vector_filed(moving_aligned,
                                                          deformed_bundle)

    points_aligned, _ = unlist_streamlines(moving_aligned)








.. GENERATED FROM PYTHON SOURCE LINES 108-109

Visualizing just the vector field.

.. GENERATED FROM PYTHON SOURCE LINES 109-114

.. code-block:: default



    fname = "partially_vectorfield.png"
    viz_vector_field(points_aligned, directions, colors, offsets, fname)




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_004.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 115-117

Let's visualize vector field over linearly moved bundle. This will show how
much deformations were introduced after linear registration.

.. GENERATED FROM PYTHON SOURCE LINES 117-123

.. code-block:: default



    fname = "partially_vectorfield_over_linearly_moved.png"
    viz_vector_field(points_aligned, directions, colors, offsets, fname,
                     moving_aligned)




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_005.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-127

We can also visualize the magnitude of deformations in mm mapped over affinely
moved bundle. It shows which streamlines were deformed the most after affine
registration.

.. GENERATED FROM PYTHON SOURCE LINES 127-132

.. code-block:: default



    fname = "partially_deformation_magnitude_over_linearly_moved.png"
    viz_displacement_mag(moving_aligned, offsets, fname, interactive=False)




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_006.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-134

Saving partially warped bundle.

.. GENERATED FROM PYTHON SOURCE LINES 134-141

.. code-block:: default



    new_tractogram = StatefulTractogram(deformed_bundle, m_UF_L_path, Space.RASMM)
    save_tractogram(new_tractogram, "partially_deformed_bundle.trk",
                    bbox_valid_check=False)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 142-147

Let's fully deform the moving bundle by setting alpha <= 0.01

We will use MDF distances computed and returned by previous run of BundleWarp
method. This will save computation time.


.. GENERATED FROM PYTHON SOURCE LINES 147-156

.. code-block:: default



    start = time()
    deformed_bundle2, moving_aligned, distances, match_pairs, warp_map = bundlewarp(
            static, moving, dist=distances, alpha=0.001, beta=20)
    end = time()

    print("time taken by BundleWarp registration in seconds = ", end-start)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/skoudoro/devel/dipy/dipy/align/streamwarp.py:116: UserWarning: Using alpha<=0.01 will result in extreme deformations
      warnings.warn("Using alpha<=0.01 will result in extreme deformations")
    using pre-computed distances
    time taken by BundleWarp registration in seconds =  2.5579748153686523




.. GENERATED FROM PYTHON SOURCE LINES 157-158

Let's visualize static bundle in red and moved (completely warped) in green.

.. GENERATED FROM PYTHON SOURCE LINES 158-163

.. code-block:: default



    viz_two_bundles(static, deformed_bundle2,
                    fname="static_and_fully_deformed.png")




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_007.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-167

Now, let's visualize the deformation vector field generated by BundleWarp.
This shows us visually where and how much and in what directions deformations
were added by BundleWarp to perfectly warp moving bundle to look like static.

.. GENERATED FROM PYTHON SOURCE LINES 167-174

.. code-block:: default



    offsets, directions, colors = bundlewarp_vector_filed(moving_aligned,
                                                          deformed_bundle2)

    points_aligned, _ = unlist_streamlines(moving_aligned)








.. GENERATED FROM PYTHON SOURCE LINES 175-176

Visualizing just the vector field.

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default



    fname = "fully_vectorfield.png"
    viz_vector_field(points_aligned, directions, colors, offsets, fname)




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_008.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 182-185

Let's visualize vector field over linearly moved bundle. This will show how
much deformations were introduced after linear registration by fully deforming
the moving bundle.

.. GENERATED FROM PYTHON SOURCE LINES 185-191

.. code-block:: default



    fname = "fully_vectorfield_over_linearly_moved.png"
    viz_vector_field(points_aligned, directions, colors, offsets, fname,
                     moving_aligned)




.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_009.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 192-195

Let's visualize the magnitude of deformations in mm mapped over affinely moved
bundle. It shows which streamlines were deformed the most after affine
registration.

.. GENERATED FROM PYTHON SOURCE LINES 195-201

.. code-block:: default



    fname = "fully_deformation_magnitude_over_linearly_moved.png"
    viz_displacement_mag(moving_aligned, offsets, fname, interactive=False)





.. image-sg:: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_010.png
   :alt: bundlewarp registration
   :srcset: /examples_built/20_registration/images/sphx_glr_bundlewarp_registration_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 202-208

We can also perform bundle shape difference analysis using the displacement
field generated by fully warping the moving bundle to look exactly like static
bundle. Here, we plot bundle shape profile using BUAN. Bundle shape profile
shows the average magnitude of deformations along the length of the bundle.
Segments where we observe higher deformations are the areas where two bundles
differ the most in shape.

.. GENERATED FROM PYTHON SOURCE LINES 208-213

.. code-block:: default



    _, _ = bundlewarp_shape_analysis(moving_aligned, deformed_bundle, no_disks=10,
                                     plotting=False)








.. GENERATED FROM PYTHON SOURCE LINES 214-215

Saving fully warped bundle.

.. GENERATED FROM PYTHON SOURCE LINES 215-223

.. code-block:: default



    new_tractogram = StatefulTractogram(deformed_bundle2, m_UF_L_path,
                                        Space.RASMM)
    save_tractogram(new_tractogram, "fully_deformed_bundle.trk",
                    bbox_valid_check=False)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 224-234

References
----------

.. [Chandio23] Chandio et al., "BundleWarp, streamline-based nonlinear
                    registration of white matter tracts."
                    bioRxiv (2023): 2023-01.
.. [Chandio20] Chandio and Garyfallidis., "StND: Streamline-based non-rigid
                    partial-deformation tractography registration." Medical
                    Imaging Meets NeurIPS (2020).



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.694 seconds)


.. _sphx_glr_download_examples_built_20_registration_bundlewarp_registration.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: bundlewarp_registration.py <bundlewarp_registration.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: bundlewarp_registration.ipynb <bundlewarp_registration.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
