{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "DIPY Workflows Interfaces"}], "prev": {"link": "../gibbs_unringing_flow/", "title": "Gibbs Unringing"}, "next": {"link": "../reconstruction_flow/", "title": "Reconstruction"}, "title": "Registration", "meta": {}, "body": "<section id=\"registration\">\n<span id=\"registration-flow\"></span><h1>Registration<a class=\"headerlink\" href=\"#registration\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>This tutorial walks through the steps to perform image-based and\nstreamline-based registration using DIPY. Multiple registration methods are\navailable in DIPY.</p>\n<p>You can try these methods using your own data; we will be using the data in\nDIPY. You can check how to <a class=\"reference internal\" href=\"../data_fetch/#data-fetch\"><span class=\"std std-ref\">fetch the DIPY data</span></a>.</p>\n<section id=\"image-registration\">\n<h2>Image Registration<a class=\"headerlink\" href=\"#image-registration\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>DIPY\u2019s image registration workflow can be used to register a moving image to a\nstatic image by applying different transformations, such as center of mass,\ntranslation, and rigid body or full affine (including translation, rotation,\nscaling and shearing) transformations. During such a registration process, the\nstatic image is considered to be the reference, and the moving image is\ntransformed to the space of the static image. Registration methods use some\nsort of optimization process, and a given metric or criterion (like maximizing\nthe mutual information between the two input images) that is optimized during\nthe process, to achieve the goal.</p>\n<p>The DIPY image registration workflow applies the specified type of\ntransformation to the input images, and hence, users are expected to choose the\ntype of transformation that best matches the requirements of their problem.\nAlternatively, the workflow allows to perform registration in a progressive\nmanner. For example, using affine registration with <code class=\"docutils literal notranslate\"><span class=\"pre\">progressive</span></code> set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> will involve center of mass, translation, rigid body and full affine\nregistration; meanwhile, if <code class=\"docutils literal notranslate\"><span class=\"pre\">progressive</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> for an affine\nregistration, it will include only center of mass and affine registration. The\nprogressive registration will be slower but will improve the quality.</p>\n<p>We will first create a directory in which to save the transformed image and the\naffine matrix (e.g.: <code class=\"docutils literal notranslate\"><span class=\"pre\">image_reg_output</span></code>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mkdir</span> <span class=\"n\">image_reg_output</span>\n</pre></div>\n</div>\n<p>To run the image registration, we need to specify the paths to the static image\nfile, and to the moving image file, followed by the optional arguments. In this\ncase, we will be specifying the type of registration to be performed\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">transform</span></code>) and the output directory (<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>).</p>\n<p>To perform center of mass registration, we will call the <code class=\"docutils literal notranslate\"><span class=\"pre\">dipy_align_affine</span></code>\ncommand with the <code class=\"docutils literal notranslate\"><span class=\"pre\">transform</span></code> parameter set to <code class=\"docutils literal notranslate\"><span class=\"pre\">com</span></code> e.g.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dipy_align_affine</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_static_file</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_moving_file</span><span class=\"o\">&gt;</span> <span class=\"o\">--</span><span class=\"n\">transform</span> <span class=\"s2\">&quot;com&quot;</span> <span class=\"o\">--</span><span class=\"n\">out_dir</span> <span class=\"s2\">&quot;image_reg_output&quot;</span>\n</pre></div>\n</div>\n<p>This command will save the transformed image and the affine matrix to the\nspecified output directory.</p>\n<p>If we are to use an affine transformation type during the registration process,\nwe would call the <code class=\"docutils literal notranslate\"><span class=\"pre\">dipy_align_affine</span></code> command as, e.g.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dipy_align_affine</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_static_file</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_moving_file</span><span class=\"o\">&gt;</span> <span class=\"o\">--</span><span class=\"n\">transform</span> <span class=\"s2\">&quot;affine&quot;</span> <span class=\"o\">--</span><span class=\"n\">out_dir</span> <span class=\"s2\">&quot;affine_reg_output&quot;</span> <span class=\"o\">--</span><span class=\"n\">out_affine</span> <span class=\"s2\">&quot;affine_reg.txt&quot;</span>\n</pre></div>\n</div>\n<p>This command will apply an affine transformation on the moving image file, and\nsave the transformed image and the affine matrix to the <code class=\"docutils literal notranslate\"><span class=\"pre\">affine_reg_output</span></code>\ndirectory.</p>\n<p>In case you did not specify the output directory, the transformed image file\nand affine matrix would be saved to the current by default. If you did not\nspecify the name of the output affine matrix, the affine matrix will be saved\nto a file named <code class=\"docutils literal notranslate\"><span class=\"pre\">affine.txt</span></code> by default, located in the current directory\nalso by default.</p>\n</section>\n<section id=\"symmetric-diffeomorphic-registration\">\n<h2>Symmetric Diffeomorphic Registration<a class=\"headerlink\" href=\"#symmetric-diffeomorphic-registration\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Symmetric Diffeomorphic Registration is performed using the Symmetric\nNormalization (SyN) algorithm proposed by Avants et al. <a class=\"reference internal\" href=\"../../examples_built/20_registration/syn_registration_3d/#avants09\" id=\"id1\"><span>[Avants09]</span></a> (also\nimplemented in the ANTs software <a class=\"reference internal\" href=\"../../examples_built/20_registration/syn_registration_3d/#avants11\" id=\"id2\"><span>[Avants11]</span></a>). It is an optimization technique\nthat brings the moving image closer to the static image.</p>\n<p>Create a directory in which to save the transformed image (e.g.:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">syn_reg_output</span></code>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mkdir</span> <span class=\"n\">syn_reg_output</span>\n</pre></div>\n</div>\n<p>To run the symmetric normalization registration method, we need to specify the\npaths to the static image file, and to the moving image file, followed by\noptional arguments. In this case, we will be specifying the metric (<code class=\"docutils literal notranslate\"><span class=\"pre\">metric</span></code>),\nthe output directory (<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>) and the file name of the output warped image\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">out_warped</span></code>). You can use cc (cross correlation), ssd (sum squared\ndifferences) or em (expectation-maximization) as metrics.</p>\n<p>The symmetric diffeomorphic registration method in DIPY is run through the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dipy_align_syn</span></code> command, e.g.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dipy_align_syn</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_static_file</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_moving_file</span><span class=\"o\">&gt;</span> <span class=\"o\">--</span><span class=\"n\">metric</span> <span class=\"s2\">&quot;cc&quot;</span> <span class=\"o\">--</span><span class=\"n\">out_dir</span> <span class=\"s2\">&quot;syn_reg_output&quot;</span> <span class=\"o\">--</span><span class=\"n\">out_warped</span> <span class=\"s2\">&quot;syn_reg_warped.nii.gz&quot;</span>\n</pre></div>\n</div>\n<p>In case you did not specify the output directory, the transformed files would\nbe saved in the current directory by default. If you did not specify the file\nname of the output warped image, the warped file will be saved as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">warped_moved.nii.gz</span></code> by default.</p>\n</section>\n<section id=\"apply-a-transformation\">\n<h2>Apply a Transformation<a class=\"headerlink\" href=\"#apply-a-transformation\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>We can apply a transformation computed previously to an image. In order to do\nso, we need to specify the path of the static image file, moving image file,\nand transform map file, which is a text(<a href=\"#id3\"><span class=\"problematic\" id=\"id4\">*</span></a>.txt) file containing the affine matrix\nfor the affine case and a nifti file containing the mapping displacement field\nin each voxel with this shape (x, y, z, 3, 2) for the diffeomorphic case,\nfollowed by optional arguments. In this case, we will be specifying the\ntransform type (<code class=\"docutils literal notranslate\"><span class=\"pre\">transform_type</span></code>) and the output directory (<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>).</p>\n<p>Create a directory in which to save the transformed files (e.g.:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">transform_reg_output</span></code>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mkdir</span> <span class=\"n\">transform_reg_output</span>\n</pre></div>\n</div>\n<p>For a <code class=\"docutils literal notranslate\"><span class=\"pre\">diffeomorphic</span></code> transformation, we would run the command as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dipy_apply_transform</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_static_file</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_moving_file</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_transform_map_file</span><span class=\"o\">&gt;</span> <span class=\"o\">--</span><span class=\"n\">transform_type</span> <span class=\"s2\">&quot;diffeomorphic&quot;</span> <span class=\"o\">--</span><span class=\"n\">out_dir</span> <span class=\"s2\">&quot;transform_reg_output&quot;</span>\n</pre></div>\n</div>\n<p>This command will transform the moving image and save the transformed files\nto the specified output directory.</p>\n</section>\n<section id=\"streamline-based-registration\">\n<h2>Streamline-based Registration<a class=\"headerlink\" href=\"#streamline-based-registration\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Streamline-based registration (SLR) <a class=\"reference internal\" href=\"../../examples_built/20_registration/bundle_registration/#garyfallidis15\" id=\"id5\"><span>[Garyfallidis15]</span></a> is performed to align\nbundles of streamlines directly in the space of streamlines. The aim is to\nalign the moving streamlines with the static streamlines.</p>\n<p>The workflow for streamline-based registration requires the paths to the\nstatic streamlines file, and to the moving streamlines file, followed by\noptional arguments. In this case, we will be specifying the number of points\nfor discretizing each streamline (<code class=\"docutils literal notranslate\"><span class=\"pre\">nb_pts</span></code>) and the output directory\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>).</p>\n<p>Create a directory in which to save the transformed files (e.g.:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sl_reg_output</span></code>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mkdir</span> <span class=\"n\">sl_reg_output</span>\n</pre></div>\n</div>\n<p>Then, run the command as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dipy_slr</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_static_file</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_moving_file</span><span class=\"o\">&gt;</span> <span class=\"o\">--</span><span class=\"n\">nb_pts</span> <span class=\"mi\">25</span> <span class=\"o\">--</span><span class=\"n\">out_dir</span> <span class=\"s2\">&quot;sl_reg_output&quot;</span>\n</pre></div>\n</div>\n<p>This command will perform streamline-based registration and save the\ntransformed files to the specified output directory.</p>\n<section id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"avants09\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Avants09</a><span class=\"fn-bracket\">]</span></span>\n<p>Avants, B. B., Epstein, C. L., Grossman, M., &amp; Gee, J. C. (2009).\nSymmetric Diffeomorphic Image Registration with Cross-Correlation:\nEvaluating Automated Labeling of Elderly and Neurodegenerative Brain, 12(1),\n26-41.</p>\n</div>\n<div class=\"citation\" id=\"avants11\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Avants11</a><span class=\"fn-bracket\">]</span></span>\n<p>Avants, B. B., Tustison, N., &amp; Song, G. (2011). Advanced\nNormalization Tools (ANTS), 1-35.</p>\n</div>\n<div class=\"citation\" id=\"garyfallidis15\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id5\">Garyfallidis15</a><span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al., \u201cRobust and efficient linear registration\nof white-matter fascicles in the space of streamlines\u201d, Neuroimage,\n117:124-140, 2015.</p>\n</div>\n</div>\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["interfaces/reconstruction_flow", "Reconstruction", "N", "next"], ["interfaces/gibbs_unringing_flow", "Gibbs Unringing", "P", "previous"]], "sourcename": "interfaces/registration_flow.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Registration</a><ul>\n<li><a class=\"reference internal\" href=\"#image-registration\">Image Registration</a></li>\n<li><a class=\"reference internal\" href=\"#symmetric-diffeomorphic-registration\">Symmetric Diffeomorphic Registration</a></li>\n<li><a class=\"reference internal\" href=\"#apply-a-transformation\">Apply a Transformation</a></li>\n<li><a class=\"reference internal\" href=\"#streamline-based-registration\">Streamline-based Registration</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "interfaces/registration_flow", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}