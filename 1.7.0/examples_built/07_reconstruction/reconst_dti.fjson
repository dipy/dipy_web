{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Reconstruction"}], "prev": {"link": "../reconst_qti/", "title": "Reconstruct with Q-space Trajectory Imaging (QTI)"}, "next": {"link": "../reconst_forecast/", "title": "Crossing invariant fiber response function with FORECAST model"}, "title": "Reconstruction of the diffusion signal with the Tensor model", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-07-reconstruction-reconst-dti-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"reconstruction-of-the-diffusion-signal-with-the-tensor-model\">\n<span id=\"reconst-dti\"></span><span id=\"sphx-glr-examples-built-07-reconstruction-reconst-dti-py\"></span><h1>Reconstruction of the diffusion signal with the Tensor model<a class=\"headerlink\" href=\"#reconstruction-of-the-diffusion-signal-with-the-tensor-model\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>The diffusion tensor model is a model that describes the diffusion within a\nvoxel. First proposed by Basser and colleagues <a class=\"reference internal\" href=\"#basser1994\" id=\"id1\"><span>[Basser1994]</span></a>, it has been very\ninfluential in demonstrating the utility of diffusion MRI in characterizing the\nmicro-structure of white matter tissue and of the biophysical properties of\ntissue, inferred from local diffusion properties and it is still very commonly\nused.</p>\n<p>The diffusion tensor models the diffusion signal as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<p>rac{S(mathbf{g}, b)}{S_0} = e^{-bmathbf{g}^T mathbf{D} mathbf{g}}</p>\n<p>Where <span class=\"math notranslate nohighlight\">\\(\\mathbf{g}\\)</span> is a unit vector in 3 space indicating the direction of\nmeasurement and b are the parameters of measurement, such as the strength and\nduration of diffusion-weighting gradient. <span class=\"math notranslate nohighlight\">\\(S(\\mathbf{g}, b)\\)</span> is the\ndiffusion-weighted signal measured and <span class=\"math notranslate nohighlight\">\\(S_0\\)</span> is the signal conducted in a\nmeasurement with no diffusion weighting. <span class=\"math notranslate nohighlight\">\\(\\mathbf{D}\\)</span> is a positive-definite\nquadratic form, which contains six free parameters to be fit. These six\nparameters are:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\mathbf{D} = \begin{pmatrix} D_{xx} &amp; D_{xy} &amp; D_{xz} \\\n                    D_{yx} &amp; D_{yy} &amp; D_{yz} \\\n                    D_{zx} &amp; D_{zy} &amp; D_{zz} \\ \\end{pmatrix}\\]</div>\n<p>This matrix is a variance/covariance matrix of the diffusivity along the three\nspatial dimensions. Note that we can assume that diffusivity has antipodal\nsymmetry, so elements across the diagonal are equal. For example:\n<span class=\"math notranslate nohighlight\">\\(D_{xy} = D_{yx}\\)</span>. This is why there are only 6 free parameters to estimate\nhere.</p>\n<p>In the following example we show how to reconstruct your diffusion datasets\nusing a single tensor model.</p>\n<p>First import the necessary modules:</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">numpy</span></code> is for numerical computation</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">dipy.io.image</span></code> is for loading / saving imaging datasets\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dipy.io.gradients</span></code> is for loading / saving our bvals and bvecs</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">save_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">dipy.reconst</span></code> is for the reconstruction algorithms which we use to create\nvoxel models from the raw data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">as</span> <span class=\"nn\">dti</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">dipy.data</span></code> is used for small datasets that we use in tests and examples.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">get_fnames</span></code> will download the raw dMRI dataset of a single subject.\nThe size of the dataset is 87 MBytes. You only need to fetch once. It\nwill return the file names of our data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we read the saved dataset. gtab contains a <code class=\"docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code>\nobject (information about the gradients e.g. b-values and b-vectors).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>data.shape (81, 106, 76, 160)\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76,</span> <span class=\"pre\">160)</span></code></p>\n<p>First of all, we mask and crop the data. This is a quick way to avoid\ncalculating Tensors on the background of the image. This is done using <a href=\"#id5\"><span class=\"problematic\" id=\"id6\">DIPY_</span></a>\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mask</span></code> module.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                             <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;maskdata.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">maskdata</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>maskdata.shape (71, 88, 62, 160)\n</pre></div>\n</div>\n<p>maskdata.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(72,</span> <span class=\"pre\">87,</span> <span class=\"pre\">59,</span> <span class=\"pre\">160)</span></code></p>\n<p>Now that we have prepared the datasets we can go forward with the voxel\nreconstruction. First, we instantiate the Tensor model in the following way.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">tenmodel</span> <span class=\"o\">=</span> <span class=\"n\">dti</span><span class=\"o\">.</span><span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Fitting the data is very simple. We just need to call the fit method of the\nTensorModel in the following way:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">tenfit</span> <span class=\"o\">=</span> <span class=\"n\">tenmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">maskdata</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The fit method creates a <code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code> object which contains the fitting\nparameters and other attributes of the model. You can recover the 6 values\nof the triangular matrix representing the tensor D. By default, in DIPY, values\nare ordered as (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz). The <code class=\"docutils literal notranslate\"><span class=\"pre\">tensor_vals</span></code> variable\ndefined below is a 4D data with last dimension of size 6.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">tensor_vals</span> <span class=\"o\">=</span> <span class=\"n\">dti</span><span class=\"o\">.</span><span class=\"n\">lower_triangular</span><span class=\"p\">(</span><span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">quadratic_form</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can also recover other metrics from the model. For example we can generate\nfractional anisotropy (FA) from the eigen-values of the tensor. FA is used to\ncharacterize the degree to which the distribution of diffusion in a voxel is\ndirectional. That is, whether there is relatively unrestricted diffusion in one\nparticular direction.</p>\n<p>Mathematically, FA is defined as the normalized variance of the eigen-values of\nthe tensor:</p>\n<div class=\"math notranslate nohighlight\">\n\\[FA = \\sqrt{\\frac{1}{2}\\frac{(\\lambda_1-\\lambda_2)^2+(\\lambda_1-\n            \\lambda_3)^2+(\\lambda_2-\\lambda_3)^2}{\\lambda_1^2+\n            \\lambda_2^2+\\lambda_3^2}}\\]</div>\n<p>Note that FA should be interpreted carefully. It may be an indication of the\ndensity of packing of fibers in a voxel, and the amount of myelin wrapping\nthese axons, but it is not always a measure of \u201ctissue integrity\u201d. For example,\nFA may decrease in locations in which there is fanning of white matter fibers,\nor where more than one population of white matter fibers crosses.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing anisotropy measures (FA, MD, RGB)&#39;</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"kn\">import</span> <span class=\"n\">fractional_anisotropy</span><span class=\"p\">,</span> <span class=\"n\">color_fa</span>\n\n<span class=\"n\">FA</span> <span class=\"o\">=</span> <span class=\"n\">fractional_anisotropy</span><span class=\"p\">(</span><span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">evals</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Computing anisotropy measures (FA, MD, RGB)\n</pre></div>\n</div>\n<p>In the background of the image the fitting will not be accurate there is no\nsignal and possibly we will find FA values with nans (not a number). We can\neasily remove these in the following way.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">FA</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>Saving the FA images is very easy using <a href=\"#id7\"><span class=\"problematic\" id=\"id8\">nibabel_</span></a>. We need the FA volume and the\naffine matrix which transform the image\u2019s coordinates to the world coordinates.\nHere, we choose to save the FA in <code class=\"docutils literal notranslate\"><span class=\"pre\">float32</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensor_fa.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">FA</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can now see the result with any nifti viewer or check it slice by slice\nusing <a href=\"#id9\"><span class=\"problematic\" id=\"id10\">matplotlib_</span></a>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">imshow</span></code>. In the same way you can save the eigen values,\nthe eigen vectors or any other properties of the tensor.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensor_evecs.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">evecs</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Other tensor statistics can be calculated from the <code class=\"docutils literal notranslate\"><span class=\"pre\">tenfit</span></code> object. For\nexample, a commonly calculated statistic is the mean diffusivity (MD). This is\nsimply the mean of the  eigenvalues of the tensor. Since FA is a normalized\nmeasure of variance and MD is the mean, they are often used as complimentary\nmeasures. In DIPY, there are two equivalent ways to calculate the mean\ndiffusivity. One is by calling the <code class=\"docutils literal notranslate\"><span class=\"pre\">mean_diffusivity</span></code> module function on the\neigen-values of the <code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code> class instance:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">MD1</span> <span class=\"o\">=</span> <span class=\"n\">dti</span><span class=\"o\">.</span><span class=\"n\">mean_diffusivity</span><span class=\"p\">(</span><span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">evals</span><span class=\"p\">)</span>\n<span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensors_md.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">MD1</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The other is to call the <code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code> class method:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">MD2</span> <span class=\"o\">=</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">md</span>\n</pre></div>\n</div>\n<p>Obviously, the quantities are identical.</p>\n<p>We can also compute the colored FA or RGB-map <a class=\"reference internal\" href=\"#pajevic1999\" id=\"id2\"><span>[Pajevic1999]</span></a>. First, we make\nsure that the FA is scaled between 0 and 1, we compute the RGB map and save it.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">FA</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">RGB</span> <span class=\"o\">=</span> <span class=\"n\">color_fa</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"p\">,</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">evecs</span><span class=\"p\">)</span>\n<span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;tensor_rgb.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mi\">255</span> <span class=\"o\">*</span> <span class=\"n\">RGB</span><span class=\"p\">,</span> <span class=\"s1\">&#39;uint8&#39;</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s try to visualize the tensor ellipsoids of a small rectangular\narea in an axial slice of the splenium of the corpus callosum (CC).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing tensor ellipsoids in a part of the splenium of the CC&#39;</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;repulsion724&#39;</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n\n<span class=\"n\">evals</span> <span class=\"o\">=</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">evals</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"mi\">29</span><span class=\"p\">]</span>\n<span class=\"n\">evecs</span> <span class=\"o\">=</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">evecs</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"mi\">29</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Computing tensor ellipsoids in a part of the splenium of the CC\n</pre></div>\n</div>\n<p>We can color the ellipsoids using the <code class=\"docutils literal notranslate\"><span class=\"pre\">color_fa</span></code> values that we calculated\nabove. In this example we additionally normalize the values to increase the\ncontrast.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cfa</span> <span class=\"o\">=</span> <span class=\"n\">RGB</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"mi\">29</span><span class=\"p\">]</span>\n<span class=\"n\">cfa</span> <span class=\"o\">/=</span> <span class=\"n\">cfa</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">tensor_slicer</span><span class=\"p\">(</span><span class=\"n\">evals</span><span class=\"p\">,</span> <span class=\"n\">evecs</span><span class=\"p\">,</span> <span class=\"n\">scalar_colors</span><span class=\"o\">=</span><span class=\"n\">cfa</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                              <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as tensor_ellipsoids.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;tensor_ellipsoids.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_reconst_dti_001.png\" srcset=\"../../_images/sphx_glr_reconst_dti_001.png\" alt=\"reconst dti\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Saving illustration as tensor_ellipsoids.png\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id3\">\n<img alt=\"examples_built/07_reconstruction/tensor_ellipsoids.png\" src=\"examples_built/07_reconstruction/tensor_ellipsoids.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Tensor Ellipsoids.</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Finally, we can visualize the tensor Orientation Distribution Functions\nfor the same area as we did with the ellipsoids.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">tensor_odfs</span> <span class=\"o\">=</span> <span class=\"n\">tenmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">:</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"n\">odf_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">tensor_odfs</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n                             <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">odf_actor</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as tensor_odfs.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;tensor_odfs.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_reconst_dti_002.png\" srcset=\"../../_images/sphx_glr_reconst_dti_002.png\" alt=\"reconst dti\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Saving illustration as tensor_odfs.png\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id4\">\n<img alt=\"examples_built/07_reconstruction/tensor_odfs.png\" src=\"examples_built/07_reconstruction/tensor_odfs.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Tensor ODFs.</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Note that while the tensor model is an accurate and reliable model of the\ndiffusion signal in the white matter, it has the drawback that it only has one\nprincipal diffusion direction. Therefore, in locations in the brain that\ncontain multiple fiber populations crossing each other, the tensor model may\nindicate that the principal diffusion direction is intermediate to these\ndirections. Therefore, using the principal diffusion direction for tracking in\nthese locations may be misleading and may lead to errors in defining the\ntracks. Fortunately, other reconstruction methods can be used to represent the\ndiffusion and fiber orientations in those locations. These are presented in\nother examples.</p>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"basser1994\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Basser1994</a><span class=\"fn-bracket\">]</span></span>\n<p>Basser PJ, Mattielo J, LeBihan (1994). MR diffusion tensor\nspectroscopy and imaging.</p>\n</div>\n<div class=\"citation\" id=\"pajevic1999\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Pajevic1999</a><span class=\"fn-bracket\">]</span></span>\n<p>Pajevic S, Pierpaoli (1999). Color schemes to represent the\norientation of anisotropic tissues from diffusion tensor data: application\nto white matter fiber tract mapping in the human brain.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 1 minutes  1.646 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-07-reconstruction-reconst-dti-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/1c9ca8053893616908559148b912665a/reconst_dti.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_dti.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/d9ea3ed46e8b1d1cf6dc9b9ba1449e1f/reconst_dti.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_dti.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/07_reconstruction/reconst_forecast", "Crossing invariant fiber response function with FORECAST model", "N", "next"], ["examples_built/07_reconstruction/reconst_qti", "Reconstruct with Q-space Trajectory Imaging (QTI)", "P", "previous"]], "sourcename": "examples_built/07_reconstruction/reconst_dti.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruction of the diffusion signal with the Tensor model</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/07_reconstruction/reconst_dti", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}