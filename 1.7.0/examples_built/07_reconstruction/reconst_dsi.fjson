{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Reconstruction"}], "prev": {"link": "../reconst_shore/", "title": "Continuous and analytical diffusion signal modelling with 3D-SHORE"}, "next": {"link": "../reconst_dsid/", "title": "DSI Deconvolution vs DSI"}, "title": "Reconstruct with Diffusion Spectrum Imaging", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-07-reconstruction-reconst-dsi-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"reconstruct-with-diffusion-spectrum-imaging\">\n<span id=\"sphx-glr-examples-built-07-reconstruction-reconst-dsi-py\"></span><h1>Reconstruct with Diffusion Spectrum Imaging<a class=\"headerlink\" href=\"#reconstruct-with-diffusion-spectrum-imaging\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>We show how to apply Diffusion Spectrum Imaging <a class=\"reference internal\" href=\"#wedeen08\" id=\"id1\"><span>[Wedeen08]</span></a> to\ndiffusion MRI datasets of Cartesian keyhole diffusion gradients.</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dsi</span> <span class=\"kn\">import</span> <span class=\"n\">DiffusionSpectrumModel</span>\n</pre></div>\n</div>\n<p>Download and get the data filenames for this tutorial.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fraw</span><span class=\"p\">,</span> <span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;taiwan_ntu_dsi&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a\nGradientTable object (gradient information e.g. b-values). For example to read\nthe b-values it is possible to write print(gtab.bvals).</p>\n<p>Load the raw diffusion data and the affine.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">voxel_size</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">fraw</span><span class=\"p\">,</span> <span class=\"n\">return_voxsize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span><span class=\"p\">)</span>\n<span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">/</span>\n                 <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">*</span> <span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))[:,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>data.shape (96, 96, 60, 203)\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60,</span> <span class=\"pre\">203)</span></code></p>\n<p>This dataset has anisotropic voxel sizes, therefore reslicing is necessary.</p>\n<p>Instantiate the Model and apply it to the data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dsmodel</span> <span class=\"o\">=</span> <span class=\"n\">DiffusionSpectrumModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s just use one slice only from the data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dataslice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">dsfit</span> <span class=\"o\">=</span> <span class=\"n\">dsmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>  0%|          | 0/9216 [00:00&lt;?, ?it/s]\n100%|##########| 9216/9216 [00:00&lt;00:00, 595622.45it/s]\n</pre></div>\n</div>\n<p>Load an odf reconstruction sphere</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;repulsion724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Calculate the ODFs with this specific sphere</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ODF</span> <span class=\"o\">=</span> <span class=\"n\">dsfit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;ODF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">ODF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/Users/skoudoro/devel/dipy/dipy/reconst/dsi.py:173: RuntimeWarning: invalid value encountered in divide\n  Pr /= Pr.sum()\nODF.shape (96, 96, 724)\n</pre></div>\n</div>\n<p>ODF.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">724)</span></code></p>\n<p>In a similar fashion it is possible to calculate the PDFs of all voxels\nin one call with the following way</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PDF</span> <span class=\"o\">=</span> <span class=\"n\">dsfit</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;PDF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">PDF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>PDF.shape (96, 96, 17, 17, 17)\n</pre></div>\n</div>\n<p>PDF.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17)</span></code></p>\n<p>We see that even for a single slice this PDF array is close to 345 MBytes so we\nreally have to be careful with memory usage when use this function with a full\ndataset.</p>\n<p>The simple solution is to generate/analyze the ODFs/PDFs by iterating through\neach voxel and not store them in memory if that is not necessary.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.ndindex</span> <span class=\"kn\">import</span> <span class=\"n\">ndindex</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">ndindex</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]):</span>\n    <span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">dsmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you really want to save the PDFs of a full dataset on the disc we recommend\nusing memory maps (<code class=\"docutils literal notranslate\"><span class=\"pre\">numpy.memmap</span></code>) but still have in mind that even if you do\nthat for example for a dataset of volume size <code class=\"docutils literal notranslate\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60)</span></code> you will need\nabout 2.5 GBytes which can take less space when reasonable spheres\n(with &lt; 1000 vertices) are used.</p>\n<p>Let\u2019s now calculate a map of Generalized Fractional Anisotropy (GFA) <a class=\"reference internal\" href=\"#tuch04\" id=\"id2\"><span>[Tuch04]</span></a>\nusing the DSI ODFs.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.odf</span> <span class=\"kn\">import</span> <span class=\"n\">gfa</span>\n\n<span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">gfa</span><span class=\"p\">(</span><span class=\"n\">ODF</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">fig_hist</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;dsi_gfa.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_reconst_dsi_001.png\" srcset=\"../../_images/sphx_glr_reconst_dsi_001.png\" alt=\"reconst dsi\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\">\n<img alt=\"examples_built/07_reconstruction/dsi_gfa.png\" src=\"examples_built/07_reconstruction/dsi_gfa.png\" />\n</figure>\n<p>See also <span class=\"xref std std-ref\">example_reconst_dsi_metrics</span> for calculating different types\nof DSI maps.</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"wedeen08\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Wedeen08</a><span class=\"fn-bracket\">]</span></span>\n<p>Wedeen et al., Diffusion spectrum magnetic resonance imaging\n(DSI) tractography of crossing fibers, Neuroimage, vol 41, no 4,\n1267-1277, 2008.</p>\n</div>\n<div class=\"citation\" id=\"tuch04\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Tuch04</a><span class=\"fn-bracket\">]</span></span>\n<p>Tuch, D.S, Q-ball imaging, MRM, vol 52, no 6, 1358-1372, 2004.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  24.601 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-07-reconstruction-reconst-dsi-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/508118f792d6ddd85cb3e0bbd293a59c/reconst_dsi.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_dsi.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/73b8bdc20282355d6654b766c06e4a5b/reconst_dsi.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_dsi.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/07_reconstruction/reconst_dsid", "DSI Deconvolution vs DSI", "N", "next"], ["examples_built/07_reconstruction/reconst_shore", "Continuous and analytical diffusion signal modelling with 3D-SHORE", "P", "previous"]], "sourcename": "examples_built/07_reconstruction/reconst_dsi.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Diffusion Spectrum Imaging</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/07_reconstruction/reconst_dsi", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}