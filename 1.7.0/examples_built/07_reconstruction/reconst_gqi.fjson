{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Reconstruction"}], "prev": {"link": "../reconst_shore_metrics/", "title": "Calculate SHORE scalar maps"}, "next": {"link": "../reconst_csa/", "title": "Reconstruct with Constant Solid Angle (Q-Ball)"}, "title": "Reconstruct with Generalized Q-Sampling Imaging", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-07-reconstruction-reconst-gqi-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"reconstruct-with-generalized-q-sampling-imaging\">\n<span id=\"sphx-glr-examples-built-07-reconstruction-reconst-gqi-py\"></span><h1>Reconstruct with Generalized Q-Sampling Imaging<a class=\"headerlink\" href=\"#reconstruct-with-generalized-q-sampling-imaging\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>We show how to apply Generalized Q-Sampling Imaging <a class=\"reference internal\" href=\"#yeh2010\" id=\"id1\"><span>[Yeh2010]</span></a>\nto diffusion MRI datasets. You can think of GQI as an analytical version of\nDSI orientation distribution function (ODF) (Garyfallidis, PhD thesis, 2012).</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.gqi</span> <span class=\"kn\">import</span> <span class=\"n\">GeneralizedQSamplingModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"kn\">import</span> <span class=\"n\">peaks_from_model</span>\n</pre></div>\n</div>\n<p>Download and get the data filenames for this tutorial.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fraw</span><span class=\"p\">,</span> <span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;taiwan_ntu_dsi&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code> object (gradient information e.g. b-values). For example to\nread the b-values it is possible to write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvals</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Load the raw diffusion data and the affine.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">voxel_size</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">fraw</span><span class=\"p\">,</span> <span class=\"n\">return_voxsize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span><span class=\"p\">)</span>\n<span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">/</span>\n                 <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">*</span> <span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))[:,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>data.shape (96, 96, 60, 203)\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">60,</span> <span class=\"pre\">203)</span></code></p>\n<p>This dataset has anisotropic voxel sizes, therefore reslicing is necessary.</p>\n<p>Instantiate the model and apply it to the data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gqmodel</span> <span class=\"o\">=</span> <span class=\"n\">GeneralizedQSamplingModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sampling_length</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">sampling_length</span></code> is used here to</p>\n<p>Lets just use one slice only from the data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dataslice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">dataslice</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span>\n\n<span class=\"n\">gqfit</span> <span class=\"o\">=</span> <span class=\"n\">gqmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">dataslice</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>  0%|          | 0/4733 [00:00&lt;?, ?it/s]\n100%|##########| 4733/4733 [00:00&lt;00:00, 477558.78it/s]\n</pre></div>\n</div>\n<p>Load an ODF reconstruction sphere</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;repulsion724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Calculate the ODFs with this specific sphere</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ODF</span> <span class=\"o\">=</span> <span class=\"n\">gqfit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;ODF.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">ODF</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>ODF.shape (96, 96, 724)\n</pre></div>\n</div>\n<p>ODF.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(96,</span> <span class=\"pre\">96,</span> <span class=\"pre\">724)</span></code></p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> we can find the main peaks of the ODFs and other\nproperties.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gqpeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">gqmodel</span><span class=\"p\">,</span>\n                           <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">dataslice</span><span class=\"p\">,</span>\n                           <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                           <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">,</span>\n                           <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                           <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                           <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                           <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">gqpeak_values</span> <span class=\"o\">=</span> <span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">gqpeak_indices</span></code> show which sphere points have the maximum values.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gqpeak_indices</span> <span class=\"o\">=</span> <span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">peak_indices</span>\n</pre></div>\n</div>\n<p>It is also possible to calculate GFA.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;GFA.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>GFA.shape (96, 96)\n</pre></div>\n</div>\n<p>With parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">return_odf=True</span></code> we can obtain the ODF using <code class=\"docutils literal notranslate\"><span class=\"pre\">gqpeaks.ODF</span></code></p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gqpeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">gqmodel</span><span class=\"p\">,</span>\n                           <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">dataslice</span><span class=\"p\">,</span>\n                           <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                           <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">,</span>\n                           <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                           <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                           <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                           <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This ODF will be of course identical to the ODF calculated above as long as\nthe same data and mask are used.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">gqpeaks</span><span class=\"o\">.</span><span class=\"n\">odf</span> <span class=\"o\">!=</span> <span class=\"n\">ODF</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n<p>True</p>\n<p>The advantage of using <code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> is that it calculates the ODF only\nonce and saves it or deletes if it is not necessary to keep.</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"yeh2010\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Yeh2010</a><span class=\"fn-bracket\">]</span></span>\n<p>Yeh, F-C et al., Generalized Q-sampling imaging, IEEE Transactions\non Medical Imaging, vol 29, no 9, 2010.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  23.220 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-07-reconstruction-reconst-gqi-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/9dba557e70f75acb39aa96f5655c2b63/reconst_gqi.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_gqi.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/dff7d55155ece6f953d4f43a455e5ed3/reconst_gqi.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_gqi.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/07_reconstruction/reconst_csa", "Reconstruct with Constant Solid Angle (Q-Ball)", "N", "next"], ["examples_built/07_reconstruction/reconst_shore_metrics", "Calculate SHORE scalar maps", "P", "previous"]], "sourcename": "examples_built/07_reconstruction/reconst_gqi.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Generalized Q-Sampling Imaging</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/07_reconstruction/reconst_gqi", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}