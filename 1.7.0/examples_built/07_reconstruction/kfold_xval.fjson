{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Reconstruction"}], "prev": {"link": "../reconst_dki/", "title": "Reconstruction of the diffusion signal with the kurtosis tensor model"}, "next": {"link": "../reconst_qti/", "title": "Reconstruct with Q-space Trajectory Imaging (QTI)"}, "title": "K-fold cross-validation for model comparison", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-07-reconstruction-kfold-xval-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"k-fold-cross-validation-for-model-comparison\">\n<span id=\"sphx-glr-examples-built-07-reconstruction-kfold-xval-py\"></span><h1>K-fold cross-validation for model comparison<a class=\"headerlink\" href=\"#k-fold-cross-validation-for-model-comparison\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Different models of diffusion MRI can be compared based on their accuracy in\nfitting the diffusion signal. Here, we demonstrate this by comparing two\nmodels: the diffusion tensor model (DTI) and Constrained Spherical\nDeconvolution (CSD). These models differ from each other substantially. DTI\napproximates the diffusion pattern as a 3D Gaussian distribution, and has only\n6 free parameters. CSD, on the other hand, fits many more parameters. The\nmodels are also not nested, so they cannot be compared using the\nlog-likelihood ratio.</p>\n<p>A general way to perform model comparison is cross-validation <a class=\"reference internal\" href=\"#hastie2008\" id=\"id1\"><span>[Hastie2008]</span></a>. In\nthis method, a model is fit to some of the data (a <em>learning set</em>) and the\nmodel is then used to predict a held-out set (a <em>testing set</em>). The model\npredictions can then be compared to estimate prediction error on the held out\nset. This method has been used for comparison of models such as DTI and CSD\n<a class=\"reference internal\" href=\"#rokem2014\" id=\"id2\"><span>[Rokem2014]</span></a>, and has the advantage that it the comparison is imprevious to\ndifferences in the number of parameters in the model, and it can be used to\ncompare models that are not nested.</p>\n<p>In <a href=\"#id4\"><span class=\"problematic\" id=\"id5\">DIPY_</span></a>, we include an implementation of k-fold cross-validation. In this\nmethod, the data is divided into <span class=\"math notranslate nohighlight\">\\(k\\)</span> different segments. In each iteration\n:math:`\nrac{1}{k}th` of the data is held out and the model is fit to the other\n:math:`\nrac{k-1}{k}` parts of the data. A prediction of the held out data is done\nand recorded. At the end of <span class=\"math notranslate nohighlight\">\\(k\\)</span> iterations a prediction of all of the data will\nhave been conducted, and this can be compared directly to all of the data.</p>\n<p>First, we import that modules needed for this example. In particular, the\n<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.cross_validation</span></code> module implements k-fold cross-validation</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">as</span> <span class=\"nn\">dpd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.cross_validation</span> <span class=\"k\">as</span> <span class=\"nn\">xval</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">as</span> <span class=\"nn\">dti</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">as</span> <span class=\"nn\">csd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scipy.stats</span> <span class=\"k\">as</span> <span class=\"nn\">stats</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n</pre></div>\n</div>\n<p>We fetch some data and select a couple of voxels to perform comparisons on. One\nlies in the corpus callosum (cc), while the other is in the centrum semiovale\n(cso), a part of the brain known to contain multiple crossing white matter\nfiber populations.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">dpd</span><span class=\"o\">.</span><span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">cc_vox</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">]</span>\n<span class=\"n\">cso_vox</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We initialize each kind of model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dti_model</span> <span class=\"o\">=</span> <span class=\"n\">dti</span><span class=\"o\">.</span><span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">csd</span><span class=\"o\">.</span><span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">csd</span><span class=\"o\">.</span><span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we perform cross-validation for each kind of model, comparing model\npredictions to the diffusion MRI data in each one of these voxels.</p>\n<p>Note that we use 2-fold cross-validation, which means that in each iteration,\nthe model will be fit to half of the data, and used to predict the other half.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dti_cc</span> <span class=\"o\">=</span> <span class=\"n\">xval</span><span class=\"o\">.</span><span class=\"n\">kfold_xval</span><span class=\"p\">(</span><span class=\"n\">dti_model</span><span class=\"p\">,</span> <span class=\"n\">cc_vox</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">csd_cc</span> <span class=\"o\">=</span> <span class=\"n\">xval</span><span class=\"o\">.</span><span class=\"n\">kfold_xval</span><span class=\"p\">(</span><span class=\"n\">csd_model</span><span class=\"p\">,</span> <span class=\"n\">cc_vox</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"n\">dti_cso</span> <span class=\"o\">=</span> <span class=\"n\">xval</span><span class=\"o\">.</span><span class=\"n\">kfold_xval</span><span class=\"p\">(</span><span class=\"n\">dti_model</span><span class=\"p\">,</span> <span class=\"n\">cso_vox</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">csd_cso</span> <span class=\"o\">=</span> <span class=\"n\">xval</span><span class=\"o\">.</span><span class=\"n\">kfold_xval</span><span class=\"p\">(</span><span class=\"n\">csd_model</span><span class=\"p\">,</span> <span class=\"n\">cso_vox</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We plot a scatter plot of the data with the model predictions in each of these\nvoxels, focusing only on the diffusion-weighted measurements (each point\ncorresponds to a different gradient direction). The two models are compared in\neach sub-plot (blue=DTI, red=CSD).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cc_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dti_cc</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span>\n           <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;DTI in CC&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cc_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">csd_cc</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span>\n           <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;CSD in CC&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cso_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dti_cso</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span>\n           <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;DTI in CSO&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cso_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">csd_cso</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span>\n           <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;CSD in CSO&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper left&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper left&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">this_ax</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"p\">:</span>\n    <span class=\"n\">this_ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data (relative to S0)&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">this_ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model prediction (relative to S0)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;model_predictions.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_kfold_xval_001.png\" srcset=\"../../_images/sphx_glr_kfold_xval_001.png\" alt=\"kfold xval\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id3\">\n<img alt=\"examples_built/07_reconstruction/model_predictions.png\" src=\"examples_built/07_reconstruction/model_predictions.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Model predictions.</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>We can also quantify the goodness of fit of the models by calculating an\nR-squared score:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc_dti_r2</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">pearsonr</span><span class=\"p\">(</span><span class=\"n\">cc_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                           <span class=\"n\">dti_cc</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"n\">cc_csd_r2</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">pearsonr</span><span class=\"p\">(</span><span class=\"n\">cc_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                           <span class=\"n\">csd_cc</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"n\">cso_dti_r2</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">pearsonr</span><span class=\"p\">(</span><span class=\"n\">cso_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                            <span class=\"n\">dti_cso</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"n\">cso_csd_r2</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">pearsonr</span><span class=\"p\">(</span><span class=\"n\">cso_vox</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                            <span class=\"n\">csd_cso</span><span class=\"p\">[</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Corpus callosum</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n      <span class=\"s2\">&quot;DTI R2 : </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n      <span class=\"s2\">&quot;CSD R2 : </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n      <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n      <span class=\"s2\">&quot;Centrum Semiovale</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n      <span class=\"s2\">&quot;DTI R2 : </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n      <span class=\"s2\">&quot;CSD R2 : </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cc_dti_r2</span><span class=\"p\">,</span> <span class=\"n\">cc_csd_r2</span><span class=\"p\">,</span> <span class=\"n\">cso_dti_r2</span><span class=\"p\">,</span> <span class=\"n\">cso_csd_r2</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Corpus callosum\nDTI R2 : 0.7828795917128741\nCSD R2 : 0.8051656184264852\n\nCentrum Semiovale\nDTI R2 : 0.43192536287529\nCSD R2 : 0.6038698891074245\n</pre></div>\n</div>\n<p>This should look something like this:</p>\n<p>Corpus callosum</p>\n<p>DTI R2 : 0.782881752597</p>\n<p>CSD R2 : 0.805764364116</p>\n<p>Centrum Semiovale</p>\n<p>DTI R2 : 0.431921832012</p>\n<p>CSD R2 : 0.604806420501</p>\n<p>As you can see, DTI is a pretty good model for describing the signal in the CC,\nwhile CSD is much better in describing the signal in regions of multiple\ncrossing fibers.</p>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"hastie2008\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Hastie2008</a><span class=\"fn-bracket\">]</span></span>\n<p>Hastie, T., Tibshirani, R., Friedman, J. (2008). The Elements\nof Statistical Learning: Data Mining, Inference and\nPrediction. Springer-Verlag, Berlin</p>\n</div>\n<div class=\"citation\" id=\"rokem2014\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Rokem2014</a><span class=\"fn-bracket\">]</span></span>\n<p>Rokem, A., Chan, K.L. Yeatman, J.D., Pestilli, F., Mezer, A.,\nWandell, B.A., 2014. Evaluating the accuracy of diffusion models at multiple\nb-values with cross-validation. ISMRM 2014.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  2.853 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-07-reconstruction-kfold-xval-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/aaccd9d0ac5fd57a054179dbf45a7f93/kfold_xval.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">kfold_xval.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/384e63e873270e2557b07f98432a8eba/kfold_xval.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">kfold_xval.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/07_reconstruction/reconst_qti", "Reconstruct with Q-space Trajectory Imaging (QTI)", "N", "next"], ["examples_built/07_reconstruction/reconst_dki", "Reconstruction of the diffusion signal with the kurtosis tensor model", "P", "previous"]], "sourcename": "examples_built/07_reconstruction/kfold_xval.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">K-fold cross-validation for model comparison</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/07_reconstruction/kfold_xval", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}