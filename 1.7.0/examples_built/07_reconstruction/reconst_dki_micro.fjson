{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Reconstruction"}], "prev": {"link": "../restore_dti/", "title": "Using the RESTORE algorithm for robust tensor fitting"}, "next": {"link": "../reconst_sh/", "title": "Signal Reconstruction Using Spherical Harmonics"}, "title": "Reconstruction of the diffusion signal with the WMTI model", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-07-reconstruction-reconst-dki-micro-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"reconstruction-of-the-diffusion-signal-with-the-wmti-model\">\n<span id=\"sphx-glr-examples-built-07-reconstruction-reconst-dki-micro-py\"></span><h1>Reconstruction of the diffusion signal with the WMTI model<a class=\"headerlink\" href=\"#reconstruction-of-the-diffusion-signal-with-the-wmti-model\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>DKI can also be used to derive concrete biophysical parameters by applying\nmicrostructural models to DT and KT estimated from DKI. For instance,\nFieremans et al. <a class=\"reference internal\" href=\"#fierem2011\" id=\"id1\"><span>[Fierem2011]</span></a> showed that DKI can be used to\nestimate the contribution of hindered and restricted diffusion for well-aligned\nfibers - a model that was later referred to as the white matter tract integrity\nWMTI technique <a class=\"reference internal\" href=\"#fierem2013\" id=\"id2\"><span>[Fierem2013]</span></a>. The two tensors of WMTI can be also\ninterpreted as the influences of intra- and extra-cellular compartments and can\nbe used to estimate the axonal volume fraction and diffusion extra-cellular\ntortuosity. According to previous studies <a class=\"reference internal\" href=\"#fierem2012\" id=\"id3\"><span>[Fierem2012]</span></a> <a class=\"reference internal\" href=\"#fierem2013\" id=\"id4\"><span>[Fierem2013]</span></a>,\nthese latter measures can be used to distinguish processes of axonal loss from\nprocesses of myelin degeneration.</p>\n<p>In this example, we show how to process a dMRI dataset using\nthe WMTI model.</p>\n<p>First, we import all relevant modules:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.dki</span> <span class=\"k\">as</span> <span class=\"nn\">dki</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.dki_micro</span> <span class=\"k\">as</span> <span class=\"nn\">dki_micro</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.ndimage</span> <span class=\"kn\">import</span> <span class=\"n\">gaussian_filter</span>\n</pre></div>\n</div>\n<p>As the standard DKI, WMTI requires multi-shell data, i.e. data acquired from\nmore than one non-zero b-value. Here, we use a fetcher to download a\nmulti-shell dataset which was kindly provided by Hansen and Jespersen\n(more details about the data are provided in their paper <a class=\"reference internal\" href=\"../reconst_msdki/#hansen2016\" id=\"id5\"><span>[Hansen2016]</span></a>).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fraw</span><span class=\"p\">,</span> <span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span><span class=\"p\">,</span> <span class=\"n\">t1_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfin_multib&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">fraw</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For comparison, this dataset is pre-processed using the same steps used in the\nexample for reconstructing DKI (see <span class=\"xref std std-ref\">example_reconst_dki</span>).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># data masking</span>\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                             <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Smoothing</span>\n<span class=\"n\">fwhm</span> <span class=\"o\">=</span> <span class=\"mf\">1.25</span>\n<span class=\"n\">gauss_std</span> <span class=\"o\">=</span> <span class=\"n\">fwhm</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">8</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">data_smooth</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n    <span class=\"n\">data_smooth</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">],</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"n\">gauss_std</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The WMTI model can be defined in DIPY by instantiating the\n\u2018KurtosisMicrostructureModel\u2019 object in the following way:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dki_micro_model</span> <span class=\"o\">=</span> <span class=\"n\">dki_micro</span><span class=\"o\">.</span><span class=\"n\">KurtosisMicrostructureModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Before fitting this microstructural model, it is useful to indicate the\nregions in which this model provides meaningful information (i.e. voxels of\nwell-aligned fibers). Following Fieremans et al. <span id=\"id6\">[Fieremans2011]</span>, a simple way\nto select this region is to generate a well-aligned fiber mask based on the\nvalues of diffusion sphericity, planarity and linearity. Here we will follow\nthese selection criteria for a better comparison of our figures with the\noriginal article published by Fieremans et al. <span id=\"id7\">[Fieremans2011]</span>. Nevertheless,\nit is important to note that voxels with well-aligned fibers can be selected\nbased on other approaches such as using predefined regions of interest.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Diffusion Tensor is computed based on the standard DKI model</span>\n<span class=\"n\">dkimodel</span> <span class=\"o\">=</span> <span class=\"n\">dki</span><span class=\"o\">.</span><span class=\"n\">DiffusionKurtosisModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n<span class=\"n\">dkifit</span> <span class=\"o\">=</span> <span class=\"n\">dkimodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_smooth</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize well aligned mask with ones</span>\n<span class=\"n\">well_aligned_mask</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;bool&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Diffusion coefficient of linearity (cl) has to be larger than 0.4, thus</span>\n<span class=\"c1\"># we exclude voxels with cl &lt; 0.4.</span>\n<span class=\"n\">cl</span> <span class=\"o\">=</span> <span class=\"n\">dkifit</span><span class=\"o\">.</span><span class=\"n\">linearity</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">well_aligned_mask</span><span class=\"p\">[</span><span class=\"n\">cl</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Diffusion coefficient of planarity (cp) has to be lower than 0.2, thus</span>\n<span class=\"c1\"># we exclude voxels with cp &gt; 0.2.</span>\n<span class=\"n\">cp</span> <span class=\"o\">=</span> <span class=\"n\">dkifit</span><span class=\"o\">.</span><span class=\"n\">planarity</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">well_aligned_mask</span><span class=\"p\">[</span><span class=\"n\">cp</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Diffusion coefficient of sphericity (cs) has to be lower than 0.35, thus</span>\n<span class=\"c1\"># we exclude voxels with cs &gt; 0.35.</span>\n<span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"n\">dkifit</span><span class=\"o\">.</span><span class=\"n\">sphericity</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">well_aligned_mask</span><span class=\"p\">[</span><span class=\"n\">cs</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.35</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Removing nan associated with background voxels</span>\n<span class=\"n\">well_aligned_mask</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">cl</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">well_aligned_mask</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">well_aligned_mask</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/Users/skoudoro/devel/dipy/dipy/reconst/dti.py:533: RuntimeWarning: invalid value encountered in divide\n  return (ev1 - ev2) / evals.sum(0)\n/Users/skoudoro/devel/dipy/dipy/reconst/dti.py:569: RuntimeWarning: invalid value encountered in divide\n  return 2 * (ev2 - ev3) / evals.sum(0)\n/Users/skoudoro/devel/dipy/dipy/reconst/dti.py:604: RuntimeWarning: invalid value encountered in divide\n  return (3 * ev3) / evals.sum(0)\n</pre></div>\n</div>\n<p>Analogous to DKI, the data fit can be done by calling the <code class=\"docutils literal notranslate\"><span class=\"pre\">fit</span></code> function of\nthe model\u2019s object as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dki_micro_fit</span> <span class=\"o\">=</span> <span class=\"n\">dki_micro_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_smooth</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">well_aligned_mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The KurtosisMicrostructureFit object created by this <code class=\"docutils literal notranslate\"><span class=\"pre\">fit</span></code> function can then\nbe used to extract model parameters such as the axonal water fraction and\ndiffusion hindered tortuosity:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">AWF</span> <span class=\"o\">=</span> <span class=\"n\">dki_micro_fit</span><span class=\"o\">.</span><span class=\"n\">awf</span>\n<span class=\"n\">TORT</span> <span class=\"o\">=</span> <span class=\"n\">dki_micro_fit</span><span class=\"o\">.</span><span class=\"n\">tortuosity</span>\n</pre></div>\n</div>\n<p>These parameters are plotted below on top of the mean kurtosis maps:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">MK</span> <span class=\"o\">=</span> <span class=\"n\">dkifit</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">axial_slice</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n\n<span class=\"n\">fig1</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n                        <span class=\"n\">subplot_kw</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;xticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;yticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[]})</span>\n\n<span class=\"n\">AWF</span><span class=\"p\">[</span><span class=\"n\">AWF</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">TORT</span><span class=\"p\">[</span><span class=\"n\">TORT</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">MK</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">axial_slice</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">,</span>\n             <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">im0</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">AWF</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">axial_slice</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">Reds</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                   <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im0</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">MK</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">axial_slice</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">,</span>\n             <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">im1</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">TORT</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">axial_slice</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">Blues</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                   <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im1</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;Kurtosis_Microstructural_measures.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_reconst_dki_micro_001.png\" srcset=\"../../_images/sphx_glr_reconst_dki_micro_001.png\" alt=\"reconst dki micro\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id8\">\n<img alt=\"examples_built/07_reconstruction/Kurtosis_Microstructural_measures.png\" src=\"examples_built/07_reconstruction/Kurtosis_Microstructural_measures.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Axonal water fraction (left panel) and tortuosity (right panel) values\nof well-aligned fiber regions overlaid on a top of a mean kurtosis all-brain\nimage.</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"fierem2011\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Fierem2011</a><span class=\"fn-bracket\">]</span></span>\n<p>Fieremans E, Jensen JH, Helpern JA (2011). White matter\ncharacterization with diffusion kurtosis imaging. NeuroImage\n58: 177-188</p>\n</div>\n<div class=\"citation\" id=\"fierem2012\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id3\">Fierem2012</a><span class=\"fn-bracket\">]</span></span>\n<p>Fieremans E, Jensen JH, Helpern JA, Kim S, Grossman RI,\nInglese M, Novikov DS. (2012). Diffusion distinguishes between\naxonal loss and demyelination in brain white matter.\nProceedings of the 20th Annual Meeting of the International\nSociety for Magnetic Resonance Medicine; Melbourne, Australia.\nMay 5-11.</p>\n</div>\n<div class=\"citation\" id=\"fierem2013\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Fierem2013<span class=\"fn-bracket\">]</span></span>\n<span class=\"backrefs\">(<a role=\"doc-backlink\" href=\"#id2\">1</a>,<a role=\"doc-backlink\" href=\"#id4\">2</a>)</span>\n<p>Fieremans, E., Benitez, A., Jensen, J.H., Falangola, M.F.,\nTabesh, A., Deardorff, R.L., Spampinato, M.V., Babb, J.S.,\nNovikov, D.S., Ferris, S.H., Helpern, J.A., 2013. Novel\nwhite matter tract integrity metrics sensitive to Alzheimer\ndisease progression. AJNR Am. J. Neuroradiol. 34(11),\n2105-2112. doi: 10.3174/ajnr.A3553</p>\n</div>\n<div class=\"citation\" id=\"hansen2016\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id5\">Hansen2016</a><span class=\"fn-bracket\">]</span></span>\n<p>Hansen, B, Jespersen, SN (2016). Data for evaluation of fast\nkurtosis strategies, b-value optimization and exploration of\ndiffusion MRI contrast. Scientific Data 3: 160072\ndoi:10.1038/sdata.2016.72</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 3 minutes  27.683 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-07-reconstruction-reconst-dki-micro-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/2d5e7a6504da4d491f8b5e1d997c5c79/reconst_dki_micro.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_dki_micro.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/2495c1fac64bb732bc18903dda380d9d/reconst_dki_micro.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_dki_micro.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/07_reconstruction/reconst_sh", "Signal Reconstruction Using Spherical Harmonics", "N", "next"], ["examples_built/07_reconstruction/restore_dti", "Using the RESTORE algorithm for robust tensor fitting", "P", "previous"]], "sourcename": "examples_built/07_reconstruction/reconst_dki_micro.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruction of the diffusion signal with the WMTI model</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/07_reconstruction/reconst_dki_micro", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}