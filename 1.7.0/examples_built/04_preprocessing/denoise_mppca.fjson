{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Preprocessing"}], "prev": {"link": "../snr_in_cc/", "title": "SNR estimation for Diffusion-Weighted Images"}, "next": {"link": "../denoise_gibbs/", "title": "Suppress Gibbs oscillations"}, "title": "Denoise images using the Marcenko-Pastur PCA algorithm", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-04-preprocessing-denoise-mppca-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"denoise-images-using-the-marcenko-pastur-pca-algorithm\">\n<span id=\"sphx-glr-examples-built-04-preprocessing-denoise-mppca-py\"></span><h1>Denoise images using the Marcenko-Pastur PCA algorithm<a class=\"headerlink\" href=\"#denoise-images-using-the-marcenko-pastur-pca-algorithm\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>The PCA-based denoising algorithm exploits the redundancy across the\ndiffusion-weighted images <a class=\"reference internal\" href=\"../denoise_patch2self/#manjon2013\" id=\"id1\"><span>[Manjon2013]</span></a>, <span id=\"id2\">[Veraart2016a]</span>. This algorithm has\nbeen shown to provide an optimal compromise between noise suppression and loss\nof anatomical information for different techniques such as DTI <a class=\"reference internal\" href=\"../denoise_patch2self/#manjon2013\" id=\"id3\"><span>[Manjon2013]</span></a>,\nspherical deconvolution [Veraart2016a] and DKI <a class=\"reference internal\" href=\"#henri2018\" id=\"id4\"><span>[Henri2018]</span></a>.</p>\n<p>The basic idea behind the PCA-based denoising algorithms is to remove the\ncomponents of the data that are classified as noise. The Principal Components\nclassification can be performed based on prior noise variance estimates\n<a class=\"reference internal\" href=\"../denoise_patch2self/#manjon2013\" id=\"id5\"><span>[Manjon2013]</span></a> (see <span class=\"xref std std-ref\">denoise_localpca</span>) or automatically based on the\nMarcenko-Pastur distribution <a class=\"reference internal\" href=\"../denoise_patch2self/#veraa2016a\" id=\"id6\"><span>[Veraa2016a]</span></a>. In addition to noise\nsuppression, the PCA algorithm can be used to get the standard deviation of\nthe noise <a class=\"reference internal\" href=\"#veraa2016b\" id=\"id7\"><span>[Veraa2016b]</span></a>.</p>\n<p>In the following example, we show how to denoise diffusion MRI images and\nestimate the noise standard deviation using the PCA algorithm based\non the Marcenko-Pastur distribution [Veraa2016a]</p>\n<p>Let\u2019s load the necessary modules</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># load general modules</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"c1\"># load main pca function using Marcenko-Pastur distribution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.localpca</span> <span class=\"kn\">import</span> <span class=\"n\">mppca</span>\n\n<span class=\"c1\"># load functions to fetch data for this example</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n\n<span class=\"c1\"># load other dipy&#39;s functions that will be used for auxiliary analysis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.dki</span> <span class=\"k\">as</span> <span class=\"nn\">dki</span>\n</pre></div>\n</div>\n<p>For this example, we use fetch to download a multi-shell dataset which was\nkindly provided by Hansen and Jespersen (more details about the data are\nprovided in their paper <a class=\"reference internal\" href=\"../../07_reconstruction/reconst_msdki/#hansen2016\" id=\"id8\"><span>[Hansen2016]</span></a>). The total size of the downloaded data\nis 192 MBytes, however you only need to fetch it once.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dwi_fname</span><span class=\"p\">,</span> <span class=\"n\">dwi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">dwi_bvec_fname</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfin_multib&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">dwi_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">dwi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">dwi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For the sake of simplicity, we only select two non-zero b-values for this\nexample.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvals</span>\n\n<span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span>\n\n<span class=\"n\">sel_b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">bvals</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bvals</span> <span class=\"o\">==</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">bvals</span> <span class=\"o\">==</span> <span class=\"mi\">2000</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">sel_b</span><span class=\"p\">]</span>\n\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"n\">sel_b</span><span class=\"p\">],</span> <span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">sel_b</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>(96, 96, 19, 67)\n</pre></div>\n</div>\n<p>As one can see from its shape, the selected data contains a total of 67\nvolumes of images corresponding to all the diffusion gradient directions\nof the selected b-values.</p>\n<p>The PCA denoising using the Marcenko-Pastur distribution can be performed by\ncalling the function <code class=\"docutils literal notranslate\"><span class=\"pre\">mppca</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">denoised_arr</span> <span class=\"o\">=</span> <span class=\"n\">mppca</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">patch_radius</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Time taken for local MP-PCA &quot;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">time</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Time taken for local MP-PCA  637.1518270969391\n</pre></div>\n</div>\n<p>Internally, the <code class=\"docutils literal notranslate\"><span class=\"pre\">mppca</span></code> algorithm denoises the diffusion-weighted data\nusing a 3D sliding window which is defined by the variable patch_radius.\nIn total, this window should comprise a larger number of voxels than the number\nof diffusion-weighted volumes. Since our data has a total of 67 volumes, the\npatch_radius is set to 2 which corresponds to a 5x5x5 sliding window\ncomprising a total of 125 voxels.</p>\n<p>To assess the performance of the Marcenko-Pastur PCA denoising algorithm,\nan axial slice of the original data, denoised data, and residuals are plotted\nbelow:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sli</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n<span class=\"n\">gra</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"n\">orig</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">,</span> <span class=\"n\">gra</span><span class=\"p\">]</span>\n<span class=\"n\">den</span> <span class=\"o\">=</span> <span class=\"n\">denoised_arr</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">,</span> <span class=\"n\">gra</span><span class=\"p\">]</span>\n<span class=\"n\">rms_diff</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">orig</span> <span class=\"o\">-</span> <span class=\"n\">den</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig1</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n                        <span class=\"n\">subplot_kw</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;xticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;yticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[]})</span>\n\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">subplots_adjust</span><span class=\"p\">(</span><span class=\"n\">hspace</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Original&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">den</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Denoised Output&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">rms_diff</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Residuals&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;denoised_mppca.png&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The result saved in denoised_mppca.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_denoise_mppca_001.png\" srcset=\"../../_images/sphx_glr_denoise_mppca_001.png\" alt=\"denoise mppca\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>The result saved in denoised_mppca.png\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/04_preprocessing/denoised_mppca.png\" src=\"examples_built/04_preprocessing/denoised_mppca.png\" />\n</figure>\n<p>The noise suppression can be visually appreciated by comparing the original\ndata slice (left panel) to its denoised version (middle panel). The difference\nbetween original and denoised data showing only random noise indicates that\nthe data\u2019s structural information is preserved by the PCA denoising algorithm\n(right panel).</p>\n<p>Below we show how the denoised data can be saved.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">denoised_arr</span><span class=\"p\">,</span>\n                         <span class=\"n\">affine</span><span class=\"p\">),</span> <span class=\"s1\">&#39;denoised_mppca.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Entire denoised data saved in denoised_mppca.nii.gz&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Entire denoised data saved in denoised_mppca.nii.gz\n</pre></div>\n</div>\n<p>Additionally, we show how the PCA denoising algorithm affects different\ndiffusion measurements. For this, we run the diffusion kurtosis model\nbelow on both original and denoised versions of the data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dkimodel</span> <span class=\"o\">=</span> <span class=\"n\">dki</span><span class=\"o\">.</span><span class=\"n\">DiffusionKurtosisModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                             <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">dki_orig</span> <span class=\"o\">=</span> <span class=\"n\">dkimodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">dki_den</span> <span class=\"o\">=</span> <span class=\"n\">dkimodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">denoised_arr</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We use the following code to plot the MD, FA and MK estimates from the two data\nfits:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">FA_orig</span> <span class=\"o\">=</span> <span class=\"n\">dki_orig</span><span class=\"o\">.</span><span class=\"n\">fa</span>\n<span class=\"n\">FA_den</span> <span class=\"o\">=</span> <span class=\"n\">dki_den</span><span class=\"o\">.</span><span class=\"n\">fa</span>\n<span class=\"n\">MD_orig</span> <span class=\"o\">=</span> <span class=\"n\">dki_orig</span><span class=\"o\">.</span><span class=\"n\">md</span>\n<span class=\"n\">MD_den</span> <span class=\"o\">=</span> <span class=\"n\">dki_den</span><span class=\"o\">.</span><span class=\"n\">md</span>\n<span class=\"n\">MK_orig</span> <span class=\"o\">=</span> <span class=\"n\">dki_orig</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">MK_den</span> <span class=\"o\">=</span> <span class=\"n\">dki_den</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">fig2</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n                        <span class=\"n\">subplot_kw</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;xticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;yticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[]})</span>\n\n<span class=\"n\">fig2</span><span class=\"o\">.</span><span class=\"n\">subplots_adjust</span><span class=\"p\">(</span><span class=\"n\">hspace</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=</span><span class=\"mf\">0.03</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">MD_orig</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">2.0e-3</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;MD (DKI)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">FA_orig</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;FA (DKI)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">MK_orig</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;AD (DKI)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">MD_den</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">2.0e-3</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;MD (DKI)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">FA_den</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;FA (DKI)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">MK_den</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;AD (DKI)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"n\">fig2</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;denoised_dki.png&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The result saved in denoised_dki.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_denoise_mppca_002.png\" srcset=\"../../_images/sphx_glr_denoise_mppca_002.png\" alt=\"denoise mppca\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>The result saved in denoised_dki.png\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/04_preprocessing/denoised_dki.png\" src=\"examples_built/04_preprocessing/denoised_dki.png\" />\n</figure>\n<p>In the above figure, the DKI maps obtained from the original data are shown in\nthe upper panels, while the DKI maps from the denoised data are shown in the\nlower panels. Substantial improvements in measurement robustness can be\nvisually appreciated, particularly for the FA and MK estimates.</p>\n<section id=\"noise-standard-deviation-estimation-using-the-marcenko-pastur-pca-algorithm\">\n<h2>Noise standard deviation estimation using the Marcenko-Pastur PCA algorithm<a class=\"headerlink\" href=\"#noise-standard-deviation-estimation-using-the-marcenko-pastur-pca-algorithm\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>As mentioned above, the Marcenko-Pastur PCA algorithm can also be used to\nestimate the image\u2019s noise standard deviation (std). The noise std\nautomatically computed from the <code class=\"docutils literal notranslate\"><span class=\"pre\">mppca</span></code> function can be returned by\nsetting the optional input parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">return_sigma</span></code> to True.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">denoised_arr</span><span class=\"p\">,</span> <span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"n\">mppca</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">patch_radius</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">return_sigma</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s plot the noise standard deviation estimate:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fig3</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"s1\">&#39;PCA Noise standard deviation estimation&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">sigma</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"n\">fig3</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;pca_sigma.png&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The result saved in pca_sigma.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_denoise_mppca_003.png\" srcset=\"../../_images/sphx_glr_denoise_mppca_003.png\" alt=\"denoise mppca\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>The result saved in pca_sigma.png\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/04_preprocessing/pca_sigma.png\" src=\"examples_built/04_preprocessing/pca_sigma.png\" />\n</figure>\n<p>The above figure shows that the Marcenko-Pastur PCA algorithm computes a 3D\nspatial varying noise level map. To obtain the mean noise std across all\nvoxels, you can use the following lines of code:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean_sigma</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sigma</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mean_sigma</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>4.6833844\n</pre></div>\n</div>\n<p>Below we use this mean noise level estimate to compute the nominal SNR of the data\n(i.e. SNR at b-value=0):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b0</span> <span class=\"o\">=</span> <span class=\"n\">denoised_arr</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">mean_signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">b0</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">])</span>\n\n<span class=\"n\">snr</span> <span class=\"o\">=</span> <span class=\"n\">mean_signal</span> <span class=\"o\">/</span> <span class=\"n\">mean_sigma</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">snr</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>34.56180377412377\n</pre></div>\n</div>\n<section id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"manjon2013\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Manjon2013<span class=\"fn-bracket\">]</span></span>\n<span class=\"backrefs\">(<a role=\"doc-backlink\" href=\"#id1\">1</a>,<a role=\"doc-backlink\" href=\"#id3\">2</a>,<a role=\"doc-backlink\" href=\"#id5\">3</a>)</span>\n<p>Manjon JV, Coupe P, Concha L, Buades A, Collins DL \u201cDiffusion\nWeighted Image Denoising Using Overcomplete Local PCA\u201d (2013).\nPLoS ONE 8(9): e73021. doi:10.1371/journal.pone.0073021.</p>\n</div>\n<div class=\"citation\" id=\"veraa2016a\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id6\">Veraa2016a</a><span class=\"fn-bracket\">]</span></span>\n<p>Veraart J, Fieremans E, Novikov DS. 2016. Diffusion MRI noise\nmapping using random matrix theory. Magnetic Resonance in\nMedicine. doi: 10.1002/mrm.26059.</p>\n</div>\n<div class=\"citation\" id=\"henri2018\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id4\">Henri2018</a><span class=\"fn-bracket\">]</span></span>\n<p>Henriques, R., 2018. Advanced Methods for Diffusion MRI Data\nAnalysis and their Application to the Healthy Ageing Brain\n(Doctoral thesis). <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</div>\n<div class=\"citation\" id=\"veraa2016b\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id7\">Veraa2016b</a><span class=\"fn-bracket\">]</span></span>\n<p>Veraart J, Novikov DS, Christiaens D, Ades-aron B, Sijbers,\nFieremans E, 2016. Denoising of Diffusion MRI using random\nmatrix theory. Neuroimage 142:394-406.\ndoi: 10.1016/j.neuroimage.2016.08.016</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 21 minutes  54.002 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-04-preprocessing-denoise-mppca-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/406318b076577f13e4df698e66313cf6/denoise_mppca.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">denoise_mppca.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/5fd3f41b547c10b571d09478d488e98f/denoise_mppca.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">denoise_mppca.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/04_preprocessing/denoise_gibbs", "Suppress Gibbs oscillations", "N", "next"], ["examples_built/04_preprocessing/snr_in_cc", "SNR estimation for Diffusion-Weighted Images", "P", "previous"]], "sourcename": "examples_built/04_preprocessing/denoise_mppca.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Denoise images using the Marcenko-Pastur PCA algorithm</a><ul>\n<li><a class=\"reference internal\" href=\"#noise-standard-deviation-estimation-using-the-marcenko-pastur-pca-algorithm\">Noise standard deviation estimation using the Marcenko-Pastur PCA algorithm</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/04_preprocessing/denoise_mppca", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}