{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Preprocessing"}], "prev": {"link": "../brain_extraction_dwi/", "title": "Brain segmentation with median_otsu"}, "next": {"link": "../denoise_localpca/", "title": "Denoise images using Local PCA via empirical thresholds"}, "title": "Patch2Self: Self-Supervised Denoising via Statistical Independence", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-04-preprocessing-denoise-patch2self-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"patch2self-self-supervised-denoising-via-statistical-independence\">\n<span id=\"sphx-glr-examples-built-04-preprocessing-denoise-patch2self-py\"></span><h1>Patch2Self: Self-Supervised Denoising via Statistical Independence<a class=\"headerlink\" href=\"#patch2self-self-supervised-denoising-via-statistical-independence\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Patch2Self <a class=\"reference internal\" href=\"#fadnavis20\" id=\"id1\"><span>[Fadnavis20]</span></a> is  a self-supervised learning method for denoising\nDWI data, which uses the entire volume to learn a full-rank locally linear\ndenoiser for that volume. By taking advantage of the oversampled q-space of DWI\ndata, Patch2Self can separate structure from noise without requiring an\nexplicit model for either.</p>\n<p>Classical denoising algorithms such as Local PCA <a class=\"reference internal\" href=\"#manjon2013\" id=\"id2\"><span>[Manjon2013]</span></a>, <a class=\"reference internal\" href=\"#veraa2016a\" id=\"id3\"><span>[Veraa2016a]</span></a>,\nNon-local Means <a class=\"reference internal\" href=\"#coupe08\" id=\"id4\"><span>[Coupe08]</span></a>, Total Variation Norm <a class=\"reference internal\" href=\"#knoll11\" id=\"id5\"><span>[Knoll11]</span></a>, etc. assume\ncertain properties on the signal structure. Patch2Self <em>does not</em> make any such\nassumption on the signal, instead using the fact that the noise across\ndifferent 3D volumes of the DWI signal originates from random fluctuations in\nthe acquired signal.</p>\n<p>Since Patch2Self only relies on the randomness of the noise, it can be applied\nat any step in the pre-processing pipeline. The design of Patch2Self is such\nthat it can work on any type of diffusion data/ any body part without\nrequiring a noise estimation or assumptions on the type of noise (such as its\ndistribution).</p>\n<p>The Patch2Self Framework:</p>\n<figure class=\"align-center\" id=\"patch2self\">\n<a class=\"reference internal image-reference\" href=\"https://github.com/dipy/dipy_data/blob/master/Patch2Self_Framework.PNG?raw=true\"><img alt=\"https://github.com/dipy/dipy_data/blob/master/Patch2Self_Framework.PNG?raw=true\" src=\"https://github.com/dipy/dipy_data/blob/master/Patch2Self_Framework.PNG?raw=true\" /></a>\n</figure>\n<p>The above figure demonstrates the working of Patch2Self. The idea is to build\na new regressor for denoising each 3D volume of the 4D diffusion data. This is\ndone in the following 2 phases:</p>\n<p>(A) Self-supervised training: First, we extract 3D Patches from all the \u2018n\u2019\nvolumes and hold out the target volume to denoise. Each patch from the rest of\nthe \u2018(n-1)\u2019 volumes predicts the center voxel of the corresponding patch in the\ntarget volume.</p>\n<p>This is done by using the self-supervised loss:\n<span class=\"math notranslate nohighlight\">\\(\\mathcal{L}\\left(\\Phi_{J}\night)=\\mathbb{E}\\left\\|\\Phi_{J}\\left(Y_{*, *,-j}\night)-Y_{*, 0, j}\night\\|^{2}\\)</span></p>\n<p>(B) Prediction: The same \u2018n-1\u2019 volumes which were used in the training are now\nfed into the regressor <span class=\"math notranslate nohighlight\">\\(\\Phi\\)</span> built in phase (A). The prediction is a\ndenoised version of held-out volume.</p>\n<p>Note: The volume to be denoised is merely used as the target in the training\nphase. But is not used in the training set for (A) nor is used to predict the\ndenoised output in (B).</p>\n<p>Let\u2019s load the necessary modules:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">save_nifti</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.patch2self</span> <span class=\"kn\">import</span> <span class=\"n\">patch2self</span>\n</pre></div>\n</div>\n<p>Now let\u2019s load an example dataset and denoise it with Patch2Self. Patch2Self\ndoes not require noise estimation and should work with any kind of diffusion\ndata.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">)</span>\n<span class=\"n\">denoised_arr</span> <span class=\"o\">=</span> <span class=\"n\">patch2self</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">&#39;ols&#39;</span><span class=\"p\">,</span> <span class=\"n\">shift_intensity</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                          <span class=\"n\">clip_negative_vals</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">b0_threshold</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The above parameters should give optimal denoising performance for Patch2Self.\nThe ordinary least squares regression (model=\u2019ols\u2019) tends to be a little slower\ndepending on the size of the data. In that case, please consider switching to\nridge regression (model=\u2019ridge\u2019).</p>\n<p>Please do note that sometimes using ridge regression can hamper the\nperformance of Patch2Self. If so, please use model=\u2019ols\u2019.</p>\n<p>The array <cite>denoised_arr</cite> contains the denoised output obtained from Patch2Self.</p>\n<p><em>Note:</em> Depending on the acquisition, b0 may exhibit signal attenuation or\nother artefacts that are not ideal for any denoising algorithm. We therefore\nprovide an option to skip denoising b0 volumes in the data. This can be done\nby using the option <cite>b0_denoising=False</cite> within Patch2Self.</p>\n<p>Please set <cite>shift_intensity=True</cite> and <cite>clip_negative_vals=False</cite> by default to\navoid negative values in the denoised output.</p>\n<p>The <cite>b0_threshold</cite> is used to separate the b0 volumes from the DWI volumes.\nChanging the value of the b0 threshold is needed if the b0 volumes in the\n<cite>bval</cite> file have a value greater than the default <cite>b0_threshold</cite>.</p>\n<p>The default value of <cite>b0_threshold</cite> in DIPY is set to 50. If using data\nsuch as HCP 7T, the b0 volumes tend to have a higher b-value (&gt;=50)\nassociated with them in the <cite>bval</cite> file. Please check the b-values for b0s and\nadjust the <cite>b0_threshold</cite> accordingly.</p>\n<p>Now let\u2019s visualize the output and the residuals obtained from the denoising.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Gets the center slice and the middle volume of the 4D diffusion data.</span>\n<span class=\"n\">sli</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n<span class=\"n\">gra</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>  <span class=\"c1\"># pick out a random volume for a particular gradient direction</span>\n\n<span class=\"n\">orig</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">,</span> <span class=\"n\">gra</span><span class=\"p\">]</span>\n<span class=\"n\">den</span> <span class=\"o\">=</span> <span class=\"n\">denoised_arr</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">,</span> <span class=\"n\">gra</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># computes the residuals</span>\n<span class=\"n\">rms_diff</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">orig</span> <span class=\"o\">-</span> <span class=\"n\">den</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig1</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n                        <span class=\"n\">subplot_kw</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;xticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;yticks&#39;</span><span class=\"p\">:</span> <span class=\"p\">[]})</span>\n\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">subplots_adjust</span><span class=\"p\">(</span><span class=\"n\">hspace</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Original&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">den</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Denoised Output&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">rms_diff</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">flat</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Residuals&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig1</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;denoised_patch2self.png&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The result saved in denoised_patch2self.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_denoise_patch2self_001.png\" srcset=\"../../_images/sphx_glr_denoise_patch2self_001.png\" alt=\"denoise patch2self\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>The result saved in denoised_patch2self.png\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/04_preprocessing/denoised_patch2self.png\" src=\"examples_built/04_preprocessing/denoised_patch2self.png\" />\n</figure>\n<p>Patch2Self preserved anatomical detail. This can be visually verified by\ninspecting the residuals obtained above. Since we do not see any structure in\nthe difference residuals, it is clear that it preserved the underlying signal\nstructure and got rid of the stochastic noise.</p>\n<p>Below we show how the denoised data can be saved.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;denoised_patch2self.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">denoised_arr</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Entire denoised data saved in denoised_patch2self.nii.gz&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Entire denoised data saved in denoised_patch2self.nii.gz\n</pre></div>\n</div>\n<p>Lastly, one can also use Patch2Self in batches if the number of gradient\ndirections is very high (&gt;=200 volumes). For instance, if the data has 300\nvolumes, one can split the data into 2 batches, (150 directions each) and still\nget the same denoising performance. One can simply run Patch2Self using:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">denoised_batch1</span> <span class=\"o\">=</span> <span class=\"n\">patch2self</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"p\">:</span><span class=\"mi\">150</span><span class=\"p\">],</span> <span class=\"n\">bvals</span><span class=\"p\">[:</span><span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"n\">denoised_batch2</span> <span class=\"o\">=</span> <span class=\"n\">patch2self</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">:],</span> <span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">:])</span>\n</pre></div>\n</div>\n<p>After doing this, the 2 denoised batches can be merged as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">denoised_p2s</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">denoised_batch1</span><span class=\"p\">,</span> <span class=\"n\">denoised_batch2</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>One can also consider using the above batching approach to denoise each\nshell separately if working with multi-shell data.</p>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"fadnavis20\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Fadnavis20</a><span class=\"fn-bracket\">]</span></span>\n<p>S. Fadnavis, J. Batson, E. Garyfallidis, Patch2Self:\nDenoising Diffusion MRI with Self-supervised Learning,\nAdvances in Neural Information Processing Systems 33 (2020)</p>\n</div>\n<div class=\"citation\" id=\"manjon2013\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Manjon2013</a><span class=\"fn-bracket\">]</span></span>\n<p>Manjon JV, Coupe P, Concha L, Buades A, Collins DL \u201cDiffusion\nWeighted Image Denoising Using Overcomplete Local PCA\u201d (2013).\nPLoS ONE 8(9): e73021. doi:10.1371/journal.pone.0073021.</p>\n</div>\n<div class=\"citation\" id=\"veraa2016a\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id3\">Veraa2016a</a><span class=\"fn-bracket\">]</span></span>\n<p>Veraart J, Fieremans E, Novikov DS. 2016. Diffusion MRI noise\nmapping using random matrix theory. Magnetic Resonance in\nMedicine. doi: 10.1002/mrm.26059.</p>\n</div>\n<div class=\"citation\" id=\"coupe08\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id4\">Coupe08</a><span class=\"fn-bracket\">]</span></span>\n<p>P. Coupe, P. Yger, S. Prima, P. Hellier, C. Kervrann, C.\nBarillot, An Optimized Blockwise Non Local Means Denoising\nFilter for 3D Magnetic Resonance Images, IEEE Transactions on\nMedical Imaging, 27(4):425-441, 2008</p>\n</div>\n<div class=\"citation\" id=\"knoll11\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id5\">Knoll11</a><span class=\"fn-bracket\">]</span></span>\n<p>F. Knoll, K. Bredies, T. Pock, R. Stollberger, Second order total\ngeneralized variation (TGV) for MRI. Magnetic resonance in\nmedicine, 65(2), pp.480-491.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 34 minutes  58.050 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-04-preprocessing-denoise-patch2self-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/ac37bf5cc11b9b0832ba03906cbf4945/denoise_patch2self.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">denoise_patch2self.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/964ae7ab123077c47725d0c3d03d62a6/denoise_patch2self.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">denoise_patch2self.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/04_preprocessing/denoise_localpca", "Denoise images using Local PCA via empirical thresholds", "N", "next"], ["examples_built/04_preprocessing/brain_extraction_dwi", "Brain segmentation with median_otsu", "P", "previous"]], "sourcename": "examples_built/04_preprocessing/denoise_patch2self.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Patch2Self: Self-Supervised Denoising via Statistical Independence</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/04_preprocessing/denoise_patch2self", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}