{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Preprocessing"}], "prev": {"link": "../denoise_ascm/", "title": "Denoise images using Adaptive Soft Coefficient Matching (ASCM)"}, "next": {"link": "../denoise_mppca/", "title": "Denoise images using the Marcenko-Pastur PCA algorithm"}, "title": "SNR estimation for Diffusion-Weighted Images", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-04-preprocessing-snr-in-cc-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"snr-estimation-for-diffusion-weighted-images\">\n<span id=\"sphx-glr-examples-built-04-preprocessing-snr-in-cc-py\"></span><h1>SNR estimation for Diffusion-Weighted Images<a class=\"headerlink\" href=\"#snr-estimation-for-diffusion-weighted-images\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Computing the Signal-to-Noise-Ratio (SNR) of DW images is still an open\nquestion, as SNR depends on the white matter structure of interest as well as\nthe gradient direction corresponding to each DWI.</p>\n<p>In classical MRI, SNR can be defined as the ratio of the mean of the signal\ndivided by the standard deviation of the underlying Gaussian noise, that is\n<span class=\"math notranslate nohighlight\">\\(SNR = mean(signal) / std(noise)\\)</span>. The noise standard deviation can be computed\nfrom the background in any of the DW images. How do we compute the mean of the\nsignal, and what signal?</p>\n<p>The strategy here is to compute a \u2018worst-case\u2019 SNR for DWI. Several white\nmatter structures such as the corpus callosum (CC), corticospinal tract (CST),\nor the superior longitudinal fasciculus (SLF) can be easily identified from the\ncolored-FA (CFA) map. In this example, we will use voxels from the CC, which\nhave the characteristic of being highly red in the CFA map since they are\nmainly oriented in the left-right direction. We know that the DW image closest\nto the X-direction will be the one with the most attenuated diffusion signal.\nThis is the strategy adopted in several recent papers (see <a class=\"reference internal\" href=\"../../07_reconstruction/reconst_shore_metrics/#descoteaux2011\" id=\"id1\"><span>[Descoteaux2011]</span></a>\nand <a class=\"reference internal\" href=\"#jones2013\" id=\"id2\"><span>[Jones2013]</span></a>). It gives a good indication of the quality of the DWI data.</p>\n<p>First, we compute the tensor model in a brain mask (see the <a class=\"reference internal\" href=\"../../07_reconstruction/reconst_dti/#reconst-dti\"><span class=\"std std-ref\">Reconstruction of the diffusion signal with the Tensor model</span></a>\nexample for further explanations).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">save_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"kn\">import</span> <span class=\"n\">TensorModel</span>\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing brain mask...&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing tensors...&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">tenmodel</span> <span class=\"o\">=</span> <span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n<span class=\"n\">tensorfit</span> <span class=\"o\">=</span> <span class=\"n\">tenmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Computing brain mask...\nComputing tensors...\n</pre></div>\n</div>\n<p>Next, we set our red-green-blue thresholds to (0.6, 1) in the x axis and\n(0, 0.1) in the y and z axes respectively. These values work well in practice\nto isolate the very RED voxels of the cfa map.</p>\n<p>Then, as assurance, we want just RED voxels in the CC (there could be noisy\nred voxels around the brain mask and we don\u2019t want those). Unless the brain\nacquisition was badly aligned, the CC is always close to the mid-sagittal\nslice.</p>\n<p>The following lines perform these two operations and then saves the\ncomputed mask.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Computing worst-case/best-case SNR using the corpus callosum...&#39;</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">segment_from_cfa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">bounding_box</span>\n\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">CC_box</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">bounding_box</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">)</span>\n<span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">maxs</span><span class=\"p\">)</span>\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxs</span> <span class=\"o\">-</span> <span class=\"n\">mins</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">4</span>\n<span class=\"n\">bounds_min</span> <span class=\"o\">=</span> <span class=\"n\">mins</span> <span class=\"o\">+</span> <span class=\"n\">diff</span>\n<span class=\"n\">bounds_max</span> <span class=\"o\">=</span> <span class=\"n\">maxs</span> <span class=\"o\">-</span> <span class=\"n\">diff</span>\n\n<span class=\"n\">CC_box</span><span class=\"p\">[</span><span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n       <span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n       <span class=\"n\">bounds_min</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span><span class=\"n\">bounds_max</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">mask_cc_part</span><span class=\"p\">,</span> <span class=\"n\">cfa</span> <span class=\"o\">=</span> <span class=\"n\">segment_from_cfa</span><span class=\"p\">(</span><span class=\"n\">tensorfit</span><span class=\"p\">,</span> <span class=\"n\">CC_box</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">,</span>\n                                     <span class=\"n\">return_cfa</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfa_CC_part.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">cfa</span><span class=\"o\">*</span><span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;mask_CC_part.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">mask_cc_part</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"s1\">&#39;Corpus callosum segmentation&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;Corpus callosum (CC)&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">cfa</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">[</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;CC mask used for SNR computation&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;off&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">mask_cc_part</span><span class=\"p\">[</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]))</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;CC_segmentation.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_snr_in_cc_001.png\" srcset=\"../../_images/sphx_glr_snr_in_cc_001.png\" alt=\"snr in cc\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Computing worst-case/best-case SNR using the corpus callosum...\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/04_preprocessing/CC_segmentation.png\" src=\"examples_built/04_preprocessing/CC_segmentation.png\" />\n</figure>\n<p>x-direction, we can use all the voxels to estimate the mean signal in this\nregion.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean_signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask_cc_part</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>computed before and invert it to catch the outside of the brain. This could\nalso be determined manually with a ROI in the background.\n[Warning: Certain MR manufacturers mask out the outside of the brain with 0\u2019s.\nOne thus has to be careful how the noise ROI is defined].</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">scipy.ndimage</span> <span class=\"kn\">import</span> <span class=\"n\">binary_dilation</span>\n<span class=\"n\">mask_noise</span> <span class=\"o\">=</span> <span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">mask_noise</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"p\">:</span><span class=\"n\">mask_noise</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">mask_noise</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">mask_noise</span>\n\n<span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;mask_noise.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">mask_noise</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n\n<span class=\"n\">noise_std</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask_noise</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Noise standard deviation sigma= &#39;</span><span class=\"p\">,</span> <span class=\"n\">noise_std</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Noise standard deviation sigma=  8.17113266785504\n</pre></div>\n</div>\n<p>for DW images with gradient direction that lies the closest to\nthe X, Y and Z axes.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Exclude null bvecs from the search</span>\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span>\n<span class=\"n\">axis_X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">axis_Y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">axis_Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">direction</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">axis_X</span><span class=\"p\">,</span> <span class=\"n\">axis_Y</span><span class=\"p\">,</span> <span class=\"n\">axis_Z</span><span class=\"p\">]:</span>\n    <span class=\"n\">SNR</span> <span class=\"o\">=</span> <span class=\"n\">mean_signal</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">noise_std</span>\n    <span class=\"k\">if</span> <span class=\"n\">direction</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SNR for the b=0 image is :&quot;</span><span class=\"p\">,</span> <span class=\"n\">SNR</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SNR for direction&quot;</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"p\">,</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">],</span> <span class=\"s2\">&quot;is :&quot;</span><span class=\"p\">,</span> <span class=\"n\">SNR</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>SNR for the b=0 image is : 47.366354266706736\nSNR for direction 58   [ 0.98875  0.1177  -0.09229] is : 5.918432129721111\nSNR for direction 57   [-0.05039    0.99871    0.0054406] is : 26.72068171809924\nSNR for direction 126   [-0.11825  -0.039925  0.99218 ] is : 27.592653853373644\n</pre></div>\n</div>\n<section id=\"snr-for-the-b-0-image-is-42-0695455758\">\n<h2>SNR for the b=0 image is : \u2018\u201942.0695455758\u2019\u2019<a class=\"headerlink\" href=\"#snr-for-the-b-0-image-is-42-0695455758\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<blockquote>\n<div><p>SNR for direction 58  [ 0.98875  0.1177  -0.09229] is : \u2018\u20195.46995373635\u2019\u2019</p>\n</div></blockquote>\n<section id=\"snr-for-direction-57-0-05039-0-99871-0-0054406-is-23-9329492871\">\n<h3>SNR for direction 57  [-0.05039  0.99871  0.0054406] is : \u2018\u201923.9329492871\u2019\u2019<a class=\"headerlink\" href=\"#snr-for-direction-57-0-05039-0-99871-0-0054406-is-23-9329492871\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<blockquote>\n<div><p>SNR for direction 126 [-0.11825  -0.039925  0.99218 ] is : \u2018\u201923.9965694823\u2019\u2019</p>\n</div></blockquote>\n<p>Since the CC is aligned with the X axis, the lowest SNR is for that gradient\ndirection. In comparison, the DW images in the perpendicular Y and Z axes have\na high SNR. The b0 still exhibits the highest SNR, since there is no signal\nattenuation.</p>\n<p>Hence, we can say the Stanford diffusion data has a \u2018worst-case\u2019 SNR of\napproximately 5, a \u2018best-case\u2019 SNR of approximately 24, and a SNR of 42 on the\nb0 image.</p>\n<section id=\"references\">\n<h4>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"descoteaux2011\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Descoteaux2011</a><span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., Deriche, R., Le Bihan, D., Mangin, J.-F.,\nand Poupon, C. Multiple q-shell diffusion propagator imaging. Medical Image\nAnalysis, 15(4), 603, 2011.</p>\n</div>\n<div class=\"citation\" id=\"jones2013\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Jones2013</a><span class=\"fn-bracket\">]</span></span>\n<p>Jones, D. K., Knosche, T. R., &amp; Turner, R. White Matter\nIntegrity, Fiber Count, and Other Fallacies: The Dos and Don\u2019ts of Diffusion\nMRI. NeuroImage, 73, 239, 2013.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  38.196 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-04-preprocessing-snr-in-cc-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/089bf86bf7c3f2d91e587c4ad12be47f/snr_in_cc.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">snr_in_cc.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/e017db8dbfd1312b737be79cbd57140c/snr_in_cc.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">snr_in_cc.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/04_preprocessing/denoise_mppca", "Denoise images using the Marcenko-Pastur PCA algorithm", "N", "next"], ["examples_built/04_preprocessing/denoise_ascm", "Denoise images using Adaptive Soft Coefficient Matching (ASCM)", "P", "previous"]], "sourcename": "examples_built/04_preprocessing/snr_in_cc.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">SNR estimation for Diffusion-Weighted Images</a><ul>\n<li><a class=\"reference internal\" href=\"#snr-for-the-b-0-image-is-42-0695455758\">SNR for the b=0 image is : \u2018\u201942.0695455758\u2019\u2019</a><ul>\n<li><a class=\"reference internal\" href=\"#snr-for-direction-57-0-05039-0-99871-0-0054406-is-23-9329492871\">SNR for direction 57  [-0.05039  0.99871  0.0054406] is : \u2018\u201923.9329492871\u2019\u2019</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/04_preprocessing/snr_in_cc", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}