{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Preprocessing"}], "prev": {"link": "../motion_correction/", "title": "Between-volumes Motion Correction on DWI datasets"}, "next": {"link": "../denoise_nlmeans/", "title": "Denoise images using Non-Local Means (NLMEANS)"}, "title": "Noise estimation using PIESNO", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-04-preprocessing-piesno-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"noise-estimation-using-piesno\">\n<span id=\"sphx-glr-examples-built-04-preprocessing-piesno-py\"></span><h1>Noise estimation using PIESNO<a class=\"headerlink\" href=\"#noise-estimation-using-piesno\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Often, one is interested in estimating the noise in the diffusion signal. One\nof the methods to do this is the Probabilistic Identification and Estimation of\nNoise (PIESNO) framework <a class=\"reference internal\" href=\"#koay2009\" id=\"id1\"><span>[Koay2009]</span></a>. Using this method, one can detect the\nstandard deviation of the noise from Diffusion-Weighted Imaging (DWI). PIESNO\nalso works with multiple channel DWI datasets that are acquired from N array\ncoils for both SENSE and GRAPPA reconstructions.</p>\n<p>The PIESNO method works in two steps:</p>\n<p>1) First, it finds voxels that are most likely background voxels. Intuitively,\nthese voxels have very similar diffusion-weighted intensities (up to some\nnoise) in the fourth dimension of the DWI dataset. White matter, gray matter\nor CSF voxels have diffusion intensities that vary quite a lot across different\ndirections.</p>\n<p>2) From these estimated background voxels and the input number of coils <span class=\"math notranslate nohighlight\">\\(N\\)</span>,\nPIESNO finds what sigma each Gaussian from each of the <span class=\"math notranslate nohighlight\">\\(N\\)</span> coils would have\ngenerated the observed Rician (<span class=\"math notranslate nohighlight\">\\(N = 1\\)</span>) or non-central Chi (<span class=\"math notranslate nohighlight\">\\(N &gt; 1\\)</span>)\ndistributed noise profile in the DWI datasets.</p>\n<p>PIESNO makes an important assumption: the Gaussian noise standard deviation is\nassumed to be uniform. The noise is uniform across multiple slice locations or\nacross multiple images of the same location.</p>\n<p>For the full details, please refer to the original paper.</p>\n<p>In this example, we will demonstrate the use of PIESNO with a 3-shell data-set.</p>\n<p>We start by importing necessary modules and functions and loading the data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.noise_estimate</span> <span class=\"kn\">import</span> <span class=\"n\">piesno</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">save_nifti</span>\n\n<span class=\"n\">dwi_fname</span><span class=\"p\">,</span> <span class=\"n\">dwi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">dwi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;sherbrooke_3shell&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">dwi_fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now that we have fetched a dataset, we must call PIESNO with the right number\nof coils used to acquire this dataset. It is also important to know what\nwas the parallel reconstruction algorithm used. Here, the data comes from a\nGRAPPA reconstruction, was acquired with a 12-elements head coil available on\nthe Tim Trio Siemens, for which the 12 coil elements are combined into 4 groups\nof 3 coil elements each. The signal is therefore received through 4 distinct\ngroups of receiver channels, yielding N = 4. Had we used a GE acquisition, we\nwould have used N=1 even if multiple channel coils are used because GE uses a\nSENSE reconstruction, which has a Rician noise nature and thus N is always 1.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">piesno</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">return_mask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">axial</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"n\">axial_piesno</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">axial</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Axial slice of the b=0 data&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">axial_piesno</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Background voxels from the data&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;piesno.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_piesno_001.png\" srcset=\"../../_images/sphx_glr_piesno_001.png\" alt=\"piesno\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id2\">\n<img alt=\"examples_built/04_preprocessing/piesno.png\" src=\"examples_built/04_preprocessing/piesno.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Showing the mid axial slice of the b=0 image (left) and estimated\nbackground voxels (right) used to estimate the noise standard deviation.</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s1\">&#39;mask_piesno.nii.gz&#39;</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The noise standard deviation is sigma = &#39;</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The std of the background is =&#39;</span><span class=\"p\">,</span>\n      <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">)]))</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>The noise standard deviation is sigma =  [7.263329  7.263329  7.263329  6.933178  7.263329  6.933178  6.933178\n 6.933178  6.933178  6.933178  6.933178  7.263329  7.263329  6.933178\n 7.5934806 7.263329  7.5934806 7.263329  7.263329  7.263329  7.5934806\n 7.263329  7.5934806 7.5934806 7.263329  7.263329  7.5934806 7.5934806\n 7.263329  7.263329  7.263329  7.5934806 7.263329  7.263329  7.263329\n 7.263329  7.263329  7.263329  7.263329  7.263329  7.263329  7.263329\n 7.263329  6.933178  7.263329  6.933178  6.933178  6.933178  6.933178\n 6.933178  7.263329  7.263329  7.263329  7.263329  7.263329  7.263329\n 7.263329  7.263329  7.263329  7.263329 ]\nThe std of the background is = 9.708311737182022\n</pre></div>\n</div>\n<p>Here, we obtained a noise standard deviation of 7.26. For comparison, a simple\nstandard deviation of all voxels in the estimated mask (as done in the previous\nexample <span class=\"xref std std-ref\">example_snr_in_cc</span>) gives a value of 6.1.</p>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"koay2009\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Koay2009</a><span class=\"fn-bracket\">]</span></span>\n<p>Koay C.G., E. Ozarslan, C. Pierpaoli. Probabilistic\nIdentification and Estimation of Noise (PIESNO): A self-consistent approach\nand its applications in MRI. JMR, 199(1):94-103, 2009.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  7.736 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-04-preprocessing-piesno-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/98410c862599cbda255ee8e895351cfb/piesno.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">piesno.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/aaa31e4cd0757cb50d327c0e18f66c2a/piesno.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">piesno.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/04_preprocessing/denoise_nlmeans", "Denoise images using Non-Local Means (NLMEANS)", "N", "next"], ["examples_built/04_preprocessing/motion_correction", "Between-volumes Motion Correction on DWI datasets", "P", "previous"]], "sourcename": "examples_built/04_preprocessing/piesno.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Noise estimation using PIESNO</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/04_preprocessing/piesno", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}