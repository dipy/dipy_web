{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Workflows"}], "prev": {"link": "../", "title": "Workflows"}, "next": {"link": "../combined_workflow_creation/", "title": "Creating a new combined workflow"}, "title": "Creating a new workflow.", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-37-workflows-workflow-creation-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"creating-a-new-workflow\">\n<span id=\"sphx-glr-examples-built-37-workflows-workflow-creation-py\"></span><h1>Creating a new workflow.<a class=\"headerlink\" href=\"#creating-a-new-workflow\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>A workflow is a series of <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">DIPY_</span></a> operations with fixed inputs and outputs\nthat is callable via command line or another interface.</p>\n<p>For example, after installing <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">DIPY_</span></a>, you can call anywhere from your command\nline:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dipy_nlmeans</span> <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">nii</span><span class=\"o\">.</span><span class=\"n\">gz</span> <span class=\"n\">t1_denoised</span><span class=\"o\">.</span><span class=\"n\">nii</span><span class=\"o\">.</span><span class=\"n\">gz</span>\n</pre></div>\n</div>\n<p>First create your workflow (let\u2019s name this workflow file as my_workflow.py). Usually this is a python file in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;../dipy/workflows&gt;</span></code> directory.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">shutil</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">shutil</span></code> Will be used for sample file manipulation.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.workflow</span> <span class=\"kn\">import</span> <span class=\"n\">Workflow</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code> is the base class that will be extended to create our workflow.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">AppendTextFlow</span><span class=\"p\">(</span><span class=\"n\">Workflow</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_files</span><span class=\"p\">,</span> <span class=\"n\">text_to_append</span><span class=\"o\">=</span><span class=\"s1\">&#39;dipy&#39;</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">out_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;append.txt&#39;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_files : string</span>\n<span class=\"sd\">            Path to the input files. This path may contain wildcards to</span>\n<span class=\"sd\">            process multiple inputs at once.</span>\n\n<span class=\"sd\">        text_to_append : string, optional</span>\n<span class=\"sd\">            Text that will be appended to the file. (default &#39;dipy&#39;)</span>\n\n<span class=\"sd\">        out_dir : string, optional</span>\n<span class=\"sd\">            Where the resulting file will be saved. (default &#39;&#39;)</span>\n\n<span class=\"sd\">        out_file : string, optional</span>\n<span class=\"sd\">            Name of the result file to be saved. (default &#39;append.txt&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        ``AppendTextFlow`` is the name of our workflow. Note that it needs</span>\n<span class=\"sd\">        to extend Workflow for everything to work properly. It will append</span>\n<span class=\"sd\">        text to a file.</span>\n\n<span class=\"sd\">        It is mandatory to have out_dir as a parameter. It is also mandatory</span>\n<span class=\"sd\">        to put `out_` in front of every parameter that is going to be an</span>\n<span class=\"sd\">        output. Lastly, all `out_` params needs to be at the end of the params</span>\n<span class=\"sd\">        list.</span>\n\n<span class=\"sd\">        The ``run`` docstring is very important, you need to document every</span>\n<span class=\"sd\">        parameter as they will be used with inspection to build the command line</span>\n<span class=\"sd\">        argument parser.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">io_it</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_io_iterator</span><span class=\"p\">()</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_file</span> <span class=\"ow\">in</span> <span class=\"n\">io_it</span><span class=\"p\">:</span>\n\n            <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_file</span><span class=\"p\">)</span>\n\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">out_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">myfile</span><span class=\"p\">:</span>\n\n                <span class=\"n\">myfile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">text_to_append</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Use self.get_io_iterator() in every workflow you create. This creates\nan <code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code> object that create output file names and directory structure\nbased on the inputs and some other advanced output strategy parameters.</p>\n<p>By iterating on the <code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code> object you created previously you\nconveniently get all input and output paths for every input file\nfound when globbing the input parameters.</p>\n<p>The code in the loop is the actual workflow processing code. It can be\nanything. For example, it just appends text to an input file.</p>\n<p>This is it for the workflow! Now to be able to call it easily via command\nline, you need to add this bit of code. Usually this is in a separate\nexecutable file located in <code class=\"docutils literal notranslate\"><span class=\"pre\">bin</span></code>.</p>\n<p>The first line imports the run_flow method from the flow_runner class.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.flow_runner</span> <span class=\"kn\">import</span> <span class=\"n\">run_flow</span>\n</pre></div>\n</div>\n<p>The second line imports the <code class=\"docutils literal notranslate\"><span class=\"pre\">AppendTextFlow</span></code> class from the newly created\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_workflow.py</span></code> file. In this specific case, we comment on this import\nsince the <code class=\"docutils literal notranslate\"><span class=\"pre\">AppendTextFlow</span></code> class is not in an external file but in the\ncurrent file.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># from dipy.workflows.my_workflow import AppendTextFlow</span>\n</pre></div>\n</div>\n<p>This is the method that will wrap everything that is needed to make a flow\ncommand line ready then run it.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># if __name__ == &quot;__main__&quot;:</span>\n<span class=\"c1\">#     run_flow(AppendTextFlow())</span>\n</pre></div>\n</div>\n<p>This is the only thing needed to make your workflow available through the\ncommand line.</p>\n<p>Now just call the script you just made with <code class=\"docutils literal notranslate\"><span class=\"pre\">-h</span></code> to see the argparser help\ntext:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">python</span> <span class=\"n\">workflow_creation</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"o\">--</span><span class=\"n\">help</span>\n</pre></div>\n</div>\n<p>You should see all your parameters available along with some extra common ones\nlike logging file and force overwrite. Also all the documentation you wrote\nabout each parameter is there.</p>\n<p>Now call it for real with a text file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">python</span> <span class=\"n\">workflow_creation</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"o\">./</span><span class=\"n\">text_file</span><span class=\"o\">.</span><span class=\"n\">txt</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  0.002 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-37-workflows-workflow-creation-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/c3f34f4ad2f4930319fe4aa4caf1b69a/workflow_creation.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">workflow_creation.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/ab84eef5628cb3339261cdf19b677a5f/workflow_creation.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">workflow_creation.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/37_workflows/combined_workflow_creation", "Creating a new combined workflow", "N", "next"], ["examples_built/37_workflows/index", "Workflows", "P", "previous"]], "sourcename": "examples_built/37_workflows/workflow_creation.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Creating a new workflow.</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/37_workflows/workflow_creation", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}