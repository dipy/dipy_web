{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Workflows"}], "prev": {"link": "../workflow_creation/", "title": "Creating a new workflow."}, "next": {"link": "../../../interfaces/", "title": "DIPY Workflows Interfaces"}, "title": "Creating a new combined workflow", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-37-workflows-combined-workflow-creation-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"creating-a-new-combined-workflow\">\n<span id=\"sphx-glr-examples-built-37-workflows-combined-workflow-creation-py\"></span><h1>Creating a new combined workflow<a class=\"headerlink\" href=\"#creating-a-new-combined-workflow\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code> is a series of <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">DIPY_</span></a> workflows organized together in a\nway that the output of a workflow serves as input for the next one.</p>\n<p>First create your <code class=\"docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code> class. Your <code class=\"docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code> class\nfile is usually located in the <code class=\"docutils literal notranslate\"><span class=\"pre\">dipy/workflows</span></code> directory.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.combined_workflow</span> <span class=\"kn\">import</span> <span class=\"n\">CombinedWorkflow</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code> is the base class that will be extended to create our\ncombined workflow.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.denoise</span> <span class=\"kn\">import</span> <span class=\"n\">NLMeansFlow</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.segment</span> <span class=\"kn\">import</span> <span class=\"n\">MedianOtsuFlow</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code> will be combined to create our\nprocessing section.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">DenoiseAndSegment</span><span class=\"p\">(</span><span class=\"n\">CombinedWorkflow</span><span class=\"p\">):</span>\n\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    ``DenoiseAndSegment`` is the name of our combined workflow. Note that</span>\n<span class=\"sd\">    it needs to extend CombinedWorkflow for everything to work properly.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_sub_flows</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"n\">NLMeansFlow</span><span class=\"p\">,</span>\n            <span class=\"n\">MedianOtsuFlow</span>\n        <span class=\"p\">]</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        It is mandatory to implement this method if you want to make all the sub</span>\n<span class=\"sd\">        workflows parameters available in commandline.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_files</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">out_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;processed.nii.gz&#39;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_files : string</span>\n<span class=\"sd\">            Path to the input files. This path may contain wildcards to</span>\n<span class=\"sd\">            process multiple inputs at once.</span>\n\n<span class=\"sd\">        out_dir : string, optional</span>\n<span class=\"sd\">            Where the resulting file will be saved. (default &#39;&#39;)</span>\n\n<span class=\"sd\">        out_file : string, optional</span>\n<span class=\"sd\">            Name of the result file to be saved. (default &#39;processed.nii.gz&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Just like a normal workflow, it is mandatory to have out_dir as a</span>\n<span class=\"sd\">        parameter. It is also mandatory to put &#39;out_&#39; in front of every</span>\n<span class=\"sd\">        parameter that is going to be an output. Lastly, all out_ params needs</span>\n<span class=\"sd\">        to be at the end of the params list.</span>\n\n<span class=\"sd\">        The class docstring part is very important, you need to document</span>\n<span class=\"sd\">        every parameter as they will be used with inspection to build the</span>\n<span class=\"sd\">        command line argument parser.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">io_it</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_io_iterator</span><span class=\"p\">()</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_file</span> <span class=\"ow\">in</span> <span class=\"n\">io_it</span><span class=\"p\">:</span>\n            <span class=\"n\">nl_flow</span> <span class=\"o\">=</span> <span class=\"n\">NLMeansFlow</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sub_flow</span><span class=\"p\">(</span><span class=\"n\">nl_flow</span><span class=\"p\">,</span> <span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"n\">out_dir</span><span class=\"p\">)</span>\n            <span class=\"n\">denoised</span> <span class=\"o\">=</span> <span class=\"n\">nl_flow</span><span class=\"o\">.</span><span class=\"n\">last_generated_outputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;out_denoised&#39;</span><span class=\"p\">]</span>\n\n            <span class=\"n\">me_flow</span> <span class=\"o\">=</span> <span class=\"n\">MedianOtsuFlow</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sub_flow</span><span class=\"p\">(</span><span class=\"n\">me_flow</span><span class=\"p\">,</span> <span class=\"n\">denoised</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"n\">out_dir</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">self.get_io_iterator()</span></code> in every workflow you create. This creates\nan <code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code> object that create output file names and directory structure\nbased on the inputs and some other advanced output strategy parameters.</p>\n<p>Iterating on the <code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code> object you created previously you\nconveniently get all input and output paths for every input file\nfound when globbin the input parameters.</p>\n<p>In the <code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code> loop you can see how we create a new <code class=\"docutils literal notranslate\"><span class=\"pre\">NLMeans</span></code> workflow\nthen run it using <code class=\"docutils literal notranslate\"><span class=\"pre\">self.run_sub_flow</span></code>. Running it this way will pass any\nworkflow specific parameter that was retrieved from the command line and will\nappend the ones you specify as optional parameters (<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code> in this case).</p>\n<p>Lastly, the outputs paths are retrieved using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">workflow.last_generated_outputs</span></code>. This allows to use <code class=\"docutils literal notranslate\"><span class=\"pre\">denoise</span></code> as the\ninput for the <code class=\"docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code>.</p>\n<p>This is it for the combined workflow class! Now to be able to call it easily via\ncommand line, you need this last bit of code. It is usually in an executable\nfile located in <code class=\"docutils literal notranslate\"><span class=\"pre\">bin</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.flow_runner</span> <span class=\"kn\">import</span> <span class=\"n\">run_flow</span>\n</pre></div>\n</div>\n<p>This is the method that will wrap everything that is needed to make a workflow\nready then run it.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># if __name__ == &quot;__main__&quot;:</span>\n<span class=\"c1\">#     run_flow(DenoiseAndSegment())</span>\n</pre></div>\n</div>\n<p>This is the only thing needed to make your workflow available through command\nline.</p>\n<p>Now just call the script you just made with <code class=\"docutils literal notranslate\"><span class=\"pre\">-h</span></code> to see the argparser help\ntext:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">python</span> <span class=\"n\">combined_workflow_creation</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"o\">--</span><span class=\"n\">help</span>\n</pre></div>\n</div>\n<p>You should see all your parameters available along with some extra common ones\nlike logging file and force overwrite. Also all the documentation you wrote\nabout each parameter is there. Also note that every sub workflow optional\nparameter is available.</p>\n<p>Now call it for real with a nifti file to see the results. Experiment\nwith the parameters and see the results:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">python</span> <span class=\"n\">combined_workflow_creation</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">nii</span><span class=\"o\">.</span><span class=\"n\">gz</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  0.002 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-37-workflows-combined-workflow-creation-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/7e45b77ef30e750cacb2a4cd88ccc049/combined_workflow_creation.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">combined_workflow_creation.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/eadce975bc132a88e51ff0258b1c2c2a/combined_workflow_creation.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">combined_workflow_creation.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["interfaces/index", "DIPY Workflows Interfaces", "N", "next"], ["examples_built/37_workflows/workflow_creation", "Creating a new workflow.", "P", "previous"]], "sourcename": "examples_built/37_workflows/combined_workflow_creation.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Creating a new combined workflow</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/37_workflows/combined_workflow_creation", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}