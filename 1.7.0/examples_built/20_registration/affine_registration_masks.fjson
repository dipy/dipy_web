{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Registration"}], "prev": {"link": "../bundlewarp_registration/", "title": "Nonrigid Bundle Registration with BundleWarp"}, "next": {"link": "../streamline_registration/", "title": "Applying image-based deformations to streamlines"}, "title": "Affine Registration with Masks", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-20-registration-affine-registration-masks-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"affine-registration-with-masks\">\n<span id=\"sphx-glr-examples-built-20-registration-affine-registration-masks-py\"></span><h1>Affine Registration with Masks<a class=\"headerlink\" href=\"#affine-registration-with-masks\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>This example explains how to compute a transformation to register two 3D\nvolumes by maximization of their Mutual Information <a class=\"reference internal\" href=\"#mattes03\" id=\"id1\"><span>[Mattes03]</span></a>. The\noptimization strategy is similar to that implemented in ANTS <a class=\"reference internal\" href=\"../syn_registration_3d/#avants11\" id=\"id2\"><span>[Avants11]</span></a>.</p>\n<p>We will use masks to define which pixels are used in the Mutual Information.\nMasking can also be done for registration of 2D images rather than 3D volumes.</p>\n<p>Masking for registration is useful in a variety of circumstances. For example,\nin cardiac MRI, where it is usually used to specify a region of interest on a\n2D static image, e.g., the left ventricle in a short axis slice. This\nprioritizes registering the region of interest over other structures that move\nwith respect to the heart.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">join</span> <span class=\"k\">as</span> <span class=\"n\">pjoin</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">regtools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_stanford_hardi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.imaffine</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">AffineMap</span><span class=\"p\">,</span>\n                                 <span class=\"n\">MutualInformationMetric</span><span class=\"p\">,</span>\n                                 <span class=\"n\">AffineRegistration</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.transforms</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">TranslationTransform3D</span><span class=\"p\">,</span>\n                                   <span class=\"n\">RigidTransform3D</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">affine_registration</span><span class=\"p\">,</span> <span class=\"n\">translation</span><span class=\"p\">,</span>\n                        <span class=\"n\">rigid</span><span class=\"p\">,</span> <span class=\"n\">register_series</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s fetch a single b0 volume from the Stanford HARDI dataset.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">fetch_stanford_hardi</span><span class=\"p\">()</span>\n<span class=\"n\">static_data</span><span class=\"p\">,</span> <span class=\"n\">static_affine</span><span class=\"p\">,</span> <span class=\"n\">static_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span>\n                                            <span class=\"n\">pjoin</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HARDI150.nii.gz&#39;</span><span class=\"p\">),</span>\n                                            <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">static</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">static_data</span><span class=\"p\">)[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># pad array to help with this example</span>\n<span class=\"n\">pad_by</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">static</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pad</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"n\">pad_by</span><span class=\"p\">,</span> <span class=\"n\">pad_by</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">pad_by</span><span class=\"p\">,</span> <span class=\"n\">pad_by</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)],</span>\n                <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span><span class=\"p\">,</span> <span class=\"n\">constant_values</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">static_grid2world</span> <span class=\"o\">=</span> <span class=\"n\">static_affine</span>\n</pre></div>\n</div>\n<p>Let\u2019s create a moving image by transforming the static image.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affmat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">affmat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">affmat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n<span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"n\">affmat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">s</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">]])</span>\n<span class=\"n\">affine_map</span> <span class=\"o\">=</span> <span class=\"n\">AffineMap</span><span class=\"p\">(</span><span class=\"n\">affmat</span><span class=\"p\">,</span>\n                       <span class=\"n\">static</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">static_grid2world</span><span class=\"p\">,</span>\n                       <span class=\"n\">static</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">static_grid2world</span><span class=\"p\">)</span>\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">affine_map</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">)</span>\n<span class=\"n\">moving_affine</span> <span class=\"o\">=</span> <span class=\"n\">static_affine</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">moving_grid2world</span> <span class=\"o\">=</span> <span class=\"n\">static_grid2world</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deregistered.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_001.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_001.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>&lt;Figure size 640x480 with 3 Axes&gt;\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id3\">\n<img alt=\"examples_built/20_registration/deregistered.png\" src=\"examples_built/20_registration/deregistered.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Same images but misaligned.</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Let\u2019s make some registration settings.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbins</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">sampling_prop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">MutualInformationMetric</span><span class=\"p\">(</span><span class=\"n\">nbins</span><span class=\"p\">,</span> <span class=\"n\">sampling_prop</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># small number of iterations for this example</span>\n<span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">sigmas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">affreg</span> <span class=\"o\">=</span> <span class=\"n\">AffineRegistration</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">,</span>\n                            <span class=\"n\">level_iters</span><span class=\"o\">=</span><span class=\"n\">level_iters</span><span class=\"p\">,</span>\n                            <span class=\"n\">sigmas</span><span class=\"o\">=</span><span class=\"n\">sigmas</span><span class=\"p\">,</span>\n                            <span class=\"n\">factors</span><span class=\"o\">=</span><span class=\"n\">factors</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now let\u2019s register these volumes together without any masking. For the purposes\nof this example, we will not provide an initial transformation based on centre\nof mass, but this would work fine with masks.</p>\n<p>Note that use of masks is not currently implemented for sparse sampling.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">TranslationTransform3D</span><span class=\"p\">()</span>\n<span class=\"n\">transl</span> <span class=\"o\">=</span> <span class=\"n\">affreg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">static_grid2world</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">,</span>\n                         <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">moving_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">RigidTransform3D</span><span class=\"p\">()</span>\n<span class=\"n\">transl</span> <span class=\"o\">=</span> <span class=\"n\">affreg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">static_grid2world</span><span class=\"p\">,</span> <span class=\"n\">moving_grid2world</span><span class=\"p\">,</span>\n                         <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"n\">transl</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n                         <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">moving_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">transl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n\n<span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">transl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">transformed</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;transformed.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_002.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_002.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\nOptimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\n\n&lt;Figure size 640x480 with 3 Axes&gt;\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id4\">\n<img alt=\"examples_built/20_registration/transformed.png\" src=\"examples_built/20_registration/transformed.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration result.</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>We can also use a pipeline to achieve the same thing. For convenience in this\ntutorial, we will define a function that runs the pipeline and makes a figure.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">reg_func</span><span class=\"p\">(</span><span class=\"n\">figname</span><span class=\"p\">,</span> <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">moving_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Convenience function for registration using a pipeline.</span>\n<span class=\"sd\">       Uses variables in global scope, except for static_mask and moving_mask.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">translation</span><span class=\"p\">,</span> <span class=\"n\">rigid</span><span class=\"p\">]</span>\n\n    <span class=\"n\">xformed_img</span><span class=\"p\">,</span> <span class=\"n\">reg_affine</span> <span class=\"o\">=</span> <span class=\"n\">affine_registration</span><span class=\"p\">(</span>\n        <span class=\"n\">moving</span><span class=\"p\">,</span>\n        <span class=\"n\">static</span><span class=\"p\">,</span>\n        <span class=\"n\">moving_affine</span><span class=\"o\">=</span><span class=\"n\">moving_affine</span><span class=\"p\">,</span>\n        <span class=\"n\">static_affine</span><span class=\"o\">=</span><span class=\"n\">static_affine</span><span class=\"p\">,</span>\n        <span class=\"n\">nbins</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n        <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;MI&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"n\">pipeline</span><span class=\"p\">,</span>\n        <span class=\"n\">level_iters</span><span class=\"o\">=</span><span class=\"n\">level_iters</span><span class=\"p\">,</span>\n        <span class=\"n\">sigmas</span><span class=\"o\">=</span><span class=\"n\">sigmas</span><span class=\"p\">,</span>\n        <span class=\"n\">factors</span><span class=\"o\">=</span><span class=\"n\">factors</span><span class=\"p\">,</span>\n        <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"n\">static_mask</span><span class=\"p\">,</span>\n        <span class=\"n\">moving_mask</span><span class=\"o\">=</span><span class=\"n\">moving_mask</span><span class=\"p\">)</span>\n\n    <span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">xformed_img</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Transformed&quot;</span><span class=\"p\">,</span> <span class=\"n\">figname</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span>\n</pre></div>\n</div>\n<p>Now we can run this function and hopefully get the same result.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reg_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;transformed_pipeline.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_003.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_003.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\nOptimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id5\">\n<img alt=\"examples_built/20_registration/transformed_pipeline.png\" src=\"examples_built/20_registration/transformed_pipeline.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration result using pipeline.</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Now let\u2019s modify the images in order to test masking. We will place three\nsquares in the corners of both images, but in slightly different locations.</p>\n<p>We will make masks that cover these regions but with an extra border of pixels.\nThis is because the masks need transforming and resampling during optimization,\nand we want to make sure that we are definitely covering the troublesome\nfeatures.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># modify images</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">static</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"o\">/</span><span class=\"mf\">2.0</span>\n\n<span class=\"n\">static</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n<span class=\"n\">static</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n<span class=\"n\">static</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<span class=\"n\">moving</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n<span class=\"n\">moving</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n<span class=\"n\">moving</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<span class=\"c1\"># create masks</span>\n<span class=\"n\">squares_st</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"n\">squares_mv</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n<span class=\"n\">squares_st</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">squares_st</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">squares_st</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">squares_mv</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">squares_mv</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">squares_mv</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">sz</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"p\">:</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deregistered_squares.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_004.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_004.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>&lt;Figure size 640x480 with 3 Axes&gt;\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id6\">\n<img alt=\"examples_built/20_registration/deregistered_squares.png\" src=\"examples_built/20_registration/deregistered_squares.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Same images but misaligned, with white squares in the corners.</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">static_mask</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">squares_st</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">moving_mask</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">squares_mv</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">static_mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s2\">&quot;gray&quot;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s2\">&quot;lower&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;static image mask&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">moving_mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s2\">&quot;gray&quot;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s2\">&quot;lower&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;moving image mask&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;masked_static.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_005.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_005.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id7\">\n<img alt=\"examples_built/20_registration/masked_static.png\" src=\"examples_built/20_registration/masked_static.png\" />\n<figcaption>\n<p><span class=\"caption-text\">The masks.</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Let\u2019s try to register these new images without a mask.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reg_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;transformed_squares.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_006.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_006.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\nOptimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id8\">\n<img alt=\"examples_built/20_registration/transformed_squares.png\" src=\"examples_built/20_registration/transformed_squares.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration fails to align the images because the squares pin the images.</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Now we will attempt to register the images using the masks that we defined.</p>\n<p>First, use a mask on the static image. Only pixels where the mask is non-zero\nin the static image will contribute to Mutual Information.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reg_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;transformed_squares_mask.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"n\">static_mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_007.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_007.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\nOptimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id9\">\n<img alt=\"examples_built/20_registration/transformed_squares_mask.png\" src=\"examples_built/20_registration/transformed_squares_mask.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration result using a static mask.</span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>We can also attempt the same thing use a moving image mask.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reg_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;transformed_squares_mask_2.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">moving_mask</span><span class=\"o\">=</span><span class=\"n\">moving_mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_008.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_008.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\nOptimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id10\">\n<img alt=\"examples_built/20_registration/transformed_squares_mask_2.png\" src=\"examples_built/20_registration/transformed_squares_mask_2.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration result using a moving mask.</span><a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>And finally, we can use both masks at the same time.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reg_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;transformed_squares_mask_3.png&quot;</span><span class=\"p\">,</span>\n         <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"n\">static_mask</span><span class=\"p\">,</span> <span class=\"n\">moving_mask</span><span class=\"o\">=</span><span class=\"n\">moving_mask</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_affine_registration_masks_009.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_009.png\" alt=\"affine registration masks\" class = \"sphx-glr-single-img\"/><div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\nOptimizing level 1 [max iter: 100]\nOptimizing level 0 [max iter: 10]\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id11\">\n<img alt=\"examples_built/20_registration/transformed_squares_mask_3.png\" src=\"examples_built/20_registration/transformed_squares_mask_3.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration result using both a static mask and a moving mask.</span><a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>In most use cases, it is likely that only a static mask will be required,\ne.g., to register a series of images to a single static image.</p>\n<p>Let\u2019s make a series of volumes to demonstrate this idea, and register the\nseries to the first image in the series using a static mask:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">translation</span><span class=\"p\">,</span> <span class=\"n\">rigid</span><span class=\"p\">]</span>\n<span class=\"n\">xformed</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">register_series</span><span class=\"p\">(</span><span class=\"n\">series</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pipeline</span><span class=\"p\">,</span>\n                             <span class=\"n\">series_affine</span><span class=\"o\">=</span><span class=\"n\">moving_affine</span><span class=\"p\">,</span>\n                             <span class=\"n\">static_mask</span><span class=\"o\">=</span><span class=\"n\">static_mask</span><span class=\"p\">)</span>\n\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">xformed</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span>\n                        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">xformed</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]),</span>\n                        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving 1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;series_mask_1.png&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">xformed</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span>\n                        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">xformed</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n                        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Static&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moving 2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;series_mask_2.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ul class=\"sphx-glr-horizontal\">\n<li><img src=\"../../_images/sphx_glr_affine_registration_masks_010.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_010.png\" alt=\"affine registration masks\" class = \"sphx-glr-multi-img\"/></li>\n<li><img src=\"../../_images/sphx_glr_affine_registration_masks_011.png\" srcset=\"../../_images/sphx_glr_affine_registration_masks_011.png\" alt=\"affine registration masks\" class = \"sphx-glr-multi-img\"/></li>\n</ul>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 2 [max iter: 10000]\nOptimizing level 1 [max iter: 1000]\nOptimizing level 0 [max iter: 100]\nOptimizing level 2 [max iter: 10000]\nOptimizing level 1 [max iter: 1000]\nOptimizing level 0 [max iter: 100]\nOptimizing level 2 [max iter: 10000]\nOptimizing level 1 [max iter: 1000]\nOptimizing level 0 [max iter: 100]\nOptimizing level 2 [max iter: 10000]\nOptimizing level 1 [max iter: 1000]\nOptimizing level 0 [max iter: 100]\n\n&lt;Figure size 640x480 with 3 Axes&gt;\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/20_registration/series_mask_1.png\" src=\"examples_built/20_registration/series_mask_1.png\" />\n</figure>\n<figure class=\"align-center\" id=\"id12\">\n<img alt=\"examples_built/20_registration/series_mask_2.png\" src=\"examples_built/20_registration/series_mask_2.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Registration of series using a static mask.</span><a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>In all of the examples above, different masking choices achieved essentially\nthe same result, but in general the results may differ depending on differences\nbetween the static and moving images.</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"mattes03\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Mattes03</a><span class=\"fn-bracket\">]</span></span>\n<p>Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,\nEubank, W. (2003). PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical Imaging,\n22(1), 120-8.</p>\n</div>\n<div class=\"citation\" id=\"avants11\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Avants11</a><span class=\"fn-bracket\">]</span></span>\n<p>Avants, B. B., Tustison, N., &amp; Song, G. (2011). Advanced\nNormalization Tools (ANTS), 1-35.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 3 minutes  37.428 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-20-registration-affine-registration-masks-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/6ca474477abf3f74a5ec06edcb74833a/affine_registration_masks.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">affine_registration_masks.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/0a2c469dba8dc3125bce409c9af193de/affine_registration_masks.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">affine_registration_masks.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/20_registration/streamline_registration", "Applying image-based deformations to streamlines", "N", "next"], ["examples_built/20_registration/bundlewarp_registration", "Nonrigid Bundle Registration with BundleWarp", "P", "previous"]], "sourcename": "examples_built/20_registration/affine_registration_masks.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Affine Registration with Masks</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/20_registration/affine_registration_masks", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}