{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Registration"}], "prev": {"link": "../affine_registration_masks/", "title": "Affine Registration with Masks"}, "next": {"link": "../affine_registration_3d/", "title": "Affine Registration in 3D"}, "title": "Applying image-based deformations to streamlines", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-20-registration-streamline-registration-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"applying-image-based-deformations-to-streamlines\">\n<span id=\"sphx-glr-examples-built-20-registration-streamline-registration-py\"></span><h1>Applying image-based deformations to streamlines<a class=\"headerlink\" href=\"#applying-image-based-deformations-to-streamlines\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>This example shows how to register streamlines into a template space by\napplying non-rigid deformations.</p>\n<p>At times we will be interested in bringing a set of streamlines into some\ncommon, reference space to compute statistics out of the registered\nstreamlines. For a discussion on the effects of spatial normalization\napproaches on tractography the work by Green et al. <a class=\"reference internal\" href=\"#greene17\" id=\"id1\"><span>[Greene17]</span></a> can be read.</p>\n<p>For brevity, we will include in this example only streamlines going through\nthe corpus callosum connecting left to right superior frontal cortex. The\nprocess of tracking and finding these streamlines is fully demonstrated in\nthe <a class=\"reference internal\" href=\"../../17_streamline_analysis/streamline_tools/#streamline-tools\"><span class=\"std std-ref\">Connectivity Matrices, ROI Intersections and Density Maps</span></a> example. If this example has been run, we can read\nthe streamlines from file. Otherwise, we\u2019ll run that example first, by\nimporting it. This provides us with all of the variables that were created in\nthat example.</p>\n<p>In order to get the deformation field, we will first use two b0 volumes. Both\nmoving and static images are assumed to be in RAS. The first one will be the\nb0 from the Stanford HARDI dataset:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">join</span> <span class=\"k\">as</span> <span class=\"n\">pjoin</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">,</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">save_nifti</span>\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">vox_size</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The second one will be the T2-contrast MNI template image, which we\u2019ll need to\nreslice to 2x2x2 mm isotropic voxel resolution to match the HARDI data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data.fetcher</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">fetch_mni_template</span><span class=\"p\">,</span> <span class=\"n\">read_mni_template</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"kn\">import</span> <span class=\"n\">reslice</span>\n\n<span class=\"n\">fetch_mni_template</span><span class=\"p\">()</span>\n<span class=\"n\">img_t2_mni</span> <span class=\"o\">=</span> <span class=\"n\">read_mni_template</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"s2\">&quot;T2&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">)</span>\n<span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">img_t2_mni</span><span class=\"o\">.</span><span class=\"n\">dataobj</span><span class=\"p\">),</span> <span class=\"n\">img_t2_mni</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n                         <span class=\"n\">img_t2_mni</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">(),</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"n\">img_t2_mni</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We filter the diffusion data from the Stanford HARDI dataset to find all the b0\nimages.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b0_idx_stanford</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">b0_data_stanford</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">b0_idx_stanford</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We then remove the skull from them:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">b0_masked_stanford</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">b0_data_stanford</span><span class=\"p\">,</span>\n                <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">b0_data_stanford</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])),</span>\n                <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>And go on to compute the Stanford HARDI dataset mean b0 image.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean_b0_masked_stanford</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">b0_masked_stanford</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                                  <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We will register the mean b0 to the MNI T2 image template non-rigidly to\nobtain the deformation field that will be applied to the streamlines. This is\njust one of the strategies that can be used to obtain an appropriate\ndeformation field. Other strategies include computing an FA template map as\nthe static image, and registering the FA map of the moving image to it. This\nmay may eventually lead to results with improved accuracy, since a T2-contrast\ntemplate image as the target for normalization does not provide optimal tissue\ncontrast for maximal SyN performance.</p>\n<p>We will first perform an affine registration to roughly align the two volumes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.imaffine</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">MutualInformationMetric</span><span class=\"p\">,</span> <span class=\"n\">AffineRegistration</span><span class=\"p\">,</span>\n                                 <span class=\"n\">transform_origins</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.transforms</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">TranslationTransform3D</span><span class=\"p\">,</span> <span class=\"n\">RigidTransform3D</span><span class=\"p\">,</span>\n                                   <span class=\"n\">AffineTransform3D</span><span class=\"p\">)</span>\n\n<span class=\"n\">static</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">img_t2_mni</span><span class=\"o\">.</span><span class=\"n\">dataobj</span><span class=\"p\">)</span>\n<span class=\"n\">static_affine</span> <span class=\"o\">=</span> <span class=\"n\">img_t2_mni</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">mean_b0_masked_stanford</span>\n<span class=\"n\">moving_affine</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n</pre></div>\n</div>\n<p>We estimate an affine that maps the origin of the moving image to that of the\nstatic image. We can then use this later to account for the offsets of each\nimage.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affine_map</span> <span class=\"o\">=</span> <span class=\"n\">transform_origins</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">static_affine</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">moving_affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We specify the mismatch metric:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbins</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">sampling_prop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">MutualInformationMetric</span><span class=\"p\">(</span><span class=\"n\">nbins</span><span class=\"p\">,</span> <span class=\"n\">sampling_prop</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As well as the optimization strategy:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">sigmas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">affine_reg</span> <span class=\"o\">=</span> <span class=\"n\">AffineRegistration</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">level_iters</span><span class=\"o\">=</span><span class=\"n\">level_iters</span><span class=\"p\">,</span>\n                                <span class=\"n\">sigmas</span><span class=\"o\">=</span><span class=\"n\">sigmas</span><span class=\"p\">,</span> <span class=\"n\">factors</span><span class=\"o\">=</span><span class=\"n\">factors</span><span class=\"p\">)</span>\n<span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">TranslationTransform3D</span><span class=\"p\">()</span>\n\n<span class=\"n\">params0</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"n\">affine_reg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">params0</span><span class=\"p\">,</span>\n                                  <span class=\"n\">static_affine</span><span class=\"p\">,</span> <span class=\"n\">moving_affine</span><span class=\"p\">)</span>\n<span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">RigidTransform3D</span><span class=\"p\">()</span>\n\n<span class=\"n\">rigid_map</span> <span class=\"o\">=</span> <span class=\"n\">affine_reg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">params0</span><span class=\"p\">,</span>\n                                <span class=\"n\">static_affine</span><span class=\"p\">,</span> <span class=\"n\">moving_affine</span><span class=\"p\">,</span>\n                                <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">rigid_map</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n<span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">AffineTransform3D</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 2 [max iter: 10]\nOptimizing level 1 [max iter: 10]\nOptimizing level 0 [max iter: 5]\nOptimizing level 2 [max iter: 10]\nOptimizing level 1 [max iter: 10]\nOptimizing level 0 [max iter: 5]\n</pre></div>\n</div>\n<p>We bump up the iterations to get a more exact fit:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affine_reg</span><span class=\"o\">.</span><span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"n\">highres_map</span> <span class=\"o\">=</span> <span class=\"n\">affine_reg</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">params0</span><span class=\"p\">,</span>\n                                  <span class=\"n\">static_affine</span><span class=\"p\">,</span> <span class=\"n\">moving_affine</span><span class=\"p\">,</span>\n                                  <span class=\"n\">starting_affine</span><span class=\"o\">=</span><span class=\"n\">rigid_map</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">highres_map</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Optimizing level 2 [max iter: 1000]\nOptimizing level 1 [max iter: 1000]\nOptimizing level 0 [max iter: 100]\n</pre></div>\n</div>\n<p>We now perform the non-rigid deformation using the Symmetric Diffeomorphic\nRegistration (SyN) Algorithm proposed by Avants et al. <a class=\"reference internal\" href=\"../syn_registration_3d/#avants09\" id=\"id2\"><span>[Avants09]</span></a> (also\nimplemented in the ANTs software <a class=\"reference internal\" href=\"../syn_registration_3d/#avants11\" id=\"id3\"><span>[Avants11]</span></a>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.imwarp</span> <span class=\"kn\">import</span> <span class=\"n\">SymmetricDiffeomorphicRegistration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">CCMetric</span>\n\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">CCMetric</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">level_iters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">sdr</span> <span class=\"o\">=</span> <span class=\"n\">SymmetricDiffeomorphicRegistration</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">level_iters</span><span class=\"p\">)</span>\n\n<span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"n\">sdr</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">static_affine</span><span class=\"p\">,</span> <span class=\"n\">moving_affine</span><span class=\"p\">,</span>\n                       <span class=\"n\">highres_map</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n<span class=\"n\">warped_moving</span> <span class=\"o\">=</span> <span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We show the registration result with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">regtools</span>\n\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">warped_moving</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moving&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;transformed_sagittal.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">warped_moving</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moving&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;transformed_coronal.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">regtools</span><span class=\"o\">.</span><span class=\"n\">overlay_slices</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">,</span> <span class=\"n\">warped_moving</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Static&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moving&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;transformed_axial.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ul class=\"sphx-glr-horizontal\">\n<li><img src=\"../../_images/sphx_glr_streamline_registration_001.png\" srcset=\"../../_images/sphx_glr_streamline_registration_001.png\" alt=\"streamline registration\" class = \"sphx-glr-multi-img\"/></li>\n<li><img src=\"../../_images/sphx_glr_streamline_registration_002.png\" srcset=\"../../_images/sphx_glr_streamline_registration_002.png\" alt=\"streamline registration\" class = \"sphx-glr-multi-img\"/></li>\n<li><img src=\"../../_images/sphx_glr_streamline_registration_003.png\" srcset=\"../../_images/sphx_glr_streamline_registration_003.png\" alt=\"streamline registration\" class = \"sphx-glr-multi-img\"/></li>\n</ul>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>&lt;Figure size 640x480 with 3 Axes&gt;\n</pre></div>\n</div>\n<figure class=\"align-center\">\n<img alt=\"examples_built/20_registration/transformed_sagittal.png\" src=\"examples_built/20_registration/transformed_sagittal.png\" />\n</figure>\n<figure class=\"align-center\">\n<img alt=\"examples_built/20_registration/transformed_coronal.png\" src=\"examples_built/20_registration/transformed_coronal.png\" />\n</figure>\n<figure class=\"align-center\" id=\"id4\">\n<img alt=\"examples_built/20_registration/transformed_axial.png\" src=\"examples_built/20_registration/transformed_axial.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Deformable registration result.</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Let\u2019s now fetch a set of streamlines from the Stanford HARDI dataset.\nThose streamlines were generated during the <a class=\"reference internal\" href=\"../../17_streamline_analysis/streamline_tools/#streamline-tools\"><span class=\"std std-ref\">Connectivity Matrices, ROI Intersections and Density Maps</span></a> example.</p>\n<p>We read the streamlines from file in voxel space:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_stanford_tracks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">load_tractogram</span>\n\n\n<span class=\"n\">streamlines_files</span> <span class=\"o\">=</span> <span class=\"n\">fetch_stanford_tracks</span><span class=\"p\">()</span>\n<span class=\"n\">lr_superiorfrontal_path</span> <span class=\"o\">=</span> <span class=\"n\">pjoin</span><span class=\"p\">(</span><span class=\"n\">streamlines_files</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                                <span class=\"s1\">&#39;hardi-lr-superiorfrontal.trk&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">sft</span> <span class=\"o\">=</span> <span class=\"n\">load_tractogram</span><span class=\"p\">(</span><span class=\"n\">lr_superiorfrontal_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We then apply the obtained deformation field to the streamlines. Note that the\nprocess can be sensitive to image orientation and voxel resolution. Thus, we\nfirst apply the non-rigid warping and simultaneously apply a computed rigid\naffine transformation whose extents must be corrected to account for the\ndifferent voxel grids of the moving and static images.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">deform_streamlines</span>\n\n<span class=\"c1\"># Create an isocentered affine</span>\n<span class=\"n\">target_isocenter</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"n\">vox_size</span><span class=\"p\">,</span> <span class=\"n\">vox_size</span><span class=\"p\">,</span> <span class=\"n\">vox_size</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># Take the off-origin affine capturing the extent contrast between the mean b0</span>\n<span class=\"c1\"># image and the template</span>\n<span class=\"n\">origin_affine</span> <span class=\"o\">=</span> <span class=\"n\">affine_map</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>In order to align the FOV of the template and the mirror image of the\nstreamlines, we first need to flip the sign on the x-offset and y-offset so\nthat we get the mirror image of the forward deformation field.</p>\n<p>We need to use the information about the origin offsets (i.e. between the\nstatic and moving images) that we obtained using <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">transform_origins()</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">transform_origins()</span></code> returns this affine transformation with (1, 1, 1)\nzooms and not (2, 2, 2), which means that the offsets need to be scaled by 2.\nThus, we scale z by the voxel size:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">vox_size</span>\n</pre></div>\n</div>\n<p>But when scaling the z-offset, we are also implicitly scaling the y-offset as\nwell (by 1/2).Thus we need to correct for this by only scaling the y by the\nsquare of the voxel size (1/4, and not 1/2):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">origin_affine</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">vox_size</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"c1\"># Apply the deformation and correct for the extents</span>\n<span class=\"n\">mni_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">deform_streamlines</span><span class=\"p\">(</span>\n    <span class=\"n\">sft</span><span class=\"o\">.</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">deform_field</span><span class=\"o\">=</span><span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">get_forward_field</span><span class=\"p\">(),</span>\n    <span class=\"n\">stream_to_current_grid</span><span class=\"o\">=</span><span class=\"n\">target_isocenter</span><span class=\"p\">,</span>\n    <span class=\"n\">current_grid_to_world</span><span class=\"o\">=</span><span class=\"n\">origin_affine</span><span class=\"p\">,</span> <span class=\"n\">stream_to_ref_grid</span><span class=\"o\">=</span><span class=\"n\">target_isocenter</span><span class=\"p\">,</span>\n    <span class=\"n\">ref_grid_to_world</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>We display the original streamlines and the registered streamlines:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">has_fury</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">show_template_bundles</span><span class=\"p\">(</span><span class=\"n\">bundles</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n    <span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n    <span class=\"n\">template_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"p\">)</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">template_actor</span><span class=\"p\">)</span>\n\n    <span class=\"n\">lines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">bundles</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">orange</span><span class=\"p\">,</span>\n                                   <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">lines_actor</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">show</span><span class=\"p\">:</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">fname</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">has_fury</span><span class=\"p\">:</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">fury</span> <span class=\"kn\">import</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">window</span>\n\n    <span class=\"n\">show_template_bundles</span><span class=\"p\">(</span><span class=\"n\">mni_streamlines</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                          <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;streamlines_DSN_MNI.png&#39;</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    .. figure:: streamlines_DSN_MNI.png</span>\n<span class=\"sd\">       :align: center</span>\n\n<span class=\"sd\">       Streamlines before and after registration.</span>\n\n<span class=\"sd\">    The corpus callosum bundles have been deformed to adapt to the MNI</span>\n<span class=\"sd\">    template space.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_streamline_registration_004.png\" srcset=\"../../_images/sphx_glr_streamline_registration_004.png\" alt=\"streamline registration\" class = \"sphx-glr-single-img\"/><p>Finally, we save the registered streamlines:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.stateful_tractogram</span> <span class=\"kn\">import</span> <span class=\"n\">Space</span><span class=\"p\">,</span> <span class=\"n\">StatefulTractogram</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">save_tractogram</span>\n\n<span class=\"n\">sft</span> <span class=\"o\">=</span> <span class=\"n\">StatefulTractogram</span><span class=\"p\">(</span><span class=\"n\">mni_streamlines</span><span class=\"p\">,</span> <span class=\"n\">img_t2_mni</span><span class=\"p\">,</span> <span class=\"n\">Space</span><span class=\"o\">.</span><span class=\"n\">RASMM</span><span class=\"p\">)</span>\n\n<span class=\"n\">save_tractogram</span><span class=\"p\">(</span><span class=\"n\">sft</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mni-lr-superiorfrontal.trk&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_valid_check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"avants09\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Avants09</a><span class=\"fn-bracket\">]</span></span>\n<p>Avants, B. B., Epstein, C. L., Grossman, M., &amp; Gee, J. C. (2009).\nSymmetric Diffeomorphic Image Registration with Cross-Correlation:\nEvaluating Automated Labeling of Elderly and Neurodegenerative Brain, 12(1),\n26-41.</p>\n</div>\n<div class=\"citation\" id=\"avants11\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id3\">Avants11</a><span class=\"fn-bracket\">]</span></span>\n<p>Avants, B. B., Tustison, N., &amp; Song, G. (2011). Advanced\nNormalization Tools (ANTS), 1-35.</p>\n</div>\n<div class=\"citation\" id=\"greene17\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Greene17</a><span class=\"fn-bracket\">]</span></span>\n<p>Greene, C., Cieslak, M., &amp; Grafton, S. T. (2017). Effect of\ndifferent spatial normalization approaches on tractography and structural\nbrain networks. Network Neuroscience, 1-19.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  58.789 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-20-registration-streamline-registration-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/fc22d832b3fbe54ee66b1c2b3ebe86ae/streamline_registration.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">streamline_registration.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/3632358c349e3eec310ffe7b339eb24a/streamline_registration.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">streamline_registration.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/20_registration/affine_registration_3d", "Affine Registration in 3D", "N", "next"], ["examples_built/20_registration/affine_registration_masks", "Affine Registration with Masks", "P", "previous"]], "sourcename": "examples_built/20_registration/streamline_registration.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Applying image-based deformations to streamlines</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/20_registration/streamline_registration", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}