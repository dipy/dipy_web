{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Simulation"}], "prev": {"link": "../reconst_dsid_0/", "title": "DSI Deconvolution vs DSI"}, "next": {"link": "../simulate_multi_tensor/", "title": "MultiTensor Simulation"}, "title": "DKI MultiTensor Simulation", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-26-simulations-simulate-dki-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"dki-multitensor-simulation\">\n<span id=\"simulate-dki\"></span><span id=\"sphx-glr-examples-built-26-simulations-simulate-dki-py\"></span><h1>DKI MultiTensor Simulation<a class=\"headerlink\" href=\"#dki-multitensor-simulation\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>In this example we show how to simulate the Diffusion Kurtosis Imaging (DKI)\ndata of a single voxel. DKI captures information about the non-Gaussian\nproperties of water diffusion which is a consequence of the existence of tissue\nbarriers and compartments. In these simulations compartmental heterogeneity is\ntaken into account by modeling different compartments for the intra- and\nextra-cellular media of two populations of fibers. These simulations are\nperformed according to <a class=\"reference internal\" href=\"#rnh2015\" id=\"id1\"><span>[RNH2015]</span></a>.</p>\n<p>We first import all relevant modules.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">multi_tensor_dki</span><span class=\"p\">,</span> <span class=\"n\">single_tensor</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">decompose_tensor</span><span class=\"p\">,</span> <span class=\"n\">from_lower_triangular</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For the simulation we will need a GradientTable with the b-values and\nb-vectors. Here we use the GradientTable of the sample <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">DIPY_</span></a> dataset\n<code class=\"docutils literal notranslate\"><span class=\"pre\">small_64D</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fimg</span><span class=\"p\">,</span> <span class=\"n\">fbvals</span><span class=\"p\">,</span> <span class=\"n\">fbvecs</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;small_64D&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">fbvals</span><span class=\"p\">,</span> <span class=\"n\">fbvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>DKI requires data from more than one non-zero b-value. Since the dataset\n<code class=\"docutils literal notranslate\"><span class=\"pre\">small_64D</span></code> was acquired with one non-zero b-value we artificially produce a\nsecond non-zero b-value.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvals</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">bvecs</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The b-values and gradient directions are then converted to DIPY\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code> format.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">mevals</span></code> we save the eigenvalues of each tensor. To simulate crossing\nfibers with two different media (representing intra and extra-cellular media),\na total of four components have to be taken in to account (i.e. the first two\ncompartments correspond to the intra and extra cellular media for the first\nfiber population while the others correspond to the media of the second fiber\npopulation)</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mevals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.00099</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.00226</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.00099</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.00226</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">]])</span>\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">angles</span></code> we save in polar coordinates (<span class=\"math notranslate nohighlight\">\\(\\theta, \\phi\\)</span>) the principal\naxis of each compartment tensor. To simulate crossing fibers at 70:math:<cite>^{circ}</cite>\nthe compartments of the first fiber are aligned to the X-axis while the\ncompartments of the second fiber are aligned to the X-Z plane with an angular\ndeviation of 70:math:<cite>^{circ}</cite> from the first one.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">fractions</span></code> we save the percentage of the contribution of each\ncompartment, which is computed by multiplying the percentage of contribution\nof each fiber population and the water fraction of each different medium</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fie</span> <span class=\"o\">=</span> <span class=\"mf\">0.49</span>  <span class=\"c1\"># intra-axonal water fraction</span>\n<span class=\"n\">fractions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fie</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">fie</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">fie</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">fie</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Having defined the parameters for all tissue compartments, the elements of the\ndiffusion tensor (DT), the elements of the kurtosis tensor (KT) and the DW\nsignals simulated from the DKI model can be obtain using the function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">multi_tensor_dki</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">signal_dki</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">kt</span> <span class=\"o\">=</span> <span class=\"n\">multi_tensor_dki</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">mevals</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"n\">angles</span><span class=\"p\">,</span>\n                                      <span class=\"n\">fractions</span><span class=\"o\">=</span><span class=\"n\">fractions</span><span class=\"p\">,</span> <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can also add Rician noise with a specific SNR.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">signal_noisy</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">kt</span> <span class=\"o\">=</span> <span class=\"n\">multi_tensor_dki</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">mevals</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                                        <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">fractions</span><span class=\"o\">=</span><span class=\"n\">fractions</span><span class=\"p\">,</span>\n                                        <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For comparison purposes, we also compute the DW signal if only the diffusion\ntensor components are taken into account. For this we use DIPY\u2019s function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">single_tensor</span></code> which requires that dt is decomposed into its eigenvalues and\neigenvectors.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dt_evals</span><span class=\"p\">,</span> <span class=\"n\">dt_evecs</span> <span class=\"o\">=</span> <span class=\"n\">decompose_tensor</span><span class=\"p\">(</span><span class=\"n\">from_lower_triangular</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">))</span>\n<span class=\"n\">signal_dti</span> <span class=\"o\">=</span> <span class=\"n\">single_tensor</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">evals</span><span class=\"o\">=</span><span class=\"n\">dt_evals</span><span class=\"p\">,</span> <span class=\"n\">evecs</span><span class=\"o\">=</span><span class=\"n\">dt_evecs</span><span class=\"p\">,</span>\n                           <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Finally, we can visualize the values of the different version of simulated\nsignals for all assumed gradient directions and bvalues.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">signal_dti</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;noiseless dti&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">signal_dki</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;noiseless dki&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">signal_noisy</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;with noise&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;simulated_dki_signal.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_simulate_dki_001.png\" srcset=\"../../_images/sphx_glr_simulate_dki_001.png\" alt=\"simulate dki\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id2\">\n<img alt=\"examples_built/26_simulations/simulated_dki_signal.png\" src=\"examples_built/26_simulations/simulated_dki_signal.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Simulated signals obtain from the DTI and DKI models.</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Non-Gaussian diffusion properties in tissues are responsible to smaller signal\nattenuation for larger bvalues when compared to signal attenuation from free\nGaussian water diffusion. This feature can be shown from the figure above,\nsince signals simulated from the DKI models reveals larger DW signal\nintensities than the signals obtained only from the diffusion tensor\ncomponents.</p>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rnh2015\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">RNH2015</a><span class=\"fn-bracket\">]</span></span>\n<p>R. Neto Henriques et al., \u201cExploring the 3D geometry of the\ndiffusion kurtosis tensor - Impact on the development of robust tractography\nprocedures and novel biomarkers\u201d, NeuroImage (2015) 111, 85-99.</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  0.085 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-26-simulations-simulate-dki-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/2e7c4e76983717f0ba027d4d8ccd590f/simulate_dki.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">simulate_dki.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/0b224784f6e656d4d8f7813191983904/simulate_dki.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">simulate_dki.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/26_simulations/simulate_multi_tensor", "MultiTensor Simulation", "N", "next"], ["examples_built/26_simulations/reconst_dsid_0", "DSI Deconvolution vs DSI", "P", "previous"]], "sourcename": "examples_built/26_simulations/simulate_dki.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">DKI MultiTensor Simulation</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/26_simulations/simulate_dki", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}