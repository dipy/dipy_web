{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Fiber Tracking"}], "prev": {"link": "../tracking_rumba/", "title": "Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)"}, "next": {"link": "../tracking_bootstrap_peaks/", "title": "Bootstrap and Closest Peak Direction Getters Example"}, "title": "Tracking with the Sparse Fascicle Model", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-13-fiber-tracking-tracking-sfm-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"tracking-with-the-sparse-fascicle-model\">\n<span id=\"sfm-track\"></span><span id=\"sphx-glr-examples-built-13-fiber-tracking-tracking-sfm-py\"></span><h1>Tracking with the Sparse Fascicle Model<a class=\"headerlink\" href=\"#tracking-with-the-sparse-fascicle-model\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Tracking requires a per-voxel model. Here, the model is the Sparse Fascicle\nModel (SFM), described in <a class=\"reference internal\" href=\"#rokem2015\" id=\"id1\"><span>[Rokem2015]</span></a>. This model reconstructs the diffusion\nsignal as a combination of the signals from different fascicles (see also\n<span class=\"xref std std-ref\">sfm-reconst</span>).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_sphere</span><span class=\"p\">,</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">load_nifti_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction.peaks</span> <span class=\"kn\">import</span> <span class=\"n\">peaks_from_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">save_trk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.stateful_tractogram</span> <span class=\"kn\">import</span> <span class=\"n\">Space</span><span class=\"p\">,</span> <span class=\"n\">StatefulTractogram</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"kn\">import</span> <span class=\"n\">auto_response_ssst</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst</span> <span class=\"kn\">import</span> <span class=\"n\">sfm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local_tracking</span> <span class=\"kn\">import</span> <span class=\"n\">LocalTracking</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">select_random_set_of_streamlines</span><span class=\"p\">,</span>\n                                      <span class=\"n\">transform_streamlines</span><span class=\"p\">,</span>\n                                      <span class=\"n\">Streamlines</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.stopping_criterion</span> <span class=\"kn\">import</span> <span class=\"n\">ThresholdStoppingCriterion</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">,</span> <span class=\"n\">has_fury</span>\n<span class=\"kn\">from</span> <span class=\"nn\">numpy.linalg</span> <span class=\"kn\">import</span> <span class=\"n\">inv</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<p>To begin, we read the Stanford HARDI data set into memory:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_labels&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">label_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This data set provides a label map (generated using <a class=\"reference external\" href=\"https://surfer.nmr.mgh.harvard.edu/\">FreeSurfer</a>), in which the white matter voxels are\nlabeled as either 1 or 2:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The first step in tracking is generating a model from which tracking directions\ncan be extracted in every voxel.</p>\n<p>For the SFM, this requires first that we define a canonical response function\nthat will be used to deconvolve the signal in every voxel</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We initialize an SFM model object, using this response function and using the\ndefault sphere (362  vertices, symmetrically distributed on the surface of the\nsphere):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">()</span>\n<span class=\"n\">sf_model</span> <span class=\"o\">=</span> <span class=\"n\">sfm</span><span class=\"o\">.</span><span class=\"n\">SparseFascicleModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                   <span class=\"n\">l1_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span>\n                                   <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>We fit this model to the data in each voxel in the white-matter mask, so that\nwe can use these directions in tracking:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pnm</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">sf_model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                       <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">,</span>\n                       <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                       <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">,</span>\n                       <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                       <span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>A ThresholdStoppingCriterion object is used to segment the data to track only\nthrough areas in which the Generalized Fractional Anisotropy (GFA) is\nsufficiently high.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">stopping_criterion</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdStoppingCriterion</span><span class=\"p\">(</span><span class=\"n\">pnm</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"mf\">.25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Tracking will be started from a set of seeds evenly distributed in the white\nmatter:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">white_matter</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>For the sake of brevity, we will take only the first 1000 seeds, generating\nonly 1000 streamlines. Remove this line to track from many more points in all\nof the white matter</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">seeds</span><span class=\"p\">[:</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We now have the necessary components to construct a tracking pipeline and\nexecute the tracking</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">pnm</span><span class=\"p\">,</span> <span class=\"n\">stopping_criterion</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n                                     <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">streamline_generator</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we will create a visualization of these streamlines, relative to this\nsubject\u2019s T1-weighted anatomy:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">t1_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_t1&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">t1_data</span><span class=\"p\">,</span> <span class=\"n\">t1_aff</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">t1_fname</span><span class=\"p\">)</span>\n<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To speed up visualization, we will select a random sub-set of streamlines to\ndisplay. This is particularly important, if you track from seeds throughout the\nentire white matter, generating many streamlines. In this case, for\ndemonstration purposes, we select a subset of 900 streamlines.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">plot_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">select_random_set_of_streamlines</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">has_fury</span><span class=\"p\">:</span>\n    <span class=\"n\">streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span>\n        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">transform_streamlines</span><span class=\"p\">(</span><span class=\"n\">plot_streamlines</span><span class=\"p\">,</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">t1_aff</span><span class=\"p\">))),</span>\n        <span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">),</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">vol_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">)</span>\n\n    <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">vol_actor2</span> <span class=\"o\">=</span> <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">vol_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">)</span>\n\n    <span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">streamlines_actor</span><span class=\"p\">)</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor2</span><span class=\"p\">)</span>\n\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;tractogram_sfm.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_tracking_sfm_001.png\" srcset=\"../../_images/sphx_glr_tracking_sfm_001.png\" alt=\"tracking sfm\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id2\">\n<img alt=\"examples_built/13_fiber_tracking/tractogram_sfm.png\" src=\"examples_built/13_fiber_tracking/tractogram_sfm.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>Sparse Fascicle Model tracks</strong></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Finally, we can save these streamlines to a \u2018trk\u2019 file, for use in other\nsoftware, or for further analysis.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sft</span> <span class=\"o\">=</span> <span class=\"n\">StatefulTractogram</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">Space</span><span class=\"o\">.</span><span class=\"n\">RASMM</span><span class=\"p\">)</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"n\">sft</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tractogram_sfm_detr.trk&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rokem2015\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">Rokem2015</a><span class=\"fn-bracket\">]</span></span>\n<p>Ariel Rokem, Jason D. Yeatman, Franco Pestilli, Kendrick\nN. Kay, Aviv Mezer, Stefan van der Walt, Brian A. Wandell (2015). Evaluating\nthe accuracy of diffusion MRI models in white matter. PLoS ONE 10(4):\ne0123272. doi:10.1371/journal.pone.0123272</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 59 minutes  7.644 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-13-fiber-tracking-tracking-sfm-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/57e49affc6a0ad867f23bdb6c1620108/tracking_sfm.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">tracking_sfm.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/b8b40b7dfaada31b70fcc4a4fd1ed2bc/tracking_sfm.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">tracking_sfm.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/13_fiber_tracking/tracking_bootstrap_peaks", "Bootstrap and Closest Peak Direction Getters Example", "N", "next"], ["examples_built/13_fiber_tracking/tracking_rumba", "Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)", "P", "previous"]], "sourcename": "examples_built/13_fiber_tracking/tracking_sfm.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Tracking with the Sparse Fascicle Model</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/13_fiber_tracking/tracking_sfm", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}