{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Fiber Tracking"}], "prev": {"link": "../tracking_ptt/", "title": "Parallel Transport Tractography"}, "next": {"link": "../tracking_sfm/", "title": "Tracking with the Sparse Fascicle Model"}, "title": "Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-13-fiber-tracking-tracking-rumba-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"tracking-with-robust-unbiased-model-based-spherical-deconvolution-rumba-sd\">\n<span id=\"sphx-glr-examples-built-13-fiber-tracking-tracking-rumba-py\"></span><h1>Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)<a class=\"headerlink\" href=\"#tracking-with-robust-unbiased-model-based-spherical-deconvolution-rumba-sd\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Here, we demonstrate fiber tracking using a probabilistic direction getter\nand RUMBA-SD, a model introduced in <a class=\"reference internal\" href=\"#canalesrodriguez2015\" id=\"id1\"><span>[CanalesRodriguez2015]</span></a>. This model adapts\nRichardson-Lucy deconvolution by assuming Rician or Noncentral Chi noise\ninstead of Gaussian, which more accurately reflects the noise from MRI\nscanners (see also <span class=\"xref std std-ref\">example_reconst_rumba</span>). This tracking tutorial is an\nextension on <span class=\"xref std std-ref\">example_tracking_probabilistic</span>.</p>\n<p>We start by loading sample data and identifying a fiber response function.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">numpy.linalg</span> <span class=\"kn\">import</span> <span class=\"n\">inv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">small_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">load_nifti_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"kn\">import</span> <span class=\"n\">auto_response_ssst</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local_tracking</span> <span class=\"kn\">import</span> <span class=\"n\">LocalTracking</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">Streamlines</span><span class=\"p\">,</span> <span class=\"n\">transform_streamlines</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.stopping_criterion</span> <span class=\"kn\">import</span> <span class=\"n\">ThresholdStoppingCriterion</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">colormap</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.rumba</span> <span class=\"kn\">import</span> <span class=\"n\">RumbaSDModel</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_labels&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">t1_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_t1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">label_fname</span><span class=\"p\">)</span>\n<span class=\"n\">t1_data</span><span class=\"p\">,</span> <span class=\"n\">t1_aff</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">t1_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"n\">seed_mask</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">small_sphere</span>\n</pre></div>\n</div>\n<p>We can now initialize a <cite>RumbaSdModel</cite> model and fit it globally by setting\n<cite>voxelwise</cite> to <cite>False</cite>. For this example, TV regularization (<cite>use_tv</cite>) will be\nturned off for efficiency, although its usage can provide more coherent results\nin fiber tracking. The fit will take about 5 minutes to complete.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rumba</span> <span class=\"o\">=</span> <span class=\"n\">RumbaSDModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">wm_response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">n_iter</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                     <span class=\"n\">voxelwise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_tv</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n<span class=\"n\">rumba_fit</span> <span class=\"o\">=</span> <span class=\"n\">rumba</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n<span class=\"n\">odf</span> <span class=\"o\">=</span> <span class=\"n\">rumba_fit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">()</span>  <span class=\"c1\"># fODF</span>\n<span class=\"n\">f_wm</span> <span class=\"o\">=</span> <span class=\"n\">rumba_fit</span><span class=\"o\">.</span><span class=\"n\">f_wm</span>  <span class=\"c1\"># white matter volume fractions</span>\n</pre></div>\n</div>\n<p>To establish stopping criterion, a common technique is to use the Generalized\nFractional Anisotropy (GFA). One point of caution is that RUMBA-SD by default\nseparates the fODF from an isotropic compartment. This can bias GFA results\ncomputed on the fODF, although it will still generally be an effective\ncriterion.</p>\n<p>However, an alternative stopping criterion that takes advantage of this\nfeature is to use RUMBA-SD\u2019s white matter volume fraction map.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">stopping_criterion</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdStoppingCriterion</span><span class=\"p\">(</span><span class=\"n\">f_wm</span><span class=\"p\">,</span> <span class=\"mf\">.25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can visualize a slice of this mask.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">sli</span> <span class=\"o\">=</span> <span class=\"n\">f_wm</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">f_wm</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">((</span><span class=\"n\">f_wm</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.25</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;f_wm_tracking_mask.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_tracking_rumba_001.png\" srcset=\"../../_images/sphx_glr_tracking_rumba_001.png\" alt=\"tracking rumba\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id2\">\n<img alt=\"examples_built/13_fiber_tracking/f_wm_tracking_mask.png\" src=\"examples_built/13_fiber_tracking/f_wm_tracking_mask.png\" />\n<figcaption>\n<p><span class=\"caption-text\">White matter volume fraction slice</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>These discrete fODFs can be used as a PMF in the <cite>ProbabilisticDirectionGetter</cite>\nfor sampling tracking directions. The PMF must be strictly non-negative;\nRUMBA-SD already adheres to this constraint so no further manipulation of the\nfODFs is necessary.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"kn\">import</span> <span class=\"n\">ProbabilisticDirectionGetter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.stateful_tractogram</span> <span class=\"kn\">import</span> <span class=\"n\">Space</span><span class=\"p\">,</span> <span class=\"n\">StatefulTractogram</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">save_trk</span>\n\n<span class=\"n\">prob_dg</span> <span class=\"o\">=</span> <span class=\"n\">ProbabilisticDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_pmf</span><span class=\"p\">(</span><span class=\"n\">odf</span><span class=\"p\">,</span> <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                                <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n<span class=\"n\">streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">prob_dg</span><span class=\"p\">,</span> <span class=\"n\">stopping_criterion</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span>\n                                     <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">streamline_generator</span><span class=\"p\">)</span>\n\n<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">transform_streamlines</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">t1_aff</span><span class=\"p\">))),</span>\n    <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">)</span>\n<span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">vol_actor2</span> <span class=\"o\">=</span> <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">vol_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor2</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">streamlines_actor</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;tractogram_probabilistic_rumba.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n\n<span class=\"n\">sft</span> <span class=\"o\">=</span> <span class=\"n\">StatefulTractogram</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">Space</span><span class=\"o\">.</span><span class=\"n\">RASMM</span><span class=\"p\">)</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"n\">sft</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tractogram_probabilistic_rumba.trk&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_tracking_rumba_002.png\" srcset=\"../../_images/sphx_glr_tracking_rumba_002.png\" alt=\"tracking rumba\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id3\">\n<img alt=\"examples_built/13_fiber_tracking/tractogram_probabilistic_rumba.png\" src=\"examples_built/13_fiber_tracking/tractogram_probabilistic_rumba.png\" />\n<figcaption>\n<p><span class=\"caption-text\">RUMBA-SD tractogram</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"canalesrodriguez2015\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">CanalesRodriguez2015</a><span class=\"fn-bracket\">]</span></span>\n<p>Canales-Rodr\u00edguez, E. J., Daducci, A., Sotiropoulos,\nS. N., Caruyer, E., Aja-Fern\u00e1ndez, S., Radua, J., Mendizabal, J. M. Y.,\nIturria-Medina, Y., Melie-Garc\u00eda, L., Alem\u00e1n-G\u00f3mez, Y., Thiran, J.-P.,\nSarr\u00f3, S., Pomarol-Clotet, E., &amp; Salvador, R. (2015). Spherical\nDeconvolution of Multichannel Diffusion MRI Data with Non-Gaussian Noise\nModels and Spatial Regularization. PLOS ONE, 10(10), e0138910.\n<a class=\"reference external\" href=\"https://doi.org/10.1371/journal.pone.0138910\">https://doi.org/10.1371/journal.pone.0138910</a></p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  54.652 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-13-fiber-tracking-tracking-rumba-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/656703e790ba542388741c41eb72b999/tracking_rumba.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">tracking_rumba.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/d3c50c271ec67664607eb9d1b1464402/tracking_rumba.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">tracking_rumba.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/13_fiber_tracking/tracking_sfm", "Tracking with the Sparse Fascicle Model", "N", "next"], ["examples_built/13_fiber_tracking/tracking_ptt", "Parallel Transport Tractography", "P", "previous"]], "sourcename": "examples_built/13_fiber_tracking/tracking_rumba.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/13_fiber_tracking/tracking_rumba", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}