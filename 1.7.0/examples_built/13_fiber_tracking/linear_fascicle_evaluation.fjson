{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Fiber Tracking"}], "prev": {"link": "../tracking_pft/", "title": "Particle Filtering Tractography"}, "next": {"link": "../tracking_stopping_criterion/", "title": "Using Various Stopping Criterion for Tractography"}, "title": "Linear fascicle evaluation (LiFE)", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-13-fiber-tracking-linear-fascicle-evaluation-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"linear-fascicle-evaluation-life\">\n<span id=\"sphx-glr-examples-built-13-fiber-tracking-linear-fascicle-evaluation-py\"></span><h1>Linear fascicle evaluation (LiFE)<a class=\"headerlink\" href=\"#linear-fascicle-evaluation-life\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Evaluating the results of tractography algorithms is one of the biggest\nchallenges for diffusion MRI. One proposal for evaluation of tractography\nresults is to use a forward model that predicts the signal from each of a set\nof streamlines, and then fit a linear model to these simultaneous predictions\n<a class=\"reference internal\" href=\"#pestilli2014\" id=\"id1\"><span>[Pestilli2014]</span></a>.</p>\n<p>We will use streamlines generated using probabilistic tracking on CSA\npeaks. For brevity, we will include in this example only streamlines going\nthrough the corpus callosum connecting left to right superior frontal\ncortex. The process of tracking and finding these streamlines is fully\ndemonstrated in the <a class=\"reference internal\" href=\"../../17_streamline_analysis/streamline_tools/#streamline-tools\"><span class=\"std std-ref\">Connectivity Matrices, ROI Intersections and Density Maps</span></a> example. If this example has been\nrun, we can read the streamlines from file. Otherwise, we\u2019ll run that example\nfirst, by importing it. This provides us with all of the variables that were\ncreated in that example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">join</span> <span class=\"k\">as</span> <span class=\"n\">pjoin</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpl_toolkits.axes_grid1</span> <span class=\"kn\">import</span> <span class=\"n\">AxesGrid</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.core.optimize</span> <span class=\"k\">as</span> <span class=\"nn\">opt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_stanford_tracks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">load_trk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.tracking.life</span> <span class=\"k\">as</span> <span class=\"nn\">life</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">colormap</span> <span class=\"k\">as</span> <span class=\"n\">cmap</span>\n\n    <span class=\"c1\"># We&#39;ll need to know where the corpus callosum is from these variables:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">,</span> <span class=\"n\">load_nifti</span>\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_labels&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">t1_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_t1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">label_fname</span><span class=\"p\">)</span>\n<span class=\"n\">t1_data</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">t1_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"n\">cc_slice</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Let&#39;s now fetch a set of streamlines from the Stanford HARDI dataset.</span>\n<span class=\"c1\"># Those streamlines were generated during the :ref:`streamline_tools` example.</span>\n<span class=\"c1\"># Read the candidates from file in voxel space:</span>\n\n<span class=\"n\">streamlines_files</span> <span class=\"o\">=</span> <span class=\"n\">fetch_stanford_tracks</span><span class=\"p\">()</span>\n<span class=\"n\">lr_superiorfrontal_path</span> <span class=\"o\">=</span> <span class=\"n\">pjoin</span><span class=\"p\">(</span><span class=\"n\">streamlines_files</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                                <span class=\"s1\">&#39;hardi-lr-superiorfrontal.trk&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">candidate_sl_sft</span> <span class=\"o\">=</span> <span class=\"n\">load_trk</span><span class=\"p\">(</span><span class=\"n\">lr_superiorfrontal_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">candidate_sl_sft</span><span class=\"o\">.</span><span class=\"n\">to_vox</span><span class=\"p\">()</span>\n<span class=\"n\">candidate_sl</span> <span class=\"o\">=</span> <span class=\"n\">candidate_sl_sft</span><span class=\"o\">.</span><span class=\"n\">streamlines</span>\n</pre></div>\n</div>\n<p>The streamlines that are entered into the model are termed \u2018candidate\nstreamlines\u2019 (or a \u2018candidate connectome\u2019):</p>\n<p>Let\u2019s visualize the initial candidate group of streamlines in 3D, relative to\nthe anatomical structure of this brain:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">candidate_streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">candidate_sl</span><span class=\"p\">,</span>\n                                               <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">candidate_sl</span><span class=\"p\">))</span>\n<span class=\"n\">cc_ROI_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">contour_from_roi</span><span class=\"p\">(</span><span class=\"n\">cc_slice</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">),</span>\n                                      <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">vol_actor2</span> <span class=\"o\">=</span> <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">vol_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add display objects to canvas</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">candidate_streamlines_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">cc_ROI_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor2</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n              <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;life_candidates.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_linear_fascicle_evaluation_001.png\" srcset=\"../../_images/sphx_glr_linear_fascicle_evaluation_001.png\" alt=\"linear fascicle evaluation\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id3\">\n<img alt=\"examples_built/13_fiber_tracking/life_candidates.png\" src=\"examples_built/13_fiber_tracking/life_candidates.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>Candidate connectome before life optimization</strong></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Next, we initialize a LiFE model. We import the <code class=\"docutils literal notranslate\"><span class=\"pre\">dipy.tracking.life</span></code> module,\nwhich contains the classes and functions that implement the model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fiber_model</span> <span class=\"o\">=</span> <span class=\"n\">life</span><span class=\"o\">.</span><span class=\"n\">FiberModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Since we read the streamlines from a file, already in the voxel space, we do\nnot need to transform them into this space. Otherwise, if the streamline\ncoordinates were in the world space (relative to the scanner iso-center, or\nrelative to the mid-point of the AC-PC-connecting line), we would use this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">inv_affine</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>the inverse transformation from world space to the voxel space as the affine\nfor the following model fit.</p>\n<p>The next step is to fit the model, producing a <code class=\"docutils literal notranslate\"><span class=\"pre\">FiberFit</span></code> class instance,\nthat stores the data, as well as the results of the fitting procedure.</p>\n<p>The LiFE model posits that the signal in the diffusion MRI volume can be\nexplained by the streamlines, by the equation</p>\n<div class=\"math notranslate nohighlight\">\n\\[y = X\\beta\\]</div>\n<p>Where <span class=\"math notranslate nohighlight\">\\(y\\)</span> is the diffusion MRI signal, <span class=\"math notranslate nohighlight\">\\(\\beta\\)</span> are a set of weights on the\nstreamlines and <span class=\"math notranslate nohighlight\">\\(X\\)</span> is a design matrix. This matrix has the dimensions <span class=\"math notranslate nohighlight\">\\(m\\)</span> by\n<span class=\"math notranslate nohighlight\">\\(n\\)</span>, where <span class=\"math notranslate nohighlight\">\\(m=n_{voxels} \\cdot n_{directions}\\)</span>, and <span class=\"math notranslate nohighlight\">\\(n_{voxels}\\)</span> is the set of\nvoxels in the ROI that contains the streamlines considered in this model. The\n<span class=\"math notranslate nohighlight\">\\(i^{th}\\)</span> column of the matrix contains the expected contributions of the\n<span class=\"math notranslate nohighlight\">\\(i^{th}\\)</span> streamline (arbitrarily ordered) to each of the voxels. <span class=\"math notranslate nohighlight\">\\(X\\)</span> is a\nsparse matrix, because each streamline traverses only a small percentage of the\nvoxels. The  expected contributions of the streamline are calculated using a\nforward model, where each node of the streamline is modeled as a cylindrical\nfiber compartment with Gaussian diffusion, using the diffusion tensor model.\nSee <a class=\"reference internal\" href=\"#pestilli2014\" id=\"id2\"><span>[Pestilli2014]</span></a> for more detail on the model, and variations of this model.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fiber_fit</span> <span class=\"o\">=</span> <span class=\"n\">fiber_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">candidate_sl</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">FiberFit</span></code> class instance holds various properties of the model fit. For\nexample, it has the weights <span class=\"math notranslate nohighlight\">\\(\\beta\\)</span>, that are assigned to each streamline. In\nmost cases, a tractography through some region will include redundant\nstreamlines, and these streamlines will have <span class=\"math notranslate nohighlight\">\\(\\beta_i\\)</span> that are 0.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">histtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;step&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fiber weights&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;# fibers&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;beta_histogram.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_linear_fascicle_evaluation_002.png\" srcset=\"../../_images/sphx_glr_linear_fascicle_evaluation_002.png\" alt=\"linear fascicle evaluation\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id4\">\n<img alt=\"examples_built/13_fiber_tracking/beta_histogram.png\" src=\"examples_built/13_fiber_tracking/beta_histogram.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>LiFE streamline weights</strong></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>We use <span class=\"math notranslate nohighlight\">\\(\\beta\\)</span> to filter out these redundant streamlines, and generate an\noptimized group of streamlines:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">optimized_sl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">row_stack</span><span class=\"p\">(</span><span class=\"n\">candidate_sl</span><span class=\"p\">)[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">beta</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]]]</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">optimized_sl</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">optimized_sl</span><span class=\"p\">)))</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">cc_ROI_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;life_optimized.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_linear_fascicle_evaluation_003.png\" srcset=\"../../_images/sphx_glr_linear_fascicle_evaluation_003.png\" alt=\"linear fascicle evaluation\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id5\">\n<img alt=\"examples_built/13_fiber_tracking/life_optimized.png\" src=\"examples_built/13_fiber_tracking/life_optimized.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>Streamlines selected via LiFE optimization</strong></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>The new set of streamlines should do well in fitting the data, and redundant\nstreamlines have presumably been removed (in this case, about 50% of the\nstreamlines).</p>\n<p>But how well does the model do in explaining the diffusion data? We can\nquantify that: the <code class=\"docutils literal notranslate\"><span class=\"pre\">FiberFit</span></code> class instance has a <cite>predict</cite> method, which\ncan be used to invert the model and predict back either the data that was used\nto fit the model, or other unseen data (e.g. in cross-validation, see\n<span class=\"xref std std-ref\">kfold_xval</span>).</p>\n<p>Without arguments, the <code class=\"docutils literal notranslate\"><span class=\"pre\">.predict()</span></code> method will predict the diffusion signal\nfor the same gradient table that was used in the fit data, but <code class=\"docutils literal notranslate\"><span class=\"pre\">gtab</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">S0</span></code> keyword arguments can be used to predict for other acquisition schemes\nand other baseline non-diffusion-weighted signals.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">model_predict</span> <span class=\"o\">=</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We will focus on the error in prediction of the diffusion-weighted data, and\ncalculate the root of the mean squared error.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">model_error</span> <span class=\"o\">=</span> <span class=\"n\">model_predict</span> <span class=\"o\">-</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">model_rmse</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">model_error</span><span class=\"p\">[:,</span> <span class=\"mi\">10</span><span class=\"p\">:]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>As a baseline against which we can compare, we calculate another error term. In\nthis case, we assume that the weight for each streamline is equal\nto zero. This produces the naive prediction of the mean of the signal in each\nvoxel.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">beta_baseline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">beta</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">pred_weighted</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">spdot</span><span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">life_matrix</span><span class=\"p\">,</span> <span class=\"n\">beta_baseline</span><span class=\"p\">),</span>\n                           <span class=\"p\">(</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">)))</span>\n<span class=\"n\">mean_pred</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvals</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">S0</span> <span class=\"o\">=</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">b0_signal</span>\n</pre></div>\n</div>\n<p>Since the fitting is done in the demeaned S/S0 domain, we need\nto add back the mean and then multiply by S0 in every voxel:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean_pred</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">S0</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"n\">mean_pred</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">b0s_mask</span><span class=\"p\">]</span> <span class=\"o\">=</span>\\\n    <span class=\"p\">(</span><span class=\"n\">pred_weighted</span> <span class=\"o\">+</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">mean_signal</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">S0</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"n\">mean_error</span> <span class=\"o\">=</span> <span class=\"n\">mean_pred</span> <span class=\"o\">-</span> <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">mean_rmse</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">mean_error</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>First, we can compare the overall distribution of errors between these two\nalternative models of the ROI. We show the distribution of differences in error\n(improvement through model fitting, relative to the baseline model). Here,\npositive values denote an improvement in error with model fit, relative to\nwithout the model fit.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">mean_rmse</span> <span class=\"o\">-</span> <span class=\"n\">model_rmse</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">histtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;step&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Median RMSE, mean model: </span><span class=\"si\">%.2f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">(</span><span class=\"n\">mean_rmse</span><span class=\"p\">),</span>\n        <span class=\"n\">horizontalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">verticalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">transAxes</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Median RMSE, LiFE: </span><span class=\"si\">%.2f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">(</span><span class=\"n\">model_rmse</span><span class=\"p\">),</span>\n        <span class=\"n\">horizontalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">verticalalignment</span><span class=\"o\">=</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">transAxes</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;RMS Error&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;# voxels&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;error_histograms.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_linear_fascicle_evaluation_004.png\" srcset=\"../../_images/sphx_glr_linear_fascicle_evaluation_004.png\" alt=\"linear fascicle evaluation\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id6\">\n<img alt=\"examples_built/13_fiber_tracking/error_histograms.png\" src=\"examples_built/13_fiber_tracking/error_histograms.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Improvement in error with fitting of the LiFE model.</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Second, we can show the spatial distribution of the two error terms,\nand of the improvement with the model fit:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">vol_model</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">vol_model</span><span class=\"p\">[</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n          <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n          <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">model_rmse</span>\n<span class=\"n\">vol_mean</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">vol_mean</span><span class=\"p\">[</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n         <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">mean_rmse</span>\n<span class=\"n\">vol_improve</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"n\">vol_improve</span><span class=\"p\">[</span><span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"n\">fiber_fit</span><span class=\"o\">.</span><span class=\"n\">vox_coords</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">mean_rmse</span> <span class=\"o\">-</span> <span class=\"n\">model_rmse</span>\n<span class=\"n\">sl_idx</span> <span class=\"o\">=</span> <span class=\"mi\">49</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">subplots_adjust</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">AxesGrid</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span>\n              <span class=\"n\">nrows_ncols</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n              <span class=\"n\">label_mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">share_all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_location</span><span class=\"o\">=</span><span class=\"s2\">&quot;top&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;each&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;10%&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">cbar_pad</span><span class=\"o\">=</span><span class=\"s2\">&quot;5%&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">vol_model</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">hot</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">cbar_axes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">vol_mean</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">hot</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">cbar_axes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">vol_improve</span><span class=\"p\">[</span><span class=\"n\">sl_idx</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]),</span>\n                   <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">RdBu</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">cbar_axes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">lax</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"p\">:</span>\n    <span class=\"n\">lax</span><span class=\"o\">.</span><span class=\"n\">set_xticks</span><span class=\"p\">([])</span>\n    <span class=\"n\">lax</span><span class=\"o\">.</span><span class=\"n\">set_yticks</span><span class=\"p\">([])</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;spatial_errors.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_linear_fascicle_evaluation_005.png\" srcset=\"../../_images/sphx_glr_linear_fascicle_evaluation_005.png\" alt=\"linear fascicle evaluation\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id7\">\n<img alt=\"examples_built/13_fiber_tracking/spatial_errors.png\" src=\"examples_built/13_fiber_tracking/spatial_errors.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Spatial distribution of error and improvement.</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>This image demonstrates that in many places, fitting the LiFE model results in\nsubstantial reduction of the error.</p>\n<p>Note that for full-brain tractographies <em>LiFE</em> can require large amounts of\nmemory. For detailed memory profiling of the algorithm, based on the\nstreamlines generated in <span class=\"xref std std-ref\">example_probabilistic_fiber_tracking</span>, see <a class=\"reference external\" href=\"http://nbviewer.ipython.org/gist/arokem/bc29f34ebc97510d9def\">this\nIPython notebook</a>.</p>\n<p>For the Matlab implementation of LiFE, head over to <a class=\"reference external\" href=\"http://francopestilli.github.io/life/\">Franco Pestilli\u2019s github\nwebpage</a>.</p>\n<section id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"pestilli2014\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Pestilli2014<span class=\"fn-bracket\">]</span></span>\n<span class=\"backrefs\">(<a role=\"doc-backlink\" href=\"#id1\">1</a>,<a role=\"doc-backlink\" href=\"#id2\">2</a>)</span>\n<p>Pestilli, F., Yeatman, J, Rokem, A. Kay, K. and Wandell B.A.\n(2014). Validation and statistical inference in living connectomes. Nature\nMethods 11: 1058-1063. doi:10.1038/nmeth.3098</p>\n</div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  12.227 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-13-fiber-tracking-linear-fascicle-evaluation-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/bc76af93c02326263d3a030f77225dc0/linear_fascicle_evaluation.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">linear_fascicle_evaluation.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/46d25f37a054eed8e7664d8407535f62/linear_fascicle_evaluation.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">linear_fascicle_evaluation.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/13_fiber_tracking/tracking_stopping_criterion", "Using Various Stopping Criterion for Tractography", "N", "next"], ["examples_built/13_fiber_tracking/tracking_pft", "Particle Filtering Tractography", "P", "previous"]], "sourcename": "examples_built/13_fiber_tracking/linear_fascicle_evaluation.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Linear fascicle evaluation (LiFE)</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/13_fiber_tracking/linear_fascicle_evaluation", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}