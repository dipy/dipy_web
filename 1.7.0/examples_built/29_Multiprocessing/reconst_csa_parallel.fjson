{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Multiprocessing"}], "prev": {"link": "../", "title": "Multiprocessing"}, "next": {"link": "../reconst_csd_parallel/", "title": "Parallel reconstruction using CSD"}, "title": "Parallel reconstruction using Q-Ball", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-29-multiprocessing-reconst-csa-parallel-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"parallel-reconstruction-using-q-ball\">\n<span id=\"sphx-glr-examples-built-29-multiprocessing-reconst-csa-parallel-py\"></span><h1>Parallel reconstruction using Q-Ball<a class=\"headerlink\" href=\"#parallel-reconstruction-using-q-ball\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>We show an example of parallel reconstruction using a Q-Ball Constant Solid\nAngle model (see Aganj et al. (MRM 2010)) and <cite>peaks_from_model</cite>.</p>\n<p>Import modules, fetch and read data, and compute the mask.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"kn\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"kn\">import</span> <span class=\"n\">peaks_from_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"kn\">import</span> <span class=\"n\">median_otsu</span>\n\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                             <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We instantiate our CSA model with spherical harmonic order of 4</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csamodel</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><cite>Peaks_from_model</cite> is used to calculate properties of the ODFs (Orientation\nDistribution Function) and return for\nexample the peaks and their indices, or GFA which is similar to FA but for ODF\nbased models. This function mainly needs a reconstruction model, the data and a\nsphere as input. The sphere is an object that represents the spherical discrete\ngrid where the ODF values will be evaluated.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;repulsion724&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We will first run <cite>peaks_from_model</cite> using parallelism with 2 processes. If\n<cite>num_processes</cite> is None (default option) then this function will find the total\nnumber of processors from the operating system and use this number as\n<cite>num_processes</cite>. Sometimes it makes sense to use only a few of the processes in\norder to allow resources for other applications. However, most of the times\nusing the default option will be sufficient.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csapeaks_parallel</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                                     <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">maskdata</span><span class=\"p\">,</span>\n                                     <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                     <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">,</span>\n                                     <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                     <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                                     <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                     <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                     <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_parallel</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model using 2 processes ran in : &quot;</span> <span class=\"o\">+</span>\n      <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_parallel</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>peaks_from_model using 2 processes ran in : 164.9475257396698 seconds\n</pre></div>\n</div>\n<p>peaks_from_model using 2 process ran in  : 114.333221912 seconds, using 2\nprocess</p>\n<p>If we don\u2019t use parallelism then we need to set <cite>parallel=False</cite>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csapeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">maskdata</span><span class=\"p\">,</span>\n                            <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                            <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.5</span><span class=\"p\">,</span>\n                            <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                            <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                            <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_single</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model ran in : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>peaks_from_model ran in : 122.12185287475586 seconds\n</pre></div>\n</div>\n<p>peaks_from_model ran in : 196.872478008 seconds</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Speedup factor : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span> <span class=\"o\">/</span> <span class=\"n\">time_parallel</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Speedup factor : 0.7403678977731135\n</pre></div>\n</div>\n<p>Speedup factor : 1.72191839533</p>\n<p>In Windows if you get a runtime error about frozen executable please start\nyour script by adding your code above in a <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> function and use:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 4 minutes  50.025 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-29-multiprocessing-reconst-csa-parallel-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/f63695c3d4cc9095680a365764f9d231/reconst_csa_parallel.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_csa_parallel.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/f2a264568d2db448092ac6cac8a62e61/reconst_csa_parallel.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_csa_parallel.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/29_Multiprocessing/reconst_csd_parallel", "Parallel reconstruction using CSD", "N", "next"], ["examples_built/29_Multiprocessing/index", "Multiprocessing", "P", "previous"]], "sourcename": "examples_built/29_Multiprocessing/reconst_csa_parallel.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parallel reconstruction using Q-Ball</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/29_Multiprocessing/reconst_csa_parallel", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}