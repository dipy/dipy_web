{"parents": [{"link": "../../../documentation/", "title": "Documentation"}, {"link": "../../", "title": "Examples"}, {"link": "../", "title": "Streamlines Analysis and Connectivity"}], "prev": {"link": "../path_length_map/", "title": "Calculate Path Length Map"}, "next": {"link": "../../20_registration/", "title": "Registration"}, "title": "Connectivity Matrices, ROI Intersections and Density Maps", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-17-streamline-analysis-streamline-tools-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"connectivity-matrices-roi-intersections-and-density-maps\">\n<span id=\"streamline-tools\"></span><span id=\"sphx-glr-examples-built-17-streamline-analysis-streamline-tools-py\"></span><h1>Connectivity Matrices, ROI Intersections and Density Maps<a class=\"headerlink\" href=\"#connectivity-matrices-roi-intersections-and-density-maps\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>This example is meant to be an introduction to some of the streamline tools\navailable in <a href=\"#id7\"><span class=\"problematic\" id=\"id8\">DIPY_</span></a>. Some of the functions covered in this example are\n<code class=\"docutils literal notranslate\"><span class=\"pre\">target</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">connectivity_matrix</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">density_map</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">target</span></code> allows one\nto filter streamlines that either pass through or do not pass through some\nregion of the brain, <code class=\"docutils literal notranslate\"><span class=\"pre\">connectivity_matrix</span></code> groups and counts streamlines\nbased on where in the brain they begin and end, and finally, density map counts\nthe number of streamlines that pass through every voxel of some image.</p>\n<p>To get started we\u2019ll need to have a set of streamlines to work with. We\u2019ll use\nEuDX along with the CsaOdfModel to make some streamlines. Let\u2019s import the\nmodules and download the data we\u2019ll be using.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.ndimage</span> <span class=\"kn\">import</span> <span class=\"n\">binary_dilation</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">,</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">save_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"kn\">import</span> <span class=\"n\">peaks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst</span> <span class=\"kn\">import</span> <span class=\"n\">shm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local_tracking</span> <span class=\"kn\">import</span> <span class=\"n\">LocalTracking</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.stopping_criterion</span> <span class=\"kn\">import</span> <span class=\"n\">BinaryStoppingCriterion</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">Streamlines</span>\n\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_labels&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">t1_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_t1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">label_fname</span><span class=\"p\">)</span>\n<span class=\"n\">t1_data</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">t1_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We\u2019ve loaded an image called <code class=\"docutils literal notranslate\"><span class=\"pre\">labels_img</span></code> which is a map of tissue types such\nthat every integer value in the array <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code> represents an anatomical\nstructure or tissue type <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id1\" role=\"doc-noteref\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></a>. For this example, the image was created so that\nwhite matter voxels have values of either 1 or 2. We\u2019ll use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> to apply the <code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code> to each white matter voxel\nand estimate fiber orientations which we can use for tracking. We will also\ndilate this mask by 1 voxel to ensure streamlines reach the grey matter.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"n\">binary_dilation</span><span class=\"p\">((</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">csamodel</span> <span class=\"o\">=</span> <span class=\"n\">shm</span><span class=\"o\">.</span><span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csapeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                                  <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                  <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                  <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.8</span><span class=\"p\">,</span>\n                                  <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span>\n                                  <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we can use EuDX to track all of the white matter. To keep things reasonably\nfast we use <code class=\"docutils literal notranslate\"><span class=\"pre\">density=1</span></code> which will result in 1 seeds per voxel. The stopping\ncriterion, determining when the tracking stops, is set to stop when the\ntracking exits the white matter.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">white_matter</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">stopping_criterion</span> <span class=\"o\">=</span> <span class=\"n\">BinaryStoppingCriterion</span><span class=\"p\">(</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n\n<span class=\"n\">streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">csapeaks</span><span class=\"p\">,</span> <span class=\"n\">stopping_criterion</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span>\n                                     <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">streamline_generator</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The first of the tracking utilities we\u2019ll cover here is <code class=\"docutils literal notranslate\"><span class=\"pre\">target</span></code>. This\nfunction takes a set of streamlines and a region of interest (ROI) and returns\nonly those streamlines that pass through the ROI. The ROI should be an array\nsuch that the voxels that belong to the ROI are <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> and all other voxels\nare <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (this type of binary array is sometimes called a mask). This\nfunction can also exclude all the streamlines that pass through an ROI by\nsetting the <code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code> flag to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. In this example we\u2019ll target the\nstreamlines of the corpus callosum. Our <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code> array has a sagittal slice\nof the corpus callosum identified by the label value 2. We\u2019ll create an ROI\nmask from that label and create two sets of streamlines, those that intersect\nwith the ROI and those that don\u2019t.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc_slice</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">cc_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">cc_slice</span><span class=\"p\">)</span>\n<span class=\"n\">cc_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">)</span>\n\n<span class=\"n\">other_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">cc_slice</span><span class=\"p\">,</span>\n                                 <span class=\"n\">include</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">other_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">other_streamlines</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other_streamlines</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can use some of <a href=\"#id9\"><span class=\"problematic\" id=\"id10\">DIPY_</span></a>\u2019s visualization tools to display the ROI we targeted\nabove and all the streamlines that pass through that ROI. The ROI is the yellow\nregion near the center of the axial image.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">colormap</span> <span class=\"k\">as</span> <span class=\"n\">cmap</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Make display objects</span>\n<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">)</span>\n<span class=\"n\">cc_streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">,</span>\n                                  <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">))</span>\n<span class=\"n\">cc_ROI_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">contour_from_roi</span><span class=\"p\">(</span><span class=\"n\">cc_slice</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">),</span>\n                                      <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">t1_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">vol_actor2</span> <span class=\"o\">=</span> <span class=\"n\">vol_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">vol_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add display objects to canvas</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vol_actor2</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">cc_ROI_actor</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save figures</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;corpuscallosum_axial.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">set_camera</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">focal_point</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">view_up</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;corpuscallosum_sagittal.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ul class=\"sphx-glr-horizontal\">\n<li><img src=\"../../_images/sphx_glr_streamline_tools_001.png\" srcset=\"../../_images/sphx_glr_streamline_tools_001.png\" alt=\"streamline tools\" class = \"sphx-glr-multi-img\"/></li>\n<li><img src=\"../../_images/sphx_glr_streamline_tools_002.png\" srcset=\"../../_images/sphx_glr_streamline_tools_002.png\" alt=\"streamline tools\" class = \"sphx-glr-multi-img\"/></li>\n</ul>\n<figure class=\"align-center\" id=\"id4\">\n<img alt=\"examples_built/17_streamline_analysis/corpuscallosum_axial.png\" src=\"examples_built/17_streamline_analysis/corpuscallosum_axial.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>Corpus Callosum Axial</strong></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<figure class=\"align-center\" id=\"id5\">\n<img alt=\"examples_built/17_streamline_analysis/corpuscallosum_sagittal.png\" src=\"examples_built/17_streamline_analysis/corpuscallosum_sagittal.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>Corpus Callosum Sagittal</strong></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Once we\u2019ve targeted the corpus callosum ROI, we might want to find out which\nregions of the brain are connected by these streamlines. To do this we can use\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">connectivity_matrix</span></code> function. This function takes a set of streamlines\nand an array of labels as arguments. It returns the number of streamlines that\nstart and end at each pair of labels and it can return the streamlines grouped\nby their endpoints. Notice that this function only considers the endpoints of\neach streamline.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">grouping</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">connectivity_matrix</span><span class=\"p\">(</span><span class=\"n\">cc_streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n                                        <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span>\n                                        <span class=\"n\">return_mapping</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                        <span class=\"n\">mapping_as_streamlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>We\u2019ve set <code class=\"docutils literal notranslate\"><span class=\"pre\">return_mapping</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">mapping_as_streamlines</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> so that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">connectivity_matrix</span></code> returns all the streamlines in <code class=\"docutils literal notranslate\"><span class=\"pre\">cc_streamlines</span></code>\ngrouped by their endpoint.</p>\n<p>Because we\u2019re typically only interested in connections between gray matter\nregions, and because the label 0 represents background and the labels 1 and 2\nrepresent white matter, we discard the first three rows and columns of the\nconnectivity matrix.</p>\n<p>We can now display this matrix using matplotlib. We display it using a log\nscale to make small values in the matrix easier to see.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log1p</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">),</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;connectivity.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img src=\"../../_images/sphx_glr_streamline_tools_003.png\" srcset=\"../../_images/sphx_glr_streamline_tools_003.png\" alt=\"streamline tools\" class = \"sphx-glr-single-img\"/><figure class=\"align-center\" id=\"id6\">\n<img alt=\"examples_built/17_streamline_analysis/connectivity.png\" src=\"examples_built/17_streamline_analysis/connectivity.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>Connectivity of Corpus Callosum</strong></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>In our example track there are more streamlines connecting regions 11 and\n54 than any other pair of regions. These labels represent the left and right\nsuperior frontal gyrus respectively. These two regions are large, close\ntogether, have lots of corpus callosum fibers and are easy to track so this\nresult should not be a surprise to anyone.</p>\n<p>However, the interpretation of streamline counts can be tricky. The\nrelationship between the underlying biology and the streamline counts will\ndepend on several factors, including how the tracking was done, and the correct\nway to interpret these kinds of connectivity matrices is still an open question\nin the diffusion imaging literature.</p>\n<p>The next function we\u2019ll demonstrate is <code class=\"docutils literal notranslate\"><span class=\"pre\">density_map</span></code>. This function allows\none to represent the spatial distribution of a track by counting the density of\nstreamlines in each voxel. For example, let\u2019s take the track connecting the\nleft and right superior frontal gyrus.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">lr_superiorfrontal_track</span> <span class=\"o\">=</span> <span class=\"n\">grouping</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">]</span>\n<span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">dm</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">density_map</span><span class=\"p\">(</span><span class=\"n\">lr_superiorfrontal_track</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s save this density map and the streamlines so that they can be\nvisualized together. In order to save the streamlines in a \u201c.trk\u201d file we\u2019ll\nneed to move them to \u201ctrackvis space\u201d, or the representation of streamlines\nspecified by the trackvis Track File format.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.stateful_tractogram</span> <span class=\"kn\">import</span> <span class=\"n\">Space</span><span class=\"p\">,</span> <span class=\"n\">StatefulTractogram</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">save_trk</span>\n\n<span class=\"c1\"># Save density map</span>\n<span class=\"n\">save_nifti</span><span class=\"p\">(</span><span class=\"s2\">&quot;lr-superiorfrontal-dm.nii.gz&quot;</span><span class=\"p\">,</span> <span class=\"n\">dm</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s2\">&quot;int16&quot;</span><span class=\"p\">),</span> <span class=\"n\">affine</span><span class=\"p\">)</span>\n\n<span class=\"n\">lr_sf_trk</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">lr_superiorfrontal_track</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save streamlines</span>\n<span class=\"n\">sft</span> <span class=\"o\">=</span> <span class=\"n\">StatefulTractogram</span><span class=\"p\">(</span><span class=\"n\">lr_sf_trk</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">Space</span><span class=\"o\">.</span><span class=\"n\">VOX</span><span class=\"p\">)</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"n\">sft</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lr-superiorfrontal.trk&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Footnotes</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id2\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1\">1</a><span class=\"fn-bracket\">]</span></span>\n<p>The image <cite>aparc-reduced.nii.gz</cite>, which we load as <code class=\"docutils literal notranslate\"><span class=\"pre\">labels_img</span></code>, is a\nmodified version of label map <cite>aparc+aseg.mgz</cite> created by <a class=\"reference external\" href=\"https://surfer.nmr.mgh.harvard.edu/\">FreeSurfer</a>. The corpus callosum region is a\ncombination of the FreeSurfer labels 251-255. The remaining FreeSurfer\nlabels were re-mapped and reduced so that they lie between 0 and 88. To\nsee the FreeSurfer region, label and name, represented by each value, see\n<cite>label_info.txt</cite> in <cite>~/.dipy/stanford_hardi</cite>.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id3\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>An affine transformation is a mapping between two coordinate systems\nthat can represent scaling, rotation, shear, translation and reflection.\nAffine transformations are often represented using a 4x4 matrix where\nthe last row of the matrix is <code class=\"docutils literal notranslate\"><span class=\"pre\">[0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1]</span></code>.</p>\n</aside>\n</aside>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 2 minutes  12.441 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-17-streamline-analysis-streamline-tools-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/b778d2bbca6e4ea4aa040bb21b31e4be/streamline_tools.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">streamline_tools.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/cf31f09c4930c357f51ef885a984ab5d/streamline_tools.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">streamline_tools.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples_built/20_registration/index", "Registration", "N", "next"], ["examples_built/17_streamline_analysis/path_length_map", "Calculate Path Length Map", "P", "previous"]], "sourcename": "examples_built/17_streamline_analysis/streamline_tools.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Connectivity Matrices, ROI Intersections and Density Maps</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/17_streamline_analysis/streamline_tools", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}