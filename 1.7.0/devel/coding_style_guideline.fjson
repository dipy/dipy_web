{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "DIPY development"}], "prev": {"link": "../commit_codes/", "title": "Commit message codes"}, "next": {"link": "../python3/", "title": "Keeping code compatible with Pythons 2 and 3"}, "title": "DIPY Coding Style Guideline", "meta": null, "body": "<section id=\"dipy-coding-style-guideline\">\n<span id=\"coding-style-guideline\"></span><h1>DIPY Coding Style Guideline<a class=\"headerlink\" href=\"#dipy-coding-style-guideline\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>The main principles behind <a class=\"reference external\" href=\"http://dipy.org\">DIPY</a> development are:</p>\n<ul class=\"simple\">\n<li><p><strong>Robustness</strong>: the results of a piece of code must be verified\nsystematically, and hence stability and robustness of the code must be\nensured, reducing code redundancies.</p></li>\n<li><p><strong>Readability</strong>: the code is written and read by humans, and it is read\nmuch more frequently than it is written.</p></li>\n<li><p><strong>Consistency</strong>: following these guidelines will ease reading the code,\nand will make it less error-prone.</p></li>\n<li><p><strong>Documentation</strong>: document the code. Documentation is essential as it is\none of the key points for the adoption of DIPY as the toolkit of choice in\ndiffusion by the scientific community. Documenting helps to clarify\ncertain choices, helps to avoid obscure places, and is a way to allow\nother members <em>decode</em> it with less effort.</p></li>\n<li><p><strong>Language</strong>: the code must be written in English. Norms and spelling\nshould be abided by.</p></li>\n</ul>\n<section id=\"coding-style\">\n<h2>Coding style<a class=\"headerlink\" href=\"#coding-style\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>DIPY uses the standard Python <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a> style to ensure the\nreadability and consistency across the toolkit. Conformance to the <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a> syntax\nis checked automatically when requesting to push to DIPY. There are\n<a class=\"reference external\" href=\"https://pypi.python.org/pypi/pep8\">software systems</a> that will check your\ncode for <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a> compliance, and most text editors can be configured to check the\ncompliance of your code with <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a>. Beyond the aspects checked, as a\ncontributor to DIPY, you should try to ensure that your code, including\ncomments, conforms to the above principles.</p>\n<section id=\"imports\">\n<h3>Imports<a class=\"headerlink\" href=\"#imports\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>DIPY recommends using the following package shorthands to increase consistency\nand readability across the library:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy.testing</span> <span class=\"k\">as</span> <span class=\"nn\">npt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scipy</span> <span class=\"k\">as</span> <span class=\"nn\">sp</span>\n</pre></div>\n</div>\n<p>No alias should be used for <code class=\"docutils literal notranslate\"><span class=\"pre\">h5py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n</pre></div>\n</div>\n</section>\n</section>\n<section id=\"cython-coding-style\">\n<h2>Cython coding style<a class=\"headerlink\" href=\"#cython-coding-style\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>DIPY recommends the use of the standard Python\n<a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a> style when writing <a class=\"reference external\" href=\"https://cython.org/\">Cython</a> code.</p>\n<p>Cython-specific syntax should follow these additional rules:</p>\n<section id=\"id1\">\n<h3>Imports<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">cimport</span></code>\u2019s should add the <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code> prefix to the usual Python import package\nshorthand, e.g.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cimport</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">cnp</span>\n</pre></div>\n</div>\n<p>Adding the <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code> prefix to the import line makes it clear that the Cython/C\nsymbols are being referred to as compared to the Python symbols.</p>\n</section>\n<section id=\"variable-declaration\">\n<h3>Variable declaration<a class=\"headerlink\" href=\"#variable-declaration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Separate <code class=\"docutils literal notranslate\"><span class=\"pre\">cdef</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">cpdef</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">ctypedef</span></code> statements from the following type by\nexactly one space. In turn, separate the type from the variable name by exactly\none space. Declare only one <code class=\"docutils literal notranslate\"><span class=\"pre\">ctypedef</span></code> variable per line. You may <code class=\"docutils literal notranslate\"><span class=\"pre\">cdef</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cpdef</span></code> multiple variables per line as long as these are simple declarations;\nnote that multiple assignment, references, or pointers are not allowed on the\nsame line. Grouping <code class=\"docutils literal notranslate\"><span class=\"pre\">cdef</span></code> statements is allowed. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Good</span>\n<span class=\"n\">cdef</span> <span class=\"nb\">int</span> <span class=\"n\">n</span>\n<span class=\"n\">cdef</span> <span class=\"n\">char</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n<span class=\"n\">cdef</span> <span class=\"n\">double</span> <span class=\"n\">Xf</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">cdef</span> <span class=\"n\">double</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">cpdef</span> <span class=\"nb\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span>\n<span class=\"n\">cdef</span> <span class=\"n\">ClusterMapCentroid</span> <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">ClusterMapCentroid</span><span class=\"p\">()</span>\n<span class=\"n\">cdef</span><span class=\"p\">:</span>\n    <span class=\"n\">double</span> <span class=\"o\">*</span><span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">double</span> <span class=\"o\">*&gt;</span> <span class=\"n\">cnp</span><span class=\"o\">.</span><span class=\"n\">PyArray_DATA</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">)</span>\n    <span class=\"n\">cnp</span><span class=\"o\">.</span><span class=\"n\">npy_intp</span> <span class=\"o\">*</span><span class=\"n\">pstr</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">cnp</span><span class=\"o\">.</span><span class=\"n\">npy_intp</span> <span class=\"o\">*&gt;</span> <span class=\"n\">qa</span><span class=\"o\">.</span><span class=\"n\">strides</span>\n    <span class=\"n\">cnp</span><span class=\"o\">.</span><span class=\"n\">npy_intp</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">cnt</span>\n    <span class=\"n\">double</span> <span class=\"n\">direction</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"n\">double</span> <span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"n\">ftmp</span>\n<span class=\"n\">cdef</span> <span class=\"nb\">int</span> <span class=\"n\">get_direction_c</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">double</span><span class=\"o\">*</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">double</span><span class=\"o\">*</span> <span class=\"n\">direction</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Bad</span>\n<span class=\"n\">cdef</span>  <span class=\"n\">char</span> <span class=\"o\">*</span><span class=\"n\">s</span>\n<span class=\"n\">cdef</span> <span class=\"n\">char</span> <span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"o\">*</span> <span class=\"n\">v</span>\n<span class=\"n\">cdef</span> <span class=\"n\">double</span> <span class=\"n\">Xf</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">cdef</span> <span class=\"n\">double</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span>\n<span class=\"n\">cdef</span> <span class=\"n\">ClusterMapCentroid</span>     <span class=\"n\">clusters</span>   <span class=\"o\">=</span> <span class=\"n\">ClusterMapCentroid</span><span class=\"p\">()</span>\n<span class=\"n\">cdef</span>   <span class=\"nb\">int</span>   <span class=\"n\">get_direction_c</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">double</span><span class=\"o\">*</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">double</span><span class=\"o\">*</span> <span class=\"n\">direction</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>Inside of a function, place all <code class=\"docutils literal notranslate\"><span class=\"pre\">cdef</span></code> statements at the top of the function\nbody:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Good</span>\n<span class=\"n\">cdef</span> <span class=\"n\">void</span> <span class=\"n\">estimate_kernel_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"n\">cdef</span><span class=\"p\">:</span>\n    <span class=\"n\">double</span> <span class=\"p\">[:]</span> <span class=\"n\">x</span>\n    <span class=\"n\">double</span> <span class=\"p\">[:]</span> <span class=\"n\">y</span>\n\n<span class=\"c1\"># Bad</span>\n<span class=\"n\">cdef</span> <span class=\"n\">void</span> <span class=\"n\">estimate_kernel_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">cdef</span> <span class=\"n\">double</span> <span class=\"p\">[:]</span> <span class=\"n\">x</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kernelmax</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">k2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"n\">cdef</span> <span class=\"n\">double</span> <span class=\"p\">[:]</span> <span class=\"n\">y</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</section>\n<section id=\"using-c-libraries\">\n<h3>Using C libraries<a class=\"headerlink\" href=\"#using-c-libraries\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">cimport</span></code>\u2019s should follow the same rules defined in PEP8 for <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span></code>\nstatements. If a module is both <em>imported</em> and <em>cimported</em>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">cimport</span></code>\nshould come before the <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span></code>.</p>\n<p>An example of an imported C library:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">libc.stdlib</span> <span class=\"n\">cimport</span> <span class=\"n\">calloc</span><span class=\"p\">,</span> <span class=\"n\">realloc</span><span class=\"p\">,</span> <span class=\"n\">free</span>\n</pre></div>\n</div>\n<p>Do not use <code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code> statements.</p>\n</section>\n<section id=\"error-return-values\">\n<h3>Error return values<a class=\"headerlink\" href=\"#error-return-values\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>When declaring an error return value with the <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span></code> keyword, use one space on\nboth sides of the <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span></code>. If in a function definition, there should be no\nspaces between the error return value and the colon <code class=\"docutils literal notranslate\"><span class=\"pre\">:</span></code>. Avoid <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span> <span class=\"pre\">*</span></code>\nunless it is needed for functions returning <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Good</span>\n<span class=\"n\">cdef</span> <span class=\"n\">void</span> <span class=\"n\">bar</span><span class=\"p\">()</span> <span class=\"k\">except</span> <span class=\"o\">*</span>\n<span class=\"n\">cdef</span> <span class=\"n\">void</span> <span class=\"n\">c_extract</span><span class=\"p\">(</span><span class=\"n\">Feature</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">Data2D</span> <span class=\"n\">datum</span><span class=\"p\">,</span> <span class=\"n\">Data2D</span> <span class=\"n\">out</span><span class=\"p\">)</span> <span class=\"n\">nogil</span> <span class=\"k\">except</span> <span class=\"o\">*</span><span class=\"p\">:</span>\n<span class=\"n\">cdef</span> <span class=\"nb\">int</span> <span class=\"n\">front</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">except</span> <span class=\"o\">+</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Bad</span>\n<span class=\"n\">cdef</span> <span class=\"n\">char</span> <span class=\"o\">*</span> <span class=\"n\">hat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">except</span> <span class=\"o\">*</span><span class=\"p\">:</span>\n<span class=\"n\">cdef</span> <span class=\"nb\">int</span> <span class=\"n\">front</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>    <span class=\"k\">except</span>   <span class=\"o\">+</span>  <span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</section>\n<section id=\"pointers-and-references\">\n<h3>Pointers and references<a class=\"headerlink\" href=\"#pointers-and-references\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Pointers and references may be either zero or one space away from the type name.\nIf followed by a variable name, they must be one space away from the variable\nname. Do not put any spaces between the reference operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> and the variable\nname:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Good</span>\n<span class=\"n\">cdef</span> <span class=\"nb\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">i</span>\n<span class=\"n\">cdef</span> <span class=\"n\">char</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">j</span>\n\n<span class=\"c1\"># Bad</span>\n<span class=\"n\">cdef</span> <span class=\"nb\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">i</span>\n<span class=\"n\">cdef</span> <span class=\"n\">char</span> <span class=\"o\">*</span><span class=\"n\">s</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span> <span class=\"n\">j</span>\n</pre></div>\n</div>\n</section>\n<section id=\"casting\">\n<h3>Casting<a class=\"headerlink\" href=\"#casting\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>When casting a variable there must be no whitespace between the opening <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code> and\nthe type. There must one space between the closing <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> and the variable:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Good</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">i</span>\n<span class=\"o\">&lt;</span><span class=\"n\">void</span> <span class=\"o\">*&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"c1\"># Bad</span>\n<span class=\"o\">&lt;</span> <span class=\"nb\">float</span> <span class=\"o\">&gt;</span><span class=\"n\">i</span>\n<span class=\"o\">&lt;</span><span class=\"n\">void</span><span class=\"o\">*&gt;</span>  <span class=\"n\">s</span>\n</pre></div>\n</div>\n</section>\n<section id=\"loops\">\n<h3>Loops<a class=\"headerlink\" href=\"#loops\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Use Python loop syntax:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nrows</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Other <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code>-loop constructs are deprecated and must be avoided.</p>\n</section>\n</section>\n<section id=\"documentation\">\n<h2>Documentation<a class=\"headerlink\" href=\"#documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>DIPY uses <a class=\"reference external\" href=\"http://www.sphinx-doc.org/en/stable/index.html\">Sphinx</a> to\ngenerate documentation. We welcome contributions of examples, and suggestions\nfor changes in the documentation, but please make sure that changes that are\nintroduced render properly into the HTML format that is used for the DIPY\nwebsite.</p>\n<p>DIPY follows the <a class=\"reference external\" href=\"https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\">numpy docstring standard</a>\nfor documenting modules, classes, functions, and examples.</p>\n<p>The documentation includes an extensive library of\n<a class=\"reference external\" href=\"http://dipy.org/examples_index.html\">examples</a>. These are Python files that\nare stored in the <code class=\"docutils literal notranslate\"><span class=\"pre\">doc/examples</span></code> folder and contain code to execute the\nexample, interleaved with multi-line comments that contain explanations of the\nblocks of code. Examples demonstrate how to perform processing (segmentation,\ntracking, etc.) on diffusion files using the DIPY classes. The code is\nintermixed with generous comments that describe the former, and the rationale\nand aim of it. If you are contributing a new feature to DIPY, please provide\nan extended example, with explanations of this feature, and references to the\nrelevant papers.</p>\n<p>If the feature that you are working on integrates well into one of the\nexisting examples, please edit the <code class=\"docutils literal notranslate\"><span class=\"pre\">.py</span></code> file of that example. Otherwise,\ncreate a new <code class=\"docutils literal notranslate\"><span class=\"pre\">.py</span></code> file in that directory. Please also add the name of this\nfile into the <code class=\"docutils literal notranslate\"><span class=\"pre\">doc/examples/valid_examples.txt</span></code> file (which controls the\nrendering of these examples into the documentation).</p>\n<p>Additionally, DIPY relies on a set of reStructuredText files (<code class=\"docutils literal notranslate\"><span class=\"pre\">.rst</span></code>)\nlocated in the <code class=\"docutils literal notranslate\"><span class=\"pre\">doc</span></code> folder. They contain information about theoretical\nbackgrounds of DIPY, installation instructions, description of the\ncontribution process, etc.</p>\n<p>Again, both sets of files use the <a class=\"reference external\" href=\"http://www.sphinx-doc.org/en/stable/rest.html\">reStructuredText markup language</a> for comments. Sphinx parses\nthe files to produce the contents that are later rendered in the <a class=\"reference external\" href=\"http://dipy.org\">DIPY</a>\nwebsite.</p>\n<p>The Python examples are compiled, output images produced and corresponding\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.rst</span></code> files produced so that the comments can be appropriately displayed\nin a web page enriched with images.</p>\n<p>Particularly, in order to ease the contribution of examples and <code class=\"docutils literal notranslate\"><span class=\"pre\">.rst</span></code>\nfiles, and with the consistency criterion in mind, beyond the numpy\ndocstring standard aspects, contributors are encouraged to observe the\nfollowing guidelines:</p>\n<ul class=\"simple\">\n<li><p>The acronym for the Diffusion Imaging in Python toolkit should be written\nas <strong>DIPY</strong>.</p></li>\n<li><p>The classes, objects, and any other construct referenced from the code\nshould be written with inverted commas, such as in <em>In DIPY, we use an\nobject called ``GradientTable`` which holds all the acquisition specific\nparameters, e.g. b-values, b-vectors, timings, and others.</em></p></li>\n<li><p>Cite the relevant papers. Use the <em>[NameYear]</em> convention for\ncross-referencing them, such as in <a class=\"reference internal\" href=\"#garyfallidis2014\" id=\"id2\"><span>[Garyfallidis2014]</span></a>, and put them\nunder the <a class=\"reference internal\" href=\"#references\"><span class=\"std std-ref\">References</span></a> section.</p></li>\n<li><p>Cross-reference related examples and files. Use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">_specific_filename:</span></code> convention to label a file at the top of it.\nThus, other pages will be able to reference the file using the standard\nSphinx syntax <code class=\"docutils literal notranslate\"><span class=\"pre\">:ref:`specific_filename`</span></code>.</p></li>\n<li><p>Use an all-caps scheme for acronyms, and capitalize the first letters of\nthe long names, such as in <em>Constrained Spherical Deconvolution (CSD)</em>,\nexcept in those cases where the most common convention has been to use\nlowercase, such as in <em>superior longitudinal fasciculus (SLF)</em>.</p></li>\n<li><p>As customary in Python, use lowercase and separate words with underscores\nfor filenames, labels for references, etc.</p></li>\n<li><p>When including figures, use the regular font for captions (i.e. do not use\nbold faces) unless otherwise required for a specific text part (e.g. a\nDIPY object, etc.).</p></li>\n<li><p>When referring to relative paths, use the backquote inline markup\nthe convention, such as in <code class=\"docutils literal notranslate\"><span class=\"pre\">doc/devel</span></code>. Do not add the\ngreater-than/less-than signs to enclose the path.</p></li>\n</ul>\n<section id=\"references\">\n<span id=\"id3\"></span><h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"garyfallidis2014\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id2\">Garyfallidis2014</a><span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E, Brett M, Amirbekian B, Rokem A, van der\nWalt S, Descoteaux M, Nimmo-Smith I and Dipy Contributors (2014). <a class=\"reference external\" href=\"http://journal.frontiersin.org/Journal/10.3389/fninf.2014.00008/abstract\">Dipy, a\nlibrary for the analysis of diffusion MRI data.</a>\nFrontiers in Neuroinformatics, vol.8, no.8.</p>\n</div>\n</div>\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["devel/python3", "Keeping code compatible with Pythons 2 and 3", "N", "next"], ["devel/commit_codes", "Commit message codes", "P", "previous"]], "sourcename": "devel/coding_style_guideline.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">DIPY Coding Style Guideline</a><ul>\n<li><a class=\"reference internal\" href=\"#coding-style\">Coding style</a><ul>\n<li><a class=\"reference internal\" href=\"#imports\">Imports</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cython-coding-style\">Cython coding style</a><ul>\n<li><a class=\"reference internal\" href=\"#id1\">Imports</a></li>\n<li><a class=\"reference internal\" href=\"#variable-declaration\">Variable declaration</a></li>\n<li><a class=\"reference internal\" href=\"#using-c-libraries\">Using C libraries</a></li>\n<li><a class=\"reference internal\" href=\"#error-return-values\">Error return values</a></li>\n<li><a class=\"reference internal\" href=\"#pointers-and-references\">Pointers and references</a></li>\n<li><a class=\"reference internal\" href=\"#casting\">Casting</a></li>\n<li><a class=\"reference internal\" href=\"#loops\">Loops</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#documentation\">Documentation</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "devel/coding_style_guideline", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}