{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "DIPY development"}], "prev": {"link": "../coding_style_guideline/", "title": "DIPY Coding Style Guideline"}, "next": {"link": "../../theory/", "title": "Theory and concepts"}, "title": "Keeping code compatible with Pythons 2 and 3", "meta": {}, "body": "<section id=\"keeping-code-compatible-with-pythons-2-and-3\">\n<span id=\"python3\"></span><h1>Keeping code compatible with Pythons 2 and 3<a class=\"headerlink\" href=\"#keeping-code-compatible-with-pythons-2-and-3\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>DIPY 0.16 (and lower) supports Python versions from 2.6 to 3.5. In order to maintain code that supports both\nPython 2 and Python 3 versions, please follow these instructions.</p>\n<p>There is useful advice here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://docs.python.org/3/howto/pyporting.html\">http://docs.python.org/3/howto/pyporting.html</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://python3porting.com/differences.html\">http://python3porting.com/differences.html</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/promotions/python/python2python3.pdf\">http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/promotions/python/python2python3.pdf</a></p></li>\n</ul>\n<section id=\"future-imports\">\n<h2>Future imports<a class=\"headerlink\" href=\"#future-imports\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>For any modules with print statements, and for any modules where you remember,\nplease put:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">absolute_import</span>\n</pre></div>\n</div>\n<p>As the first code line of the file, to use Python 3 behavior by default.</p>\n</section>\n<section id=\"print\">\n<h2>Print<a class=\"headerlink\" href=\"#print\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>In Python 3, <code class=\"docutils literal notranslate\"><span class=\"pre\">print</span></code> is a function. Please use the <code class=\"docutils literal notranslate\"><span class=\"pre\">__future__</span></code> import above,\nand the function form:<code class=\"docutils literal notranslate\"><span class=\"pre\">print(something)</span></code>, whenever <code class=\"docutils literal notranslate\"><span class=\"pre\">print</span></code> is used.</p>\n</section>\n<section id=\"division\">\n<h2>Division<a class=\"headerlink\" href=\"#division\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>In Python 2, integer division returns integers, while in Python 3 <code class=\"docutils literal notranslate\"><span class=\"pre\">3/2</span></code>\nreturns <code class=\"docutils literal notranslate\"><span class=\"pre\">1.5</span></code> not <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>.  It\u2019s very good to remember to put the <code class=\"docutils literal notranslate\"><span class=\"pre\">__future__</span></code>\nimport above at the top of the file to make this default everywhere.</p>\n</section>\n<section id=\"moved-modules\">\n<h2>Moved modules<a class=\"headerlink\" href=\"#moved-modules\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>There are compatibility routines in <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dipy.utils.six</span></code>.  You can often get\nmodules that have moved between the versions with (e.g.):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.six.moves</span> <span class=\"kn\">import</span> <span class=\"n\">configparser</span>\n</pre></div>\n</div>\n<p>See the <code class=\"docutils literal notranslate\"><span class=\"pre\">six.py</span></code> code and <a class=\"reference external\" href=\"http://pythonhosted.org/six\">the six.py docs</a>.</p>\n</section>\n<section id=\"range-xrange\">\n<h2>Range, xrange<a class=\"headerlink\" href=\"#range-xrange\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code> returns an iterator in Python3, and <code class=\"docutils literal notranslate\"><span class=\"pre\">xrange</span></code> is therefore redundant,\nand it has been removed.  Get <code class=\"docutils literal notranslate\"><span class=\"pre\">xrange</span></code> for Python 2, <code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code> for Python 3\nwith:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.six.moves</span> <span class=\"kn\">import</span> <span class=\"n\">xrange</span>\n</pre></div>\n</div>\n<p>Or you might want to stick to <code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code> for Python 2 and Python 3, especially\nfor small lists where the memory benefit for <code class=\"docutils literal notranslate\"><span class=\"pre\">xrange</span></code> is small.</p>\n<p>Because <code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code> returns an iterator for Python 3, you may need to wrap some\ncalls to range with <code class=\"docutils literal notranslate\"><span class=\"pre\">list(range(N))</span></code> to make the code compatible with Python 2\nand Python 3.</p>\n</section>\n<section id=\"reduce\">\n<h2>Reduce<a class=\"headerlink\" href=\"#reduce\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Python 3 removed <code class=\"docutils literal notranslate\"><span class=\"pre\">reduce</span></code> from the builtin namespace, this import works for\nboth Python 2 and Python 3:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n</pre></div>\n</div>\n</section>\n<section id=\"strings\">\n<h2>Strings<a class=\"headerlink\" href=\"#strings\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>The major difference between Python 2 and Python 3 is the string handling.\nStrings (<code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>) are always unicode, and so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;A string&#39;</span>\n</pre></div>\n</div>\n<p>in Python 3 will result in a unicode string.  You also need to be much more\nexplicit when opening files; If you want bytes, use: <code class=\"docutils literal notranslate\"><span class=\"pre\">open(fname,</span> <span class=\"pre\">&quot;rb&quot;)</span></code>. If\nyou want unicode: <code class=\"docutils literal notranslate\"><span class=\"pre\">open(fname,</span> <span class=\"pre\">&quot;rt&quot;)</span></code>.  In the same way you need to be explicit if\nyou want <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">io;</span> <span class=\"pre\">io.StringIO</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code> for your file-like objects\ncontaining strings or bytes.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">basestring</span></code> has been removed in Python 3.  To test whether something is a\nstring, use:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.six</span> <span class=\"kn\">import</span> <span class=\"n\">string_types</span>\n\n<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a_variable</span><span class=\"p\">,</span> <span class=\"n\">string_types</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"next-function\">\n<h2>Next function<a class=\"headerlink\" href=\"#next-function\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>In versions of Python from 2.6 and on there is a function <code class=\"docutils literal notranslate\"><span class=\"pre\">next</span></code> in the\nbuiltin namespace, that returns the next result from an iterable thing.   In\nPython 3, meanwhile, the <code class=\"docutils literal notranslate\"><span class=\"pre\">.next()</span></code> method on generators has gone, replaced by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.__next__()</span></code>.  So, prefer <code class=\"docutils literal notranslate\"><span class=\"pre\">next(obj)</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">obj.next()</span></code> for generators, and\nin general when getting the next thing from an iterable.</p>\n</section>\n<section id=\"except\">\n<h2>Except<a class=\"headerlink\" href=\"#except\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>You can\u2019t get away with <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span> <span class=\"pre\">ValueError,</span> <span class=\"pre\">err</span></code> now, because that raises a\nsyntax error for Python 3.  Use <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span> <span class=\"pre\">ValueError</span> <span class=\"pre\">as</span> <span class=\"pre\">err</span></code> instead.</p>\n</section>\n<section id=\"dictionaries\">\n<h2>Dictionaries<a class=\"headerlink\" href=\"#dictionaries\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>You\u2019ve lost <code class=\"docutils literal notranslate\"><span class=\"pre\">d.has_key(&quot;hello&quot;)</span></code> for dictionaries, use <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;hello&quot;</span> <span class=\"pre\">in</span> <span class=\"pre\">d</span></code>\ninstead.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">d.items()</span></code> returns an iterator.  If you need a list, use <code class=\"docutils literal notranslate\"><span class=\"pre\">list(d.items()</span></code>.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">d.iteritems()</span></code> was removed in Python 3 because it is redundant. Use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">d.items()</span></code> instead.</p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["theory/index", "Theory and concepts", "N", "next"], ["devel/coding_style_guideline", "DIPY Coding Style Guideline", "P", "previous"]], "sourcename": "devel/python3.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Keeping code compatible with Pythons 2 and 3</a><ul>\n<li><a class=\"reference internal\" href=\"#future-imports\">Future imports</a></li>\n<li><a class=\"reference internal\" href=\"#print\">Print</a></li>\n<li><a class=\"reference internal\" href=\"#division\">Division</a></li>\n<li><a class=\"reference internal\" href=\"#moved-modules\">Moved modules</a></li>\n<li><a class=\"reference internal\" href=\"#range-xrange\">Range, xrange</a></li>\n<li><a class=\"reference internal\" href=\"#reduce\">Reduce</a></li>\n<li><a class=\"reference internal\" href=\"#strings\">Strings</a></li>\n<li><a class=\"reference internal\" href=\"#next-function\">Next function</a></li>\n<li><a class=\"reference internal\" href=\"#except\">Except</a></li>\n<li><a class=\"reference internal\" href=\"#dictionaries\">Dictionaries</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "devel/python3", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}