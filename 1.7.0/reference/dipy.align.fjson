{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.__config__/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__config__</span></code>"}, "next": {"link": "../dipy.boots/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code>", "meta": {}, "body": "<section id=\"module-dipy.align\">\n<span id=\"align\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code><a class=\"headerlink\" href=\"#module-dipy.align\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.VerbosityLevels\" title=\"dipy.align.VerbosityLevels\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">VerbosityLevels</span></code></a></p></td>\n<td><p>VerbosityLevels This enum defines the four levels of verbosity we use in the align module.</p></td>\n</tr>\n</tbody>\n</table>\n<section id=\"module-dipy.align._public\">\n<span id=\"module-align-public\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align._public</span></code><a class=\"headerlink\" href=\"#module-dipy.align._public\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Registration API: simplified API for registration of MRI data and of\nstreamlines.</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">syn_registration</span></code></a>(moving,\u00a0static[,\u00a0...])</p></td>\n<td><p>Register a 2D/3D source image (moving) to a 2D/3D target image (static).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_to_template\" title=\"dipy.align._public.register_dwi_to_template\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_dwi_to_template</span></code></a>(dwi,\u00a0gtab[,\u00a0...])</p></td>\n<td><p>Register DWI data to a template through the B0 volumes.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.write_mapping\" title=\"dipy.align._public.write_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_mapping</span></code></a>(mapping,\u00a0fname)</p></td>\n<td><p>Write out a syn registration mapping to a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.read_mapping\" title=\"dipy.align._public.read_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_mapping</span></code></a>(disp,\u00a0domain_img,\u00a0codomain_img)</p></td>\n<td><p>Read a syn registration mapping from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.resample\" title=\"dipy.align._public.resample\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">resample</span></code></a>(moving,\u00a0static[,\u00a0moving_affine,\u00a0...])</p></td>\n<td><p>Resample an image (moving) from one space to another (static).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\" title=\"dipy.align._public.affine_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine_registration</span></code></a>(moving,\u00a0static[,\u00a0...])</p></td>\n<td><p>Find the affine transformation between two 3D images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.center_of_mass\" title=\"dipy.align._public.center_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">center_of_mass</span></code></a>(moving,\u00a0static[,\u00a0...])</p></td>\n<td><p>Implements a center of mass transform.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.translation\" title=\"dipy.align._public.translation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">translation</span></code></a>(moving,\u00a0static[,\u00a0moving_affine,\u00a0...])</p></td>\n<td><p>Implements a translation transform.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.rigid\" title=\"dipy.align._public.rigid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid</span></code></a>(moving,\u00a0static[,\u00a0moving_affine,\u00a0...])</p></td>\n<td><p>Implements a rigid transform.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.rigid_isoscaling\" title=\"dipy.align._public.rigid_isoscaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid_isoscaling</span></code></a>(moving,\u00a0static[,\u00a0...])</p></td>\n<td><p>Implements a rigid isoscaling transform.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.rigid_scaling\" title=\"dipy.align._public.rigid_scaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid_scaling</span></code></a>(moving,\u00a0static[,\u00a0...])</p></td>\n<td><p>Implements a rigid scaling transform.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.affine\" title=\"dipy.align._public.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a>(moving,\u00a0static[,\u00a0moving_affine,\u00a0...])</p></td>\n<td><p>Implements an affine transform.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public._METHOD_DICT\" title=\"dipy.align._public._METHOD_DICT\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">_METHOD_DICT</span></code></a></p></td>\n<td><p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">**</span></a>kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list. For example:  dict(one=1, two=2).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.register_series\" title=\"dipy.align._public.register_series\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_series</span></code></a>(series,\u00a0ref[,\u00a0pipeline,\u00a0...])</p></td>\n<td><p>Register a series to a reference image.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_series\" title=\"dipy.align._public.register_dwi_series\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_dwi_series</span></code></a>(data,\u00a0gtab[,\u00a0affine,\u00a0...])</p></td>\n<td><p>Register a DWI series to the mean of the B0 images in that series.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.motion_correction\" title=\"dipy.align._public.motion_correction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">motion_correction</span></code></a>(data,\u00a0gtab[,\u00a0affine,\u00a0...])</p></td>\n<td><p>Apply a motion correction to a DWI dataset (Between-Volumes Motion correction)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.streamline_registration\" title=\"dipy.align._public.streamline_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">streamline_registration</span></code></a>(moving,\u00a0static[,\u00a0...])</p></td>\n<td><p>Register two collections of streamlines ('bundles') to each other.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.cpd\">\n<span id=\"module-align-cpd\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.cpd</span></code><a class=\"headerlink\" href=\"#module-dipy.align.cpd\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<section id=\"note\">\n<h3>Note<a class=\"headerlink\" href=\"#note\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>This file is copied (possibly with major modifications) from the\nsources of the pycpd project - <a class=\"reference external\" href=\"https://github.com/siavashk/pycpd\">https://github.com/siavashk/pycpd</a>.\nIt remains licensed as the rest of PyCPD (MIT license as of October 2010).</p>\n<p># ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##\n#\n#   See COPYING file distributed along with the PyCPD package for the\n#   copyright and license terms.\n#\n# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##</p>\n</section>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration\" title=\"dipy.align.cpd.DeformableRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DeformableRegistration</span></code></a>(X,\u00a0Y[,\u00a0sigma2,\u00a0...])</p></td>\n<td><p>Deformable point cloud registration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.cpd.gaussian_kernel\" title=\"dipy.align.cpd.gaussian_kernel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gaussian_kernel</span></code></a>(X,\u00a0beta[,\u00a0Y])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.cpd.low_rank_eigen\" title=\"dipy.align.cpd.low_rank_eigen\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">low_rank_eigen</span></code></a>(G,\u00a0num_eig)</p></td>\n<td><p>Calculate num_eig eigenvectors and eigenvalues of gaussian matrix G.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.cpd.initialize_sigma2\" title=\"dipy.align.cpd.initialize_sigma2\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_sigma2</span></code></a>(X,\u00a0Y)</p></td>\n<td><p>Initialize the variance (sigma2).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.cpd.lowrankQS\" title=\"dipy.align.cpd.lowrankQS\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lowrankQS</span></code></a>(G,\u00a0beta,\u00a0num_eig[,\u00a0eig_fgt])</p></td>\n<td><p>Calculate eigenvectors and eigenvalues of gaussian matrix G.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.imaffine\">\n<span id=\"module-align-imaffine\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imaffine</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imaffine\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Affine image registration module consisting of the following classes:</p>\n<dl class=\"simple\">\n<dt>AffineMap: encapsulates the necessary information to perform affine</dt><dd><p>transforms between two domains, defined by a <cite>static</cite> and a <cite>moving</cite>\nimage. The <cite>domain</cite> of the transform is the set of points in the\n<cite>static</cite> image\u2019s grid, and the <cite>codomain</cite> is the set of points in\nthe <cite>moving</cite> image. When we call the <cite>transform</cite> method, <cite>AffineMap</cite>\nmaps each point <cite>x</cite> of the domain (<cite>static</cite> grid) to the codomain\n(<cite>moving</cite> grid) and interpolates the <cite>moving</cite> image at that point\nto obtain the intensity value to be placed at <cite>x</cite> in the resulting\ngrid. The <cite>transform_inverse</cite> method performs the opposite operation\nmapping points in the codomain to points in the domain.</p>\n</dd>\n<dt>ParzenJointHistogram: computes the marginal and joint distributions of</dt><dd><p>intensities of a pair of images, using Parzen windows [Parzen62]\nwith a cubic spline kernel, as proposed by Mattes et al. [Mattes03].\nIt also computes the gradient of the joint histogram w.r.t. the\nparameters of a given transform.</p>\n</dd>\n<dt>MutualInformationMetric: computes the value and gradient of the mutual</dt><dd><p>information metric the way <cite>Optimizer</cite> needs them. That is, given\na set of transform parameters, it will use <cite>ParzenJointHistogram</cite>\nto compute the value and gradient of the joint intensity histogram\nevaluated at the given parameters, and evaluate the the value and\ngradient of the histogram\u2019s mutual information.</p>\n</dd>\n<dt>AffineRegistration: it runs the multi-resolution registration, putting</dt><dd><p>all the pieces together. It needs to create the scale space of the\nimages and run the multi-resolution registration by using the Metric\nand the Optimizer at each level of the Gaussian pyramid. At each\nlevel, it will setup the metric to compute value and gradient of the\nmetric with the input images with different levels of smoothing.</p>\n</dd>\n</dl>\n<section id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"simple\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt><dd><p>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</p>\n</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt><dd><p>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</p>\n</dd>\n</dl>\n</section>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\" title=\"dipy.align.imaffine.AffineInvalidValuesError\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a>(affine[,\u00a0domain_grid_shape,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,\u00a0level_iters,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine._transform_method\" title=\"dipy.align.imaffine._transform_method\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">_transform_method</span></code></a></p></td>\n<td><p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(<a href=\"#id3\"><span class=\"problematic\" id=\"id4\">**</span></a>kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list. For example:  dict(one=1, two=2).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"dipy.align.imaffine.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,\u00a0...)</p></td>\n<td><p>Transformation to align the center of mass of the input images.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"dipy.align.imaffine.transform_geometric_centers\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_geometric_centers</span></code></a>(static,\u00a0...)</p></td>\n<td><p>Transformation to align the geometric center of the input images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_origins\" title=\"dipy.align.imaffine.transform_origins\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_origins</span></code></a>(static,\u00a0static_grid2world,\u00a0...)</p></td>\n<td><p>Transformation to align the origins of the input images.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.imwarp\">\n<span id=\"module-align-imwarp\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imwarp</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imwarp\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for Symmetric Diffeomorphic Registration</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,\u00a0disp_shape[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a>([metric])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.RegistrationStages\" title=\"dipy.align.imwarp.RegistrationStages\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RegistrationStages</span></code></a></p></td>\n<td><p>Registration Stages</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.logger\" title=\"dipy.align.imwarp.logger\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">logger</span></code></a></p></td>\n<td><p>Instances of the Logger class represent a single logging channel.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.mult_aff\" title=\"dipy.align.imwarp.mult_aff\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mult_aff</span></code></a>(A,\u00a0B)</p></td>\n<td><p>Returns the matrix product A.dot(B) considering None as the identity</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"dipy.align.imwarp.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,\u00a0dim)</p></td>\n<td><p>Extracts the rotational and spacing components from a matrix</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.metrics\">\n<span id=\"module-align-metrics\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.metrics</span></code><a class=\"headerlink\" href=\"#module-dipy.align.metrics\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Metrics for Symmetric Diffeomorphic Registration</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a>(dim)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a>(dim[,\u00a0sigma_diff,\u00a0radius])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0step_type])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"dipy.align.metrics.v_cycle_2d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">v_cycle_2d</span></code></a>(n,\u00a0k,\u00a0delta_field,\u00a0...[,\u00a0depth])</p></td>\n<td><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"dipy.align.metrics.v_cycle_3d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">v_cycle_3d</span></code></a>(n,\u00a0k,\u00a0delta_field,\u00a0...[,\u00a0depth])</p></td>\n<td><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.reslice\">\n<span id=\"module-align-reslice\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.reslice</span></code><a class=\"headerlink\" href=\"#module-dipy.align.reslice\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.reslice.reslice\" title=\"dipy.align.reslice.reslice\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reslice</span></code></a>(data,\u00a0affine,\u00a0zooms,\u00a0new_zooms[,\u00a0...])</p></td>\n<td><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code>.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.scalespace\">\n<span id=\"module-align-scalespace\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.scalespace</span></code><a class=\"headerlink\" href=\"#module-dipy.align.scalespace\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a>(image,\u00a0num_levels[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,\u00a0factors,\u00a0sigmas)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.logger\" title=\"dipy.align.scalespace.logger\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">logger</span></code></a></p></td>\n<td><p>Instances of the Logger class represent a single logging channel.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.streamlinear\">\n<span id=\"module-align-streamlinear\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.streamlinear</span></code><a class=\"headerlink\" href=\"#module-dipy.align.streamlinear\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a>([num_threads])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Minimum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Minimum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a>([num_threads])</p></td>\n<td><p>Asymmetric Bundle-based Minimum distance.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Sum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric\" title=\"dipy.align.streamlinear.JointBundleMinDistanceMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Minimum Distance for joint optimization.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a>([metric,\u00a0x0,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a>(matopt,\u00a0xopt,\u00a0...)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap\" title=\"dipy.align.streamlinear.JointStreamlineRegistrationMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">JointStreamlineRegistrationMap</span></code></a>(xopt,\u00a0fopt,\u00a0...)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.logger\" title=\"dipy.align.streamlinear.logger\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">logger</span></code></a></p></td>\n<td><p>Instances of the Logger class represent a single logging channel.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"dipy.align.streamlinear.bundle_sum_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_sum_distance</span></code></a>(t,\u00a0static,\u00a0moving[,\u00a0...])</p></td>\n<td><p>MDF distance optimization function (SUM).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"dipy.align.streamlinear.bundle_min_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_min_distance</span></code></a>(t,\u00a0static,\u00a0moving)</p></td>\n<td><p>MDF-based pairwise distance optimization function (MIN).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"dipy.align.streamlinear.bundle_min_distance_fast\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_min_distance_fast</span></code></a>(t,\u00a0static,\u00a0moving,\u00a0...)</p></td>\n<td><p>MDF-based pairwise distance optimization function (MIN).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\" title=\"dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_min_distance_asymmetric_fast</span></code></a>(t,\u00a0...)</p></td>\n<td><p>MDF-based pairwise distance optimization function (MIN).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.remove_clusters_by_size\" title=\"dipy.align.streamlinear.remove_clusters_by_size\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_clusters_by_size</span></code></a>(clusters[,\u00a0min_size])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.progressive_slr\" title=\"dipy.align.streamlinear.progressive_slr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">progressive_slr</span></code></a>(static,\u00a0moving,\u00a0metric,\u00a0x0,\u00a0...)</p></td>\n<td><p>Progressive SLR.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.slr_with_qbx\" title=\"dipy.align.streamlinear.slr_with_qbx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slr_with_qbx</span></code></a>(static,\u00a0moving[,\u00a0x0,\u00a0...])</p></td>\n<td><p>Utility function for registering large tractograms.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.groupwise_slr\" title=\"dipy.align.streamlinear.groupwise_slr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">groupwise_slr</span></code></a>(bundles[,\u00a0x0,\u00a0tol,\u00a0max_iter,\u00a0...])</p></td>\n<td><p>Function to perform unbiased groupwise bundle registration.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.get_unique_pairs\" title=\"dipy.align.streamlinear.get_unique_pairs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_unique_pairs</span></code></a>(n_bundle[,\u00a0pairs])</p></td>\n<td><p>Make unique pairs from n_bundle bundles.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"dipy.align.streamlinear.compose_matrix44\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compose_matrix44</span></code></a>(t[,\u00a0dtype])</p></td>\n<td><p>Compose a 4x4 transformation matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"dipy.align.streamlinear.decompose_matrix44\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decompose_matrix44</span></code></a>(mat[,\u00a0size])</p></td>\n<td><p>Given a 4x4 homogeneous matrix return the parameter vector.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.align.streamwarp\">\n<span id=\"module-align-streamwarp\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.streamwarp</span></code><a class=\"headerlink\" href=\"#module-dipy.align.streamwarp\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamwarp.average_bundle_length\" title=\"dipy.align.streamwarp.average_bundle_length\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">average_bundle_length</span></code></a>(bundle)</p></td>\n<td><p>Find average Euclidean length of the bundle in mm.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamwarp.find_missing\" title=\"dipy.align.streamwarp.find_missing\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_missing</span></code></a>(lst,\u00a0cb)</p></td>\n<td><p>Find unmatched streamline indices in moving bundle.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamwarp.bundlewarp\" title=\"dipy.align.streamwarp.bundlewarp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundlewarp</span></code></a>(static,\u00a0moving[,\u00a0dist,\u00a0alpha,\u00a0...])</p></td>\n<td><p>Register two bundles using nonlinear method.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamwarp.bundlewarp_vector_filed\" title=\"dipy.align.streamwarp.bundlewarp_vector_filed\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundlewarp_vector_filed</span></code></a>(moving_aligned,\u00a0...)</p></td>\n<td><p>Calculate vector fields.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamwarp.bundlewarp_shape_analysis\" title=\"dipy.align.streamwarp.bundlewarp_shape_analysis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundlewarp_shape_analysis</span></code></a>(moving_aligned,\u00a0...)</p></td>\n<td><p>Calculate bundle shape difference profile.</p></td>\n</tr>\n</tbody>\n</table>\n<section id=\"bunch\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#bunch\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.Bunch\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Bunch</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwds</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.Bunch.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwds</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A \u2018bunch\u2019 of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"verbositylevels\">\n<h3>VerbosityLevels<a class=\"headerlink\" href=\"#verbositylevels\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.VerbosityLevels\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.</span></span><span class=\"sig-name descname\"><span class=\"pre\">VerbosityLevels</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.VerbosityLevels\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>VerbosityLevels\nThis enum defines the four levels of verbosity we use in the align\nmodule.\nNONE : do not print anything\nSTATUS : print information about the current status of the algorithm\nDIAGNOSE : print high level information of the components involved in the\nregistration that can be used to detect a failing component.\nDEBUG : print as much information as possible to isolate the cause of a bug.</p>\n</dd></dl>\n\n</section>\n<section id=\"syn-registration\">\n<h3>syn_registration<a class=\"headerlink\" href=\"#syn-registration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.syn_registration\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">syn_registration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.25</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'CC'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">3</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prealign</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.syn_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a 2D/3D source image (moving) to a 2D/3D target image (static).</p>\n<section id=\"parameters\">\n<h4>Parameters<a class=\"headerlink\" href=\"#parameters\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving, static<span class=\"classifier\">array or nib.Nifti1Image or str.</span></dt><dd><p>Either as a 2D/3D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt>moving_affine, static_affine<span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt>metric<span class=\"classifier\">string, optional</span></dt><dd><p>The metric to be optimized. One of <cite>CC</cite>, <cite>EM</cite>, <cite>SSD</cite>,\nDefault: \u2018CC\u2019 =&gt; CCMetric.</p>\n</dd>\n<dt>dim: int (either 2 or 3), optional</dt><dd><p>The dimensions of the image domain. Default: 3</p>\n</dd>\n<dt>level_iters<span class=\"classifier\">list of int, optional</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused). Default: [10, 10, 5].</p>\n</dd>\n<dt>metric_kwargs<span class=\"classifier\">dict, optional</span></dt><dd><p>Parameters for initialization of the metric object. If not provided,\nuses the default settings of each metric.</p>\n</dd>\n</dl>\n</section>\n<section id=\"returns\">\n<h4>Returns<a class=\"headerlink\" href=\"#returns\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>warped_moving<span class=\"classifier\">ndarray</span></dt><dd><p>The data in <cite>moving</cite>, warped towards the <cite>static</cite> data.</p>\n</dd>\n<dt>forward<span class=\"classifier\">ndarray (\u2026, 3)</span></dt><dd><p>The vector field describing the forward warping from the source to the\ntarget.</p>\n</dd>\n<dt>backward<span class=\"classifier\">ndarray (\u2026, 3)</span></dt><dd><p>The vector field describing the backward warping from the target to the\nsource.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"register-dwi-to-template\">\n<h3>register_dwi_to_template<a class=\"headerlink\" href=\"#register-dwi-to-template\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.register_dwi_to_template\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">register_dwi_to_template</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dwi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dwi_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">template</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">template_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'syn'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">reg_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.register_dwi_to_template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register DWI data to a template through the B0 volumes.</p>\n<section id=\"id5\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dwi<span class=\"classifier\">4D array, nifti image or str</span></dt><dd><p>Containing the DWI data, or full path to a nifti file with DWI.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable or sequence of strings</span></dt><dd><p>The gradients associated with the DWI data, or a sequence with\n(fbval, fbvec), full paths to bvals and bvecs files.</p>\n</dd>\n<dt>dwi_affine<span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the DWI. Required if data\nis provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt>template<span class=\"classifier\">3D array, nifti image or str</span></dt><dd><p>Containing the data for the template, or full path to a nifti file\nwith the template data.</p>\n</dd>\n<dt>template_affine<span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the template. Required if data\nis provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt>reg_method<span class=\"classifier\">str,</span></dt><dd><p>One of \u201csyn\u201d or \u201caff\u201d, which designates which registration method is\nused. Either syn, which uses the <a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a> function\nor <a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\" title=\"dipy.align._public.affine_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a> function. Default: \u201csyn\u201d.</p>\n</dd>\n<dt>reg_kwargs<span class=\"classifier\">key-word arguments for <a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a> or</span></dt><dd><p><a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\" title=\"dipy.align._public.affine_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a></p>\n</dd>\n</dl>\n</section>\n<section id=\"id6\">\n<h4>Returns<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>warped_b0, mapping: The fist is an array with the b0 volume warped to the\ntemplate. If reg_method is \u201csyn\u201d, the second is a DiffeomorphicMap class\ninstance that can be used to transform between the two spaces. Otherwise,\nif reg_method is \u201caff\u201d, this is a 4x4 matrix encoding the affine transform.</p>\n</section>\n<section id=\"notes\">\n<h4>Notes<a class=\"headerlink\" href=\"#notes\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>This function assumes that the DWI data is already internally registered.\nSee <a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_series\" title=\"dipy.align._public.register_dwi_series\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">register_dwi_series()</span></code></a>.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"write-mapping\">\n<h3>write_mapping<a class=\"headerlink\" href=\"#write-mapping\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.write_mapping\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">write_mapping</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mapping</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fname</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.write_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write out a syn registration mapping to a nifti file.</p>\n<section id=\"id7\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>mapping : a DiffeomorphicMap object derived from <a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a>\nfname : str</p>\n<blockquote>\n<div><p>Full path to the nifti file storing the mapping</p>\n</div></blockquote>\n</section>\n<section id=\"id8\">\n<h4>Notes<a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The data in the file is organized with shape (X, Y, Z, 3, 2), such\nthat the forward mapping in each voxel is in <cite>data[i, j, k, :, 0]</cite> and\nthe backward mapping in each voxel is in <cite>data[i, j, k, :, 1]</cite>.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"read-mapping\">\n<h3>read_mapping<a class=\"headerlink\" href=\"#read-mapping\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.read_mapping\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">read_mapping</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">disp</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_img</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_img</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prealign</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.read_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read a syn registration mapping from a nifti file.</p>\n<section id=\"id9\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>disp<span class=\"classifier\">str or Nifti1Image</span></dt><dd><p>A file of image containing the mapping displacement field in each voxel\nShape (x, y, z, 3, 2)</p>\n</dd>\n</dl>\n<p>domain_img : str or Nifti1Image</p>\n<p>codomain_img : str or Nifti1Image</p>\n</section>\n<section id=\"id10\">\n<h4>Returns<a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>A <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code> object.</p>\n</section>\n<section id=\"id11\">\n<h4>Notes<a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>See <a class=\"reference internal\" href=\"#dipy.align._public.write_mapping\" title=\"dipy.align._public.write_mapping\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">write_mapping()</span></code></a> for the data format expected.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"resample\">\n<h3>resample<a class=\"headerlink\" href=\"#resample\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.resample\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">resample</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">between_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.resample\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Resample an image (moving) from one space to another (static).</p>\n<section id=\"id12\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving<span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt>moving_affine<span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt>static<span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt>static_affine<span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt>between_affine: 4x4 array, optional</dt><dd><p>If an additional affine is needed between the two spaces.\nDefault: identity (no additional registration).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id13\">\n<h4>Returns<a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>A Nifti1Image class instance with the data from the moving object\nresampled into the space of the static object.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"affine-registration\">\n<h3>affine_registration<a class=\"headerlink\" href=\"#affine-registration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.affine_registration\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">affine_registration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.affine_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the affine transformation between two 3D images. Alternatively, find\nthe combination of several linear transformations.</p>\n<section id=\"id14\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id14\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving<span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt>static<span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt>moving_affine<span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt>static_affine<span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt>pipeline<span class=\"classifier\">list of str, optional</span></dt><dd><p>Sequence of transforms to use in the gradual fitting. Default: gradual\nfit of the full affine (executed from left to right):\n<code class=\"docutils literal notranslate\"><span class=\"pre\">[&quot;center_of_mass&quot;,</span> <span class=\"pre\">&quot;translation&quot;,</span> <span class=\"pre\">&quot;rigid&quot;,</span> <span class=\"pre\">&quot;affine&quot;]</span></code>\nAlternatively, any other combination of the following registration\nmethods might be used: center_of_mass, translation, rigid,\nrigid_isoscaling, rigid_scaling and affine.</p>\n</dd>\n<dt>starting_affine: 4x4 array, optional</dt><dd><p>Initial guess for the transformation between the spaces.\nDefault: identity.</p>\n</dd>\n<dt>metric<span class=\"classifier\">str, optional.</span></dt><dd><p>Currently only supports \u2018MI\u2019 for MutualInformationMetric.</p>\n</dd>\n<dt>level_iters<span class=\"classifier\">sequence, optional</span></dt><dd><p>AffineRegistration key-word argument: the number of iterations at each\nscale of the scale space. <cite>level_iters[0]</cite> corresponds to the coarsest\nscale, <cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt>sigmas<span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>AffineRegistration key-word argument: custom smoothing parameter to\nbuild the scale space (one parameter for each scale). By default,\nthe sequence of sigmas will be [3, 1, 0].</p>\n</dd>\n<dt>factors<span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>AffineRegistration key-word argument: custom scale factors to build the\nscale space (one factor for each scale). By default, the sequence of\nfactors will be [4, 2, 1].</p>\n</dd>\n<dt>ret_metric<span class=\"classifier\">boolean, optional</span></dt><dd><p>Set it to True to return the value of the optimized coefficients and\nthe optimization quality metric.</p>\n</dd>\n<dt>moving_mask<span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019), optional</span></dt><dd><p>moving image mask that defines which pixels in the moving image\nare used to calculate the mutual information.</p>\n</dd>\n<dt>static_mask<span class=\"classifier\">array, shape (S, R, C) or (R, C), optional</span></dt><dd><p>static image mask that defines which pixels in the static image\nare used to calculate the mutual information.</p>\n</dd>\n<dt>nbins<span class=\"classifier\">int, optional</span></dt><dd><p>MutualInformationMetric key-word argument: the number of bins to be\nused for computing the intensity histograms. The default is 32.</p>\n</dd>\n<dt>sampling_proportion<span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>MutualInformationMetric key-word argument: There are two types of\nsampling: dense and sparse. Dense sampling uses all voxels for\nestimating the (joint and marginal) intensity histograms, while\nsparse sampling uses a subset of them. If <cite>sampling_proportion</cite> is\nNone, then dense sampling is used. If <cite>sampling_proportion</cite> is a\nfloating point value in (0,1] then sparse sampling is used,\nwhere <cite>sampling_proportion</cite> specifies the proportion of voxels to\nbe used. The default is None (dense sampling).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id15\">\n<h4>Returns<a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>transformed : array with moving data resampled to the static space\nafter computing the affine transformation\naffine : the affine 4x4 associated with the transformation.\nxopt : the value of the optimized coefficients.\nfopt : the value of the optimization quality metric.</p>\n</section>\n<section id=\"id16\">\n<h4>Notes<a class=\"headerlink\" href=\"#id16\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Performs a gradual registration between the two inputs, using a pipeline\nthat gradually approximates the final registration. If the final default\nstep (<cite>affine</cite>) is omitted, the resulting affine may not have all 12\ndegrees of freedom adjusted.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"center-of-mass\">\n<h3>center_of_mass<a class=\"headerlink\" href=\"#center-of-mass\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.center_of_mass\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">center_of_mass</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['center_of_mass']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.center_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a center of mass transform. Based on <cite>affine_registration()</cite>.</p>\n</dd></dl>\n\n</section>\n<section id=\"translation\">\n<h3>translation<a class=\"headerlink\" href=\"#translation\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.translation\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">translation</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['translation']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.translation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a translation transform. Based on <cite>affine_registration()</cite>.</p>\n</dd></dl>\n\n</section>\n<section id=\"rigid\">\n<h3>rigid<a class=\"headerlink\" href=\"#rigid\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.rigid\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">rigid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['rigid']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.rigid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a rigid transform. Based on <cite>affine_registration()</cite>.</p>\n</dd></dl>\n\n</section>\n<section id=\"rigid-isoscaling\">\n<h3>rigid_isoscaling<a class=\"headerlink\" href=\"#rigid-isoscaling\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.rigid_isoscaling\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">rigid_isoscaling</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['rigid_isoscaling']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.rigid_isoscaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a rigid isoscaling transform. Based on <cite>affine_registration()</cite>.</p>\n</dd></dl>\n\n</section>\n<section id=\"rigid-scaling\">\n<h3>rigid_scaling<a class=\"headerlink\" href=\"#rigid-scaling\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.rigid_scaling\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">rigid_scaling</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['rigid_scaling']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.rigid_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a rigid scaling transform. Based on <cite>affine_registration()</cite>.</p>\n</dd></dl>\n\n</section>\n<section id=\"affine\">\n<h3>affine<a class=\"headerlink\" href=\"#affine\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.affine\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">affine</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['affine']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MI'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">metric_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements an affine transform. Based on <cite>affine_registration()</cite>.</p>\n</dd></dl>\n\n</section>\n<section id=\"method-dict\">\n<h3>_METHOD_DICT<a class=\"headerlink\" href=\"#method-dict\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public._METHOD_DICT\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">_METHOD_DICT</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public._METHOD_DICT\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>dict() -&gt; new empty dictionary\ndict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s</p>\n<blockquote>\n<div><p>(key, value) pairs</p>\n</div></blockquote>\n<dl>\n<dt>dict(iterable) -&gt; new dictionary initialized as if via:</dt><dd><p>d = {}\nfor k, v in iterable:</p>\n<blockquote>\n<div><p>d[k] = v</p>\n</div></blockquote>\n</dd>\n<dt>dict(<a href=\"#id17\"><span class=\"problematic\" id=\"id18\">**</span></a>kwargs) -&gt; new dictionary initialized with the name=value pairs</dt><dd><p>in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"register-series\">\n<h3>register_series<a class=\"headerlink\" href=\"#register-series\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.register_series\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">register_series</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">series</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ref</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">series_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ref_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.register_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a series to a reference image.</p>\n<section id=\"id19\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id19\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>series<span class=\"classifier\">4D array or nib.Nifti1Image class instance or str</span></dt><dd><p>The data is 4D with the last dimension separating different 3D volumes</p>\n</dd>\n<dt>ref<span class=\"classifier\">int or 3D array or nib.Nifti1Image class instance or str</span></dt><dd><p>If this is an int, this is the index of the reference image within the\nseries. Otherwise it is an array of data to register with (associated\nwith a <cite>ref_affine</cite> required) or a nifti img or full path to a file\ncontaining one.</p>\n</dd>\n<dt>pipeline<span class=\"classifier\">sequence, optional</span></dt><dd><p>Sequence of transforms to do for each volume in the series.\nDefault: (executed from left to right):\n<cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n<dt>series_affine, ref_affine<span class=\"classifier\">4x4 arrays, optional.</span></dt><dd><p>The affine. If provided, this input will over-ride the affine provided\ntogether with the nifti img or file.</p>\n</dd>\n<dt>static_mask<span class=\"classifier\">array, shape (S, R, C) or (R, C), optional</span></dt><dd><p>static image mask that defines which pixels in the static image\nare used to calculate the mutual information.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id20\">\n<h4>Returns<a class=\"headerlink\" href=\"#id20\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>xformed, affines : 4D array with transformed data and a (4,4,n) array\nwith 4x4 matrices associated with each of the volumes of the input moving\ndata that was used to transform it into register with the static data.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"register-dwi-series\">\n<h3>register_dwi_series<a class=\"headerlink\" href=\"#register-dwi-series\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.register_dwi_series\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">register_dwi_series</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b0_ref</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.register_dwi_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a DWI series to the mean of the B0 images in that series.</p>\n<p>all first registered to the first B0 volume</p>\n<section id=\"id21\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id21\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">4D array or nibabel Nifti1Image class instance or str</span></dt><dd><p>Diffusion data. Either as a 4D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">a GradientTable class instance or tuple of strings</span></dt><dd><p>If provided as a tuple of strings, these are assumed to be full paths\nto the bvals and bvecs files (in that order).</p>\n</dd>\n<dt>affine<span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt>b0_ref<span class=\"classifier\">int, optional.</span></dt><dd><p>Which b0 volume to use as reference. Default: 0</p>\n</dd>\n<dt>pipeline<span class=\"classifier\">list of callables, optional.</span></dt><dd><p>The transformations to perform in sequence (from left to right):\nDefault: <code class=\"docutils literal notranslate\"><span class=\"pre\">[center_of_mass,</span> <span class=\"pre\">translation,</span> <span class=\"pre\">rigid,</span> <span class=\"pre\">affine]</span></code></p>\n</dd>\n<dt>static_mask<span class=\"classifier\">array, shape (S, R, C) or (R, C), optional</span></dt><dd><p>static image mask that defines which pixels in the static image\nare used to calculate the mutual information.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id22\">\n<h4>Returns<a class=\"headerlink\" href=\"#id22\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>xform_img, affine_array: a Nifti1Image containing the registered data and\nusing the affine of the original data and a list containing the affine\ntransforms associated with each of the</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"motion-correction\">\n<h3>motion_correction<a class=\"headerlink\" href=\"#motion-correction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.motion_correction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">motion_correction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b0_ref</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pipeline</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">['center_of_mass',</span> <span class=\"pre\">'translation',</span> <span class=\"pre\">'rigid',</span> <span class=\"pre\">'affine']</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.motion_correction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply a motion correction to a DWI dataset (Between-Volumes Motion correction)</p>\n<section id=\"id23\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">4D array or nibabel Nifti1Image class instance or str</span></dt><dd><p>Diffusion data. Either as a 4D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">a GradientTable class instance or tuple of strings</span></dt><dd><p>If provided as a tuple of strings, these are assumed to be full paths\nto the bvals and bvecs files (in that order).</p>\n</dd>\n<dt>affine<span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt>b0_ref<span class=\"classifier\">int, optional.</span></dt><dd><p>Which b0 volume to use as reference. Default: 0</p>\n</dd>\n<dt>pipeline<span class=\"classifier\">list of callables, optional.</span></dt><dd><p>The transformations to perform in sequence (from left to right):\nDefault: <code class=\"docutils literal notranslate\"><span class=\"pre\">[center_of_mass,</span> <span class=\"pre\">translation,</span> <span class=\"pre\">rigid,</span> <span class=\"pre\">affine]</span></code></p>\n</dd>\n<dt>static_mask<span class=\"classifier\">array, shape (S, R, C) or (R, C), optional</span></dt><dd><p>static image mask that defines which pixels in the static image\nare used to calculate the mutual information.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id24\">\n<h4>Returns<a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>xform_img, affine_array: a Nifti1Image containing the registered data and\nusing the affine of the original data and a list containing the affine\ntransforms associated with each of the</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"streamline-registration\">\n<h3>streamline_registration<a class=\"headerlink\" href=\"#streamline-registration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align._public.streamline_registration\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align._public.</span></span><span class=\"sig-name descname\"><span class=\"pre\">streamline_registration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_points</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">100</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">native_resampled</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.streamline_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register two collections of streamlines (\u2018bundles\u2019) to each other.</p>\n<section id=\"id25\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving, static<span class=\"classifier\">lists of 3 by n, or str</span></dt><dd><p>The two bundles to be registered. Given either as lists of arrays with\n3D coordinates, or strings containing full paths to these files.</p>\n</dd>\n<dt>n_points<span class=\"classifier\">int, optional</span></dt><dd><p>How many points to resample to. Default: 100.</p>\n</dd>\n<dt>native_resampled<span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the moving bundle in the original space, but\nresampled in the static space to n_points.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id26\">\n<h4>Returns<a class=\"headerlink\" href=\"#id26\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>aligned<span class=\"classifier\">list</span></dt><dd><p>Streamlines from the moving group, moved to be closely matched to\nthe static group.</p>\n</dd>\n<dt>matrix<span class=\"classifier\">array (4, 4)</span></dt><dd><p>The affine transformation that takes us from \u2018moving\u2019 to \u2018static\u2019</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"deformableregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration\" title=\"dipy.align.cpd.DeformableRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeformableRegistration</span></code></a><a class=\"headerlink\" href=\"#deformableregistration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.cpd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DeformableRegistration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma2</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">low_rank</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_eig</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">100</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_iterations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tolerance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">w</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Deformable point cloud registration.</p>\n<section id=\"attributes\">\n<h4>Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>X: numpy array</dt><dd><p>NxD array of target points.</p>\n</dd>\n<dt>Y: numpy array</dt><dd><p>MxD array of source points.</p>\n</dd>\n<dt>TY: numpy array</dt><dd><p>MxD array of transformed source points.</p>\n</dd>\n<dt>sigma2: float (positive)</dt><dd><p>Initial variance of the Gaussian mixture model.</p>\n</dd>\n<dt>N: int</dt><dd><p>Number of target points.</p>\n</dd>\n<dt>M: int</dt><dd><p>Number of source points.</p>\n</dd>\n<dt>D: int</dt><dd><p>Dimensionality of source and target points</p>\n</dd>\n<dt>iteration: int</dt><dd><p>The current iteration throughout registration.</p>\n</dd>\n<dt>max_iterations: int</dt><dd><p>Registration will terminate once the algorithm has taken this\nmany iterations.</p>\n</dd>\n<dt>tolerance: float (positive)</dt><dd><p>Registration will terminate once the difference between\nconsecutive objective function values falls within this tolerance.</p>\n</dd>\n<dt>w: float (between 0 and 1)</dt><dd><p>Contribution of the uniform distribution to account for outliers.\nValid values span 0 (inclusive) and 1 (exclusive).</p>\n</dd>\n<dt>q: float</dt><dd><p>The objective function value that represents the misalignment between\nsource and target point clouds.</p>\n</dd>\n<dt>diff: float (positive)</dt><dd><p>The absolute difference between the current and previous objective\nfunction values.</p>\n</dd>\n<dt>P: numpy array</dt><dd><p>MxN array of probabilities.\nP[m, n] represents the probability that the m-th source point\ncorresponds to the n-th target point.</p>\n</dd>\n<dt>Pt1: numpy array</dt><dd><p>Nx1 column array. Multiplication result between the transpose of P\nand a column vector of all 1s.</p>\n</dd>\n<dt>P1: numpy array</dt><dd><p>Mx1 column array.\nMultiplication result between P and a column vector of all 1s.</p>\n</dd>\n<dt>Np: float (positive)</dt><dd><p>The sum of all elements in P.</p>\n</dd>\n<dt>alpha: float (positive)</dt><dd><p>Represents the trade-off between the goodness of maximum likelihoo\nfit and regularization.</p>\n</dd>\n<dt>beta: float(positive)</dt><dd><p>Width of the Gaussian kernel.</p>\n</dd>\n<dt>low_rank: bool</dt><dd><p>Whether to use low rank approximation.</p>\n</dd>\n<dt>num_eig: int</dt><dd><p>Number of eigenvectors to use in lowrank calculation.</p>\n</dd>\n</dl>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma2</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">low_rank</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_eig</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">100</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_iterations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tolerance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">w</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.expectation\">\n<span class=\"sig-name descname\"><span class=\"pre\">expectation</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.expectation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the expectation step of the EM algorithm.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.get_registration_parameters\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_registration_parameters</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.get_registration_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current estimate of the deformable transformation\nparameters.</p>\n<section id=\"id27\">\n<h5>Returns<a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>self.G: numpy array</dt><dd><p>Gaussian kernel matrix.</p>\n</dd>\n<dt>self.W: numpy array</dt><dd><p>Deformable transformation matrix.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.iterate\">\n<span class=\"sig-name descname\"><span class=\"pre\">iterate</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.iterate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Perform one iteration of the EM algorithm.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.maximization\">\n<span class=\"sig-name descname\"><span class=\"pre\">maximization</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.maximization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the maximization step of the EM algorithm.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.register\">\n<span class=\"sig-name descname\"><span class=\"pre\">register</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">callback=&lt;function</span> <span class=\"pre\">DeformableRegistration.&lt;lambda&gt;&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.register\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Perform the EM registration.</p>\n<section id=\"id28\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id28\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>callback: function</dt><dd><p>A function that will be called after each iteration.\nCan be used to visualize the registration process.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id29\">\n<h5>Returns<a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>self.TY: numpy array</dt><dd><p>MxD array of transformed source points.</p>\n</dd>\n<dt>registration_parameters:</dt><dd><p>Returned params dependent on registration method used.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.transform_point_cloud\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform_point_cloud</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.transform_point_cloud\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Update a point cloud using the new estimate of the deformable\ntransformation.</p>\n<section id=\"id30\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>Y: numpy array, optional</dt><dd><p>Array of points to transform - use to predict on new set of points.\nBest for predicting on new points not used to run initial\nregistration. If None, self.Y used.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id31\">\n<h5>Returns<a class=\"headerlink\" href=\"#id31\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>If Y is None, returns None.\nOtherwise, returns the transformed Y.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.update_transform\">\n<span class=\"sig-name descname\"><span class=\"pre\">update_transform</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.update_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate a new estimate of the deformable transformation.\nSee Eq. 22 of <a class=\"reference external\" href=\"https://arxiv.org/pdf/0905.2635.pdf\">https://arxiv.org/pdf/0905.2635.pdf</a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.DeformableRegistration.update_variance\">\n<span class=\"sig-name descname\"><span class=\"pre\">update_variance</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.DeformableRegistration.update_variance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Update the variance of the mixture model.</p>\n<p>This is using the new estimate of the deformable transformation.\nSee the update rule for sigma2 in\nEq. 23 of of <a class=\"reference external\" href=\"https://arxiv.org/pdf/0905.2635.pdf\">https://arxiv.org/pdf/0905.2635.pdf</a>.</p>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"gaussian-kernel\">\n<h3>gaussian_kernel<a class=\"headerlink\" href=\"#gaussian-kernel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.gaussian_kernel\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.cpd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">gaussian_kernel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.gaussian_kernel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"low-rank-eigen\">\n<h3>low_rank_eigen<a class=\"headerlink\" href=\"#low-rank-eigen\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.low_rank_eigen\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.cpd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">low_rank_eigen</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">G</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_eig</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.low_rank_eigen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate num_eig eigenvectors and eigenvalues of gaussian matrix G.</p>\n<p>Enables lower dimensional solving.</p>\n</dd></dl>\n\n</section>\n<section id=\"initialize-sigma2\">\n<h3>initialize_sigma2<a class=\"headerlink\" href=\"#initialize-sigma2\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.initialize_sigma2\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.cpd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">initialize_sigma2</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Y</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.initialize_sigma2\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the variance (sigma2).</p>\n<section id=\"id32\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id32\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>X: numpy array</dt><dd><p>NxD array of points for target.</p>\n</dd>\n<dt>Y: numpy array</dt><dd><p>MxD array of points for source.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id33\">\n<h4>Returns<a class=\"headerlink\" href=\"#id33\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sigma2: float</dt><dd><p>Initial variance.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"lowrankqs\">\n<h3>lowrankQS<a class=\"headerlink\" href=\"#lowrankqs\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.cpd.lowrankQS\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.cpd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">lowrankQS</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">G</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_eig</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eig_fgt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.cpd.lowrankQS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate eigenvectors and eigenvalues of gaussian matrix G.</p>\n<p>!!!\nThis function is a placeholder for implementing the fast\ngauss transform. It is not yet implemented.\n!!!</p>\n<section id=\"id34\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id34\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>G: numpy array</dt><dd><p>Gaussian kernel matrix.</p>\n</dd>\n<dt>beta: float</dt><dd><p>Width of the Gaussian kernel.</p>\n</dd>\n<dt>num_eig: int</dt><dd><p>Number of eigenvectors to use in lowrank calculation of G</p>\n</dd>\n<dt>eig_fgt: bool</dt><dd><p>If True, use fast gauss transform method to speed up.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"affineinversionerror\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a><a class=\"headerlink\" href=\"#affineinversionerror\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineInversionError\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AffineInversionError</span></span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#Exception\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Exception</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineInversionError.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"affineinvalidvalueserror\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\" title=\"dipy.align.imaffine.AffineInvalidValuesError\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a><a class=\"headerlink\" href=\"#affineinvalidvalueserror\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineInvalidValuesError\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AffineInvalidValuesError</span></span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#Exception\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Exception</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineInvalidValuesError.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInvalidValuesError.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"affinemap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#affinemap\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AffineMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_grid_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_grid_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_grid_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_grid_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap.</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x\u2019, y\u2019, z\u2019)\nin moving image\u2019s world coordinates. Finally, (x\u2019, y\u2019, z\u2019) is mapped\nto voxel coordinates (i\u2019, j\u2019, k\u2019) in the moving image by multiplying\n(x\u2019, y\u2019, z\u2019) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<section id=\"id35\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id35\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine<span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n<dt>domain_grid_shape<span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</dd>\n<dt>domain_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt>codomain_grid_shape<span class=\"classifier\">sequence of integers, shape (dim,)</span></dt><dd><p>the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</dd>\n<dt>codomain_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineMap.get_affine\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_affine</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the value of the transformation, not a reference.</p>\n<section id=\"id36\">\n<h4>Returns<a class=\"headerlink\" href=\"#id36\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine<span class=\"classifier\">ndarray</span></dt><dd><p>Copy of the transform, not a reference.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineMap.set_affine\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_affine</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Set the affine transform (operating in physical space).</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<section id=\"id37\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id37\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine<span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineMap.transform\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">interpolation</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'linear'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_grid_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">resample_only</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from co-domain to domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<section id=\"id38\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id38\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>image<span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt>interpolation<span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt>image_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt>sampling_grid_shape<span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt>sampling_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt>resample_only<span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id39\">\n<h4>Returns<a class=\"headerlink\" href=\"#id39\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>transformed<span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineMap.transform_inverse\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform_inverse</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">interpolation</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'linear'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_grid_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">resample_only</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from domain to co-domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<section id=\"id40\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id40\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>image<span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt>interpolation<span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt>image_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt>sampling_grid_shape<span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt>sampling_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt>resample_only<span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id41\">\n<h4>Returns<a class=\"headerlink\" href=\"#id41\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>transformed<span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"mutualinformationmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#mutualinformationmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.MutualInformationMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MutualInformationMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nbins</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">32</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_proportion</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.MutualInformationMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nbins</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">32</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_proportion</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the Mutual Information metric.</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<section id=\"id42\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id42\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>nbins<span class=\"classifier\">int, optional</span></dt><dd><p>the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</dd>\n<dt>sampling_proportion<span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id43\">\n<h4>Notes<a class=\"headerlink\" href=\"#id43\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.MutualInformationMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information.</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<section id=\"id44\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id44\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</section>\n<section id=\"id45\">\n<h4>Returns<a class=\"headerlink\" href=\"#id45\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>neg_mi<span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance_and_gradient</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters.</p>\n<section id=\"id46\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id46\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</section>\n<section id=\"id47\">\n<h4>Returns<a class=\"headerlink\" href=\"#id47\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>neg_mi<span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n<dt>neg_mi_grad<span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.MutualInformationMetric.gradient\">\n<span class=\"sig-name descname\"><span class=\"pre\">gradient</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric\u2019s gradient at the given parameters.</p>\n<section id=\"id48\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id48\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</section>\n<section id=\"id49\">\n<h4>Returns<a class=\"headerlink\" href=\"#id49\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>grad<span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.MutualInformationMetric.setup\">\n<span class=\"sig-name descname\"><span class=\"pre\">setup</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">transform</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepare the metric to compute intensity densities and gradients.</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<section id=\"id50\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id50\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>transform: instance of Transform</dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt>static<span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt>moving<span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019)</span></dt><dd><p>moving image. The dimensions of the static (S, R, C) and moving\n(S\u2019, R\u2019, C\u2019) images do not need to be the same.</p>\n</dd>\n<dt>static_grid2world<span class=\"classifier\">array (dim+1, dim+1), optional</span></dt><dd><p>the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</dd>\n<dt>moving_grid2world<span class=\"classifier\">array (dim+1, dim+1)</span></dt><dd><p>the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</dd>\n<dt>starting_affine<span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</dd>\n<dt>static_mask<span class=\"classifier\">array, shape (S, R, C) or (R, C), optional</span></dt><dd><p>static image mask that defines which pixels in the static image\nare used to calculate the mutual information.</p>\n</dd>\n<dt>moving_mask<span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019), optional</span></dt><dd><p>moving image mask that defines which pixels in the moving image\nare used to calculate the mutual information.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"affineregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#affineregistration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineRegistration\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AffineRegistration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ss_sigma_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">options</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbosity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineRegistration.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ss_sigma_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">options</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbosity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the AffineRegistration class.\n\nParameters\n\u2014\u2014\u2014-\nmetric : None or object, optional\n    an instance of a metric. The default is None, implying\n    the Mutual Information metric with default settings.\nlevel_iters : sequence, optional\n    the number of iterations at each scale of the scale space.\n    <cite>level_iters[0]</cite> corresponds to the coarsest scale,\n    <cite>level_iters[-1]</cite> the finest, where n is the length of the\n    sequence. By default, a 3-level scale space with iterations\n    sequence equal to [10000, 1000, 100] will be used.\nsigmas : sequence of floats, optional\n    custom smoothing parameter to build the scale space (one parameter\n    for each scale). By default, the sequence of sigmas will be\n    [3, 1, 0].\nfactors : sequence of floats, optional\n    custom scale factors to build the scale space (one factor for each\n    scale). By default, the sequence of factors will be [4, 2, 1].\nmethod : string, optional\n    optimization method to be used. If Scipy version &lt; 0.12, then\n    only L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\n    gradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\n    Newton-CG, dogleg or trust-ncg.\n    The default is \u2018L-BFGS-B\u2019.\nss_sigma_factor : float, optional\n    If None, this parameter is not used and an isotropic scale\n    space with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\n    If not None, an anisotropic scale space will be used by\n    automatically selecting the smoothing sigmas along each axis\n    according to the voxel dimensions of the given image.\n    The <cite>ss_sigma_factor</cite> is used to scale the automatically computed\n    sigmas. For example, in the isotropic case, the sigma of the\n    kernel will be <span class=\"math notranslate nohighlight\">\\(factor * (2 ^ i)\\)</span> where\n    <span class=\"math notranslate nohighlight\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\n    image <span class=\"math notranslate nohighlight\">\\(i=0\\)</span> is never smoothed). The default is None.\noptions : dict, optional\n    extra optimization options. The default is None, implying\n    no extra options are passed to the optimizer.\n\nverbosity: int (one of {0, 1, 2, 3}), optional\n    Set the verbosity level of the algorithm:\n    0 : do not print anything\n    1 : print information about the current status of the algorithm\n    2 : print high level information of the components involved in\n        the registration that can be used to detect a failing\n        component.\n    3 : print as much information as possible to isolate the cause\n        of a bug.\n    Default: 1</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineRegistration.docstring_addendum\">\n<span class=\"sig-name descname\"><span class=\"pre\">docstring_addendum</span></span><em class=\"property\"><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"pre\">'verbosity:</span> <span class=\"pre\">int</span> <span class=\"pre\">(one</span> <span class=\"pre\">of</span> <span class=\"pre\">{0,</span> <span class=\"pre\">1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3}),</span> <span class=\"pre\">optional\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">Set</span> <span class=\"pre\">the</span> <span class=\"pre\">verbosity</span> <span class=\"pre\">level</span> <span class=\"pre\">of</span> <span class=\"pre\">the</span> <span class=\"pre\">algorithm:\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">0</span> <span class=\"pre\">:</span> <span class=\"pre\">do</span> <span class=\"pre\">not</span> <span class=\"pre\">print</span> <span class=\"pre\">anything\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">1</span> <span class=\"pre\">:</span> <span class=\"pre\">print</span> <span class=\"pre\">information</span> <span class=\"pre\">about</span> <span class=\"pre\">the</span> <span class=\"pre\">current</span> <span class=\"pre\">status</span> <span class=\"pre\">of</span> <span class=\"pre\">the</span> <span class=\"pre\">algorithm\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">2</span> <span class=\"pre\">:</span> <span class=\"pre\">print</span> <span class=\"pre\">high</span> <span class=\"pre\">level</span> <span class=\"pre\">information</span> <span class=\"pre\">of</span> <span class=\"pre\">the</span> <span class=\"pre\">components</span> <span class=\"pre\">involved</span> <span class=\"pre\">in\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">the</span> <span class=\"pre\">registration</span> <span class=\"pre\">that</span> <span class=\"pre\">can</span> <span class=\"pre\">be</span> <span class=\"pre\">used</span> <span class=\"pre\">to</span> <span class=\"pre\">detect</span> <span class=\"pre\">a</span> <span class=\"pre\">failing\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">component.\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">3</span> <span class=\"pre\">:</span> <span class=\"pre\">print</span> <span class=\"pre\">as</span> <span class=\"pre\">much</span> <span class=\"pre\">information</span> <span class=\"pre\">as</span> <span class=\"pre\">possible</span> <span class=\"pre\">to</span> <span class=\"pre\">isolate</span> <span class=\"pre\">the</span> <span class=\"pre\">cause\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">of</span> <span class=\"pre\">a</span> <span class=\"pre\">bug.\\n</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"pre\">Default:</span> <span class=\"pre\">1\\n</span>&#160;&#160;&#160; <span class=\"pre\">'</span></em><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.AffineRegistration.optimize\">\n<span class=\"sig-name descname\"><span class=\"pre\">optimize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">transform</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">starting_affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ret_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Start the optimization process.</p>\n<section id=\"id51\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id51\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>static<span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt>moving<span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt>transform<span class=\"classifier\">instance of Transform</span></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt>params0<span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt>static_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt>moving_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt>starting_affine<span class=\"classifier\">string, or matrix, or None, optional</span></dt><dd><dl class=\"simple\">\n<dt>If string:</dt><dd><p>\u2018mass\u2019: align centers of gravity\n\u2018voxel-origin\u2019: align physical coordinates of voxel (0,0,0)\n\u2018centers\u2019: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt><dd><p>array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt><dd><p>Start from identity.</p>\n</dd>\n</dl>\n<p>The default is None.</p>\n</dd>\n<dt>ret_metric<span class=\"classifier\">boolean, optional</span></dt><dd><p>if True, it returns the parameters for measuring the\nsimilarity between the images (default \u2018False\u2019).\nThe metric containing optimal parameters and\nthe distance between the images.</p>\n</dd>\n<dt>static_mask<span class=\"classifier\">array, shape (S, R, C) or (R, C), optional</span></dt><dd><p>static image mask that defines which pixels in the static image\nare used to calculate the mutual information.</p>\n</dd>\n<dt>moving_mask<span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019), optional</span></dt><dd><p>moving image mask that defines which pixels in the moving image\nare used to calculate the mutual information.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id52\">\n<h4>Returns<a class=\"headerlink\" href=\"#id52\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine_map<span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine resulting affine transformation</p>\n</dd>\n<dt>xopt<span class=\"classifier\">optimal parameters</span></dt><dd><p>the optimal parameters (translation, rotation shear etc.)</p>\n</dd>\n<dt>fopt<span class=\"classifier\">Similarity metric</span></dt><dd><p>the value of the function at the optimal parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"transform-method\">\n<h3>_transform_method<a class=\"headerlink\" href=\"#transform-method\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine._transform_method\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">_transform_method</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine._transform_method\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>dict() -&gt; new empty dictionary\ndict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s</p>\n<blockquote>\n<div><p>(key, value) pairs</p>\n</div></blockquote>\n<dl>\n<dt>dict(iterable) -&gt; new dictionary initialized as if via:</dt><dd><p>d = {}\nfor k, v in iterable:</p>\n<blockquote>\n<div><p>d[k] = v</p>\n</div></blockquote>\n</dd>\n<dt>dict(<a href=\"#id53\"><span class=\"problematic\" id=\"id54\">**</span></a>kwargs) -&gt; new dictionary initialized with the name=value pairs</dt><dd><p>in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"transform-centers-of-mass\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#transform-centers-of-mass\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.transform_centers_of_mass\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">transform_centers_of_mass</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_grid2world</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_grid2world</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images.</p>\n<section id=\"id55\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id55\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt>static_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt>moving<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt>moving_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</section>\n<section id=\"id56\">\n<h4>Returns<a class=\"headerlink\" href=\"#id56\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine_map<span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"transform-geometric-centers\">\n<h3>transform_geometric_centers<a class=\"headerlink\" href=\"#transform-geometric-centers\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.transform_geometric_centers\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">transform_geometric_centers</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_grid2world</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_grid2world</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the geometric center of the input images.</p>\n<p>With \u201cgeometric center\u201d of a volume we mean the physical coordinates of\nits central voxel</p>\n<section id=\"id57\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id57\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt>static_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt>moving<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt>moving_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</section>\n<section id=\"id58\">\n<h4>Returns<a class=\"headerlink\" href=\"#id58\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine_map<span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe geometric center of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"transform-origins\">\n<h3>transform_origins<a class=\"headerlink\" href=\"#transform-origins\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imaffine.transform_origins\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imaffine.</span></span><span class=\"sig-name descname\"><span class=\"pre\">transform_origins</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_grid2world</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_grid2world</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_origins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the origins of the input images.</p>\n<p>With \u201corigin\u201d of a volume we mean the physical coordinates of\nvoxel (0,0,0)</p>\n<section id=\"id59\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id59\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt>static_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt>moving<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt>moving_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</section>\n<section id=\"id60\">\n<h4>Returns<a class=\"headerlink\" href=\"#id60\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine_map<span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe origin of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"diffeomorphicmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicmap\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffeomorphicMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">disp_shape</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">disp_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prealign</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">disp_shape</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">disp_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">domain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">codomain_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prealign</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<section id=\"id61\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id61\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dim<span class=\"classifier\">int, 2 or 3</span></dt><dd><p>the transformation\u2019s dimension</p>\n</dd>\n<dt>disp_shape<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the deformation\nfield\u2019s discretization</p>\n</dd>\n<dt>disp_grid2world<span class=\"classifier\">the voxel-to-space transform between the def. fields</span></dt><dd><p>grid and space</p>\n</dd>\n<dt>domain_shape<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the default\ndiscretization of this map\u2019s domain</p>\n</dd>\n<dt>domain_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the default voxel-to-space transformation between this map\u2019s\ndiscretization and physical space</p>\n</dd>\n<dt>codomain_shape<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the images that\nare \u2018normally\u2019 warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is \u2018normally\u2019 used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</dd>\n<dt>codomain_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of images that are \u2018normally\u2019\nwarped using this transformation (in the forward direction).</p>\n</dd>\n<dt>prealign<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.allocate\">\n<span class=\"sig-name descname\"><span class=\"pre\">allocate</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_inversion_error</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<section id=\"id62\">\n<h4>Returns<a class=\"headerlink\" href=\"#id62\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>residual<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</dd>\n<dt>stats<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</dd>\n</dl>\n</section>\n<section id=\"id63\">\n<h4>Notes<a class=\"headerlink\" href=\"#id63\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\">\n<span class=\"sig-name descname\"><span class=\"pre\">expand_fields</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">expand_factors</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_shape</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<section id=\"id64\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id64\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>expand_factors<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</dd>\n<dt>new_shape<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the shape of the arrays holding the up-sampled discretization</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_backward_field</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_forward_field</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_simplified_transform</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\">\n<span class=\"sig-name descname\"><span class=\"pre\">interpret_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">obj</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the \u2018identity\u2019 string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<section id=\"id65\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id65\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>obj<span class=\"classifier\">object</span></dt><dd><p>any object</p>\n</dd>\n</dl>\n</section>\n<section id=\"id66\">\n<h4>Returns<a class=\"headerlink\" href=\"#id66\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>obj<span class=\"classifier\">object</span></dt><dd><p>the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the \u2018identity\u2019 string.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.inverse\">\n<span class=\"sig-name descname\"><span class=\"pre\">inverse</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<section id=\"id67\">\n<h4>Returns<a class=\"headerlink\" href=\"#id67\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>inv<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the inverse of this diffeomorphic map.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\">\n<span class=\"sig-name descname\"><span class=\"pre\">shallow_copy</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<section id=\"id68\">\n<h4>Returns<a class=\"headerlink\" href=\"#id68\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>new_map<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the shallow copy of this diffeomorphic map</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.transform\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">interpolation</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'linear'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_world2grid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">out_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">out_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform(\u2026) warps the\nimage forwards, else it warps the image backwards).</p>\n<section id=\"id69\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id69\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>image<span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt>interpolation<span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt>image_world2grid<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt>out_shape<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt>out_grid2world<span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</section>\n<section id=\"id70\">\n<h4>Returns<a class=\"headerlink\" href=\"#id70\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>warped<span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>the warped image under this transformation in the forward direction</p>\n</dd>\n</dl>\n</section>\n<section id=\"id71\">\n<h4>Notes<a class=\"headerlink\" href=\"#id71\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform_inverse</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">interpolation</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'linear'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_world2grid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">out_shape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">out_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform_inverse(\u2026)\nwarps the image backwards, else it warps the image forwards)</p>\n<section id=\"id72\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id72\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>image<span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt>interpolation<span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt>image_world2grid<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt>out_shape<span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows, and columns of the desired warped image</p>\n</dd>\n<dt>out_grid2world<span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</section>\n<section id=\"id73\">\n<h4>Returns<a class=\"headerlink\" href=\"#id73\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>warped<span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>warped image under this transformation in the backward direction</p>\n</dd>\n</dl>\n</section>\n<section id=\"id74\">\n<h4>Notes<a class=\"headerlink\" href=\"#id74\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.transform_points\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform_points</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">coord2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">world2coord</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_points\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.transform_points_inverse\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform_points_inverse</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">coord2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">world2coord</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_points_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\">\n<span class=\"sig-name descname\"><span class=\"pre\">warp_endomorphism</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi\u2019s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self\u2019s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<section id=\"id75\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id75\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>phi<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the endomorphism to be warped by this diffeomorphic map</p>\n</dd>\n</dl>\n</section>\n<section id=\"id76\">\n<h4>Returns<a class=\"headerlink\" href=\"#id76\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>composition<span class=\"classifier\">the composition of this diffeomorphic map with the</span></dt><dd><p>endomorphism given as input</p>\n</dd>\n</dl>\n</section>\n<section id=\"id77\">\n<h4>Notes<a class=\"headerlink\" href=\"#id77\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants\u2019 mid-point algorithm (SyN)\nare much simpler.</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"diffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicregistration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicRegistration\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffeomorphicRegistration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicRegistration.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffeomorphic Registration</p>\n<p>This abstract class defines the interface to be implemented by any\noptimization algorithm for diffeomorphic registration.</p>\n<section id=\"id78\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id78\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>metric<span class=\"classifier\">SimilarityMetric object</span></dt><dd><p>the object measuring the similarity of the two images. The\nregistration algorithm will minimize (or maximize) the provided\nsimilarity.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">get_map</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map after optimization</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">optimize</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the metric optimization</p>\n<p>This is the main function each specialized class derived from this must\nimplement. Upon completion, the deformation field must be available\nfrom the forward transformation model.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_level_iters</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the number of iterations at each pyramid level</p>\n<p>Establishes the maximum number of iterations to be performed at each\nlevel of the Gaussian pyramid, similar to ANTS.</p>\n<section id=\"id79\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id79\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level_iters<span class=\"classifier\">list</span></dt><dd><p>the number of iterations at each level of the Gaussian pyramid.\nlevel_iters[0] corresponds to the finest level, level_iters[n-1]\nthe coarsest, where n is the length of the list</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"symmetricdiffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#symmetricdiffeomorphicregistration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.25</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ss_sigma_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">opt_tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inv_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inv_tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">callback</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level_iters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.25</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ss_sigma_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">opt_tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inv_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inv_tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">callback</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<section id=\"id80\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id80\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>metric<span class=\"classifier\">SimilarityMetric object</span></dt><dd><p>the metric to be optimized</p>\n</dd>\n<dt>level_iters<span class=\"classifier\">list of int</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</dd>\n<dt>opt_tol<span class=\"classifier\">float</span></dt><dd><p>the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</dd>\n<dt>inv_iter<span class=\"classifier\">int</span></dt><dd><p>the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</dd>\n<dt>step_length<span class=\"classifier\">float</span></dt><dd><p>the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</dd>\n<dt>ss_sigma_factor<span class=\"classifier\">float</span></dt><dd><p>parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale</p>\n</dd>\n<dt>inv_tol<span class=\"classifier\">float</span></dt><dd><p>the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</dd>\n<dt>callback<span class=\"classifier\">function(SymmetricDiffeomorphicRegistration)</span></dt><dd><p>a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_map</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the resulting diffeomorphic map.</p>\n<p>Returns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\">\n<span class=\"sig-name descname\"><span class=\"pre\">optimize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prealign</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<section id=\"id81\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id81\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</dd>\n<dt>moving<span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. Since the\ndeformation fields\u2019 discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the \u2018prealign\u2019\nmatrix</p>\n</dd>\n<dt>static_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the static image</p>\n</dd>\n<dt>moving_grid2world<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the moving image</p>\n</dd>\n<dt>prealign<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</dd>\n</dl>\n</section>\n<section id=\"id82\">\n<h4>Returns<a class=\"headerlink\" href=\"#id82\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static_to_ref<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\">\n<span class=\"sig-name descname\"><span class=\"pre\">update</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">current_displacement</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_displacement</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">disp_world2grid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_scaling</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<section id=\"id83\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id83\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>current_displacement<span class=\"classifier\">array, shape (R\u2019, C\u2019, 2) or (S\u2019, R\u2019, C\u2019, 3)</span></dt><dd><p>the displacement field defining where to interpolate\nnew_displacement</p>\n</dd>\n<dt>new_displacement<span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the displacement field to be warped by current_displacement</p>\n</dd>\n<dt>disp_world2grid<span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the space-to-grid transform associated with the displacements\u2019\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</dd>\n<dt>time_scaling<span class=\"classifier\">float</span></dt><dd><p>scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id84\">\n<h4>Returns<a class=\"headerlink\" href=\"#id84\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>updated<span class=\"classifier\">array, shape (the same as new_displacement)</span></dt><dd><p>the warped displacement field</p>\n</dd>\n</dl>\n<p>mean_norm : the mean norm of all vectors in current_displacement</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"registrationstages\">\n<h3>RegistrationStages<a class=\"headerlink\" href=\"#registrationstages\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.RegistrationStages\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">RegistrationStages</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.RegistrationStages\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"logger\">\n<h3>logger<a class=\"headerlink\" href=\"#logger\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.logger\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">logger</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.logger\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instances of the Logger class represent a single logging channel. A\n\u201clogging channel\u201d indicates an area of an application. Exactly how an\n\u201carea\u201d is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof \u201cinput processing\u201d might include sub-areas \u201cread CSV files\u201d, \u201cread\nXLS files\u201d and \u201cread Gnumeric files\u201d). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be \u201cinput\u201d for the upper\nlevel, and \u201cinput.csv\u201d, \u201cinput.xls\u201d and \u201cinput.gnu\u201d for the sub-levels.\nThere is no arbitrary limit to the depth of nesting.</p>\n</dd></dl>\n\n</section>\n<section id=\"mult-aff\">\n<h3>mult_aff<a class=\"headerlink\" href=\"#mult-aff\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.mult_aff\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mult_aff</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">A</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.mult_aff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the matrix product A.dot(B) considering None as the identity</p>\n<section id=\"id85\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id85\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>A : array, shape (n,k)\nB : array, shape (k,m)</p>\n</section>\n<section id=\"id86\">\n<h4>Returns<a class=\"headerlink\" href=\"#id86\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The matrix product A.dot(B). If any of the input matrices is None, it is\ntreated as the identity matrix. If both matrices are None, None is returned</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"get-direction-and-spacings\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#get-direction-and-spacings\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.imwarp.get_direction_and_spacings\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.imwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_direction_and_spacings</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image\u2019s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient\u2019s component by the voxel size along the corresponding\naxis, that\u2019s what the spacings are used for. Since the image\u2019s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<section id=\"id87\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id87\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>affine<span class=\"classifier\">array, shape (k, k), k = 3, 4</span></dt><dd><p>the matrix transforming grid coordinates to physical space.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id88\">\n<h4>Returns<a class=\"headerlink\" href=\"#id88\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>direction<span class=\"classifier\">array, shape (k-1, k-1)</span></dt><dd><p>the rotational component of the input matrix</p>\n</dd>\n<dt>spacings<span class=\"classifier\">array, shape (k-1,)</span></dt><dd><p>the scaling component (voxel size) of the matrix</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"similaritymetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a><a class=\"headerlink\" href=\"#similaritymetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.metrics.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SimilarityMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Similarity Metric abstract class</p>\n<p>A similarity metric is in charge of keeping track of the numerical\nvalue of the similarity (or distance) between the two given images. It\nalso computes the update field for the forward and inverse displacement\nfields to be used in a gradient-based optimization algorithm. Note that\nthis metric does not depend on any transformation (affine or\nnon-linear) so it assumes the static and moving images are already\nwarped</p>\n<section id=\"id89\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id89\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dim<span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.compute_backward\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">compute_backward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the backward update field to register the static image towards\nthe moving image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.compute_forward\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">compute_forward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.free_iteration\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">free_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Releases the resources no longer needed by the metric</p>\n<p>This method is called by the RegistrationOptimizer after the required\niterations have been computed (forward and / or backward) so that the\nSimilarityMetric can safely delete any data it computed as part of the\ninitialization</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.get_energy\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">get_energy</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Must return the numeric value of the similarity between the given\nstatic and moving images</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">initialize_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>This method will be called before any compute_forward or\ncompute_backward call, this allows the Metric to pre-compute any useful\ninformation for speeding up the update computations. This\ninitialization was needed in ANTS because the updates are called once\nper voxel. In Python this is unpractical, though.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.set_levels_above\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_levels_above</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">levels</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are above the current one</p>\n<p>Informs this metric the number of pyramid levels above the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<section id=\"id90\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id90\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>levels<span class=\"classifier\">int</span></dt><dd><p>the number of levels above the current Gaussian Pyramid level</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.set_levels_below\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_levels_below</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">levels</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are below the current one</p>\n<p>Informs this metric the number of pyramid levels below the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<section id=\"id91\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id91\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>levels<span class=\"classifier\">int</span></dt><dd><p>the number of levels below the current Gaussian Pyramid level</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.set_moving_image\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_moving_image</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_affine</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_spacing</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_direction</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the moving image being compared against the static one.</p>\n<p>Sets the moving image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<section id=\"id92\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id92\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving_image<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the moving image</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.set_static_image\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_static_image</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_affine</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_spacing</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_direction</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the static image being compared against the moving one.</p>\n<p>Sets the static image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<section id=\"id93\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id93\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static_image<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the static image</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\">\n<span class=\"sig-name descname\"><span class=\"pre\">use_moving_image_dynamics</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">original_moving_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">transformation</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None if\nthe original_moving_image equals self.moving_image.</p>\n<section id=\"id94\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id94\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>original_moving_image<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>original image from which the current moving image was generated</p>\n</dd>\n<dt>transformation<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original image to generate\nthe current moving image</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\">\n<span class=\"sig-name descname\"><span class=\"pre\">use_static_image_dynamics</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">original_static_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">transformation</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None\nif the original_static_image equals self.moving_image.</p>\n<section id=\"id95\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id95\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>original_static_image<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>original image from which the current static image was generated</p>\n</dd>\n<dt>transformation<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to original image to generate\nthe current static image</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"ccmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#ccmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.metrics.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CCMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma_diff</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma_diff</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<section id=\"id96\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id96\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dim<span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt>sigma_diff<span class=\"classifier\">the standard deviation of the Gaussian smoothing kernel to</span></dt><dd><p>be applied to the update field at each iteration</p>\n</dd>\n<dt>radius<span class=\"classifier\">int</span></dt><dd><p>the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric.compute_backward\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_backward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric.compute_forward\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_forward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric.free_iteration\">\n<span class=\"sig-name descname\"><span class=\"pre\">free_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric.get_energy\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_energy</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.CCMetric.initialize_iteration\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"emmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#emmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.metrics.</span></span><span class=\"sig-name descname\"><span class=\"pre\">EMMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inner_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_levels</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">256</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">double_gradient</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'gauss_newton'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inner_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_levels</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">256</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">double_gradient</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'gauss_newton'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<section id=\"id97\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id97\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dim<span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt>inner_iter<span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt>q_levels<span class=\"classifier\">number of quantization levels (equal to the number of hidden</span></dt><dd><p>variables in the EM algorithm)</p>\n</dd>\n<dt>double_gradient<span class=\"classifier\">boolean</span></dt><dd><p>if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt>step_type<span class=\"classifier\">string (\u2018gauss_newton\u2019, \u2018demons\u2019)</span></dt><dd><p>the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.compute_backward\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_backward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.compute_demons_step\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_demons_step</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">forward_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<section id=\"id98\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id98\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>forward_step<span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id99\">\n<h4>Returns<a class=\"headerlink\" href=\"#id99\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>displacement<span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.compute_forward\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_forward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_gauss_newton_step</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">forward_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<section id=\"id100\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id100\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>forward_step<span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id101\">\n<h4>Returns<a class=\"headerlink\" href=\"#id101\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>displacement<span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Newton step</p>\n</dd>\n</dl>\n</section>\n<section id=\"id102\">\n<h4>References<a class=\"headerlink\" href=\"#id102\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt><dd><p>estimation: combining highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.free_iteration\">\n<span class=\"sig-name descname\"><span class=\"pre\">free_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.get_energy\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_energy</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.initialize_iteration\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\">\n<span class=\"sig-name descname\"><span class=\"pre\">use_moving_image_dynamics</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">original_moving_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">transformation</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<section id=\"id103\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id103\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>original_moving_image<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia \u2018set_moving_image(\u2026)\u2019, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</dd>\n<dt>transformation<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\">\n<span class=\"sig-name descname\"><span class=\"pre\">use_static_image_dynamics</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">original_static_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">transformation</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<section id=\"id104\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id104\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>original_static_image<span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia \u2018set_static_image(\u2026)\u2019, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</dd>\n<dt>transformation<span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"ssdmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#ssdmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.metrics.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SSDMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inner_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'demons'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dim</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inner_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'demons'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<section id=\"id105\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id105\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dim<span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt>inner_iter<span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt>step_type<span class=\"classifier\">string</span></dt><dd><p>the displacement field step to be computed when \u2018compute_forward\u2019\nand \u2018compute_backward\u2019 are called. Either \u2018demons\u2019 or\n\u2018gauss_newton\u2019</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.compute_backward\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_backward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the updated displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.compute_demons_step\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_demons_step</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">forward_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<section id=\"id106\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id106\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>forward_step<span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id107\">\n<h4>Returns<a class=\"headerlink\" href=\"#id107\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>displacement<span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</section>\n<section id=\"id108\">\n<h4>References<a class=\"headerlink\" href=\"#id108\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt><dd><p>Nicholas Ayache, \u201cDiffeomorphic Demons: Efficient\nNon-parametric Image Registration\u201d, Neuroimage 2009</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.compute_forward\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_forward</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute_gauss_newton_step</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">forward_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<section id=\"id109\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id109\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>forward_step<span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id110\">\n<h4>Returns<a class=\"headerlink\" href=\"#id110\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>displacement<span class=\"classifier\">array, shape = static_image.shape + (3,)</span></dt><dd><p>if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.free_iteration\">\n<span class=\"sig-name descname\"><span class=\"pre\">free_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.get_energy\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_energy</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.SSDMetric.initialize_iteration\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_iteration</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"v-cycle-2d\">\n<h3>v_cycle_2d<a class=\"headerlink\" href=\"#v-cycle-2d\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.v_cycle_2d\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.metrics.</span></span><span class=\"sig-name descname\"><span class=\"pre\">v_cycle_2d</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">k</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">delta_field</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma_sq_field</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gradient_field</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">target</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_param</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">displacement</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">depth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the Gauss-Newton linear system\nby first filtering (GS-iterate) the current level, then solves for the\nresidual at a coarser resolution and finally refines the solution at the\ncurrent resolution. This scheme corresponds to the V-cycle proposed by\nBruhn and Weickert[Bruhn05].</p>\n<section id=\"id111\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id111\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n<span class=\"classifier\">int</span></dt><dd><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</dd>\n<dt>k<span class=\"classifier\">int</span></dt><dd><p>the number of iterations at each multi-resolution level</p>\n</dd>\n<dt>delta_field<span class=\"classifier\">array, shape (R, C)</span></dt><dd><p>the difference between the static and moving image (the \u2018derivative\nw.r.t. time\u2019 in the optical flow model)</p>\n</dd>\n<dt>sigma_sq_field<span class=\"classifier\">array, shape (R, C)</span></dt><dd><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</dd>\n<dt>gradient_field<span class=\"classifier\">array, shape (R, C, 2)</span></dt><dd><p>the gradient of the moving image</p>\n</dd>\n<dt>target<span class=\"classifier\">array, shape (R, C, 2)</span></dt><dd><p>right-hand side of the linear system to be solved in the Weickert\u2019s\nmulti-resolution algorithm</p>\n</dd>\n<dt>lambda_param<span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</dd>\n<dt>displacement<span class=\"classifier\">array, shape (R, C, 2)</span></dt><dd><p>the displacement field to start the optimization from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id112\">\n<h4>Returns<a class=\"headerlink\" href=\"#id112\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>energy<span class=\"classifier\">the energy of the EM (or SSD if sigmafield[\u2026]==1) metric at this</span></dt><dd><p>iteration</p>\n</dd>\n</dl>\n</section>\n<section id=\"id113\">\n<h4>References<a class=\"headerlink\" href=\"#id113\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt><dd><p>estimation: combining the highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"v-cycle-3d\">\n<h3>v_cycle_3d<a class=\"headerlink\" href=\"#v-cycle-3d\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.metrics.v_cycle_3d\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.metrics.</span></span><span class=\"sig-name descname\"><span class=\"pre\">v_cycle_3d</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">k</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">delta_field</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma_sq_field</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gradient_field</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">target</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_param</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">displacement</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">depth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the linear system by first\nfiltering (GS-iterate) the current level, then solves for the residual\nat a coarser resolution and finally refines the solution at the current\nresolution. This scheme corresponds to the V-cycle proposed by Bruhn and\nWeickert[1].\n[1] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion estimation:</p>\n<blockquote>\n<div><p>combining highest accuracy with real-time performance\u201d,\n10th IEEE International Conference on Computer Vision, 2005.\nICCV 2005.</p>\n</div></blockquote>\n<section id=\"id114\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id114\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n<span class=\"classifier\">int</span></dt><dd><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</dd>\n<dt>k<span class=\"classifier\">int</span></dt><dd><p>the number of iterations at each multi-resolution level</p>\n</dd>\n<dt>delta_field<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>the difference between the static and moving image (the \u2018derivative\nw.r.t. time\u2019 in the optical flow model)</p>\n</dd>\n<dt>sigma_sq_field<span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</dd>\n<dt>gradient_field<span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>the gradient of the moving image</p>\n</dd>\n<dt>target<span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>right-hand side of the linear system to be solved in the Weickert\u2019s\nmulti-resolution algorithm</p>\n</dd>\n<dt>lambda_param<span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</dd>\n<dt>displacement<span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>the displacement field to start the optimization from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id115\">\n<h4>Returns<a class=\"headerlink\" href=\"#id115\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>energy<span class=\"classifier\">the energy of the EM (or SSD if sigmafield[\u2026]==1) metric at this</span></dt><dd><p>iteration</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.reslice.reslice\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.reslice.</span></span><span class=\"sig-name descname\"><span class=\"pre\">reslice</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">zooms</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_zooms</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'constant'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cval</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_processes</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code>.</p>\n<section id=\"id116\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id116\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt><dd><p>3d volume or 4d volume with datasets</p>\n</dd>\n<dt>affine<span class=\"classifier\">array, shape (4,4)</span></dt><dd><p>mapping from voxel coordinates to world coordinates</p>\n</dd>\n<dt>zooms<span class=\"classifier\">tuple, shape (3,)</span></dt><dd><p>voxel size for (i,j,k) dimensions</p>\n</dd>\n<dt>new_zooms<span class=\"classifier\">tuple, shape (3,)</span></dt><dd><p>new voxel size for (i,j,k) after resampling</p>\n</dd>\n<dt>order<span class=\"classifier\">int, from 0 to 5</span></dt><dd><p>order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don\u2019t want any smoothing 0 is the option you need.</p>\n</dd>\n<dt>mode<span class=\"classifier\">string (\u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019)</span></dt><dd><p>Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</dd>\n<dt>cval<span class=\"classifier\">float</span></dt><dd><p>Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019.</p>\n</dd>\n<dt>num_processes<span class=\"classifier\">int, optional</span></dt><dd><p>Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. Default is 1. If &lt; 0 the maximal number\nof cores minus <code class=\"docutils literal notranslate\"><span class=\"pre\">num_processes</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code> is used (enter -1 to use as many\ncores as possible). 0 raises an error.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id117\">\n<h4>Returns<a class=\"headerlink\" href=\"#id117\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data2<span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt><dd><p>datasets resampled into isotropic voxel size</p>\n</dd>\n<dt>affine2<span class=\"classifier\">array, shape (4,4)</span></dt><dd><p>new affine for the resampled image</p>\n</dd>\n</dl>\n</section>\n<section id=\"examples\">\n<h4>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"kn\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f_name</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">f_name</span><span class=\"p\">,</span> <span class=\"n\">return_voxsize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"scalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#scalespace\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.scalespace.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ScaleSpace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_levels</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_spacing</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_levels</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_spacing</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace.\n\nComputes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image\u2019s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, \u2026, the sigma is given by\n<span class=\"math notranslate nohighlight\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.\n\nParameters\n\u2014\u2014\u2014-\nimage : array, shape (r,c) or (s, r, c) where s is the number of\n    slices, r is the number of rows and c is the number of columns of\n    the input image.\nnum_levels : int\n    the desired number of levels (resolutions) of the scale space\nimage_grid2world : array, shape (dim + 1, dim + 1), optional\n    the grid-to-space transform of the image grid. The default is\n    the identity matrix\ninput_spacing : array, shape (dim,), optional\n    the spacing (voxel size) between voxels in physical space. The\n    default is 1.0 along all axes\nsigma_factor : float, optional\n    the smoothing factor to be used in the construction of the scale\n    space. The default is 0.2\nmask0 : Boolean, optional\n    if True, all smoothed images will be zero at all voxels that are\n    zero in the input image. The default is False.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_affine\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_affine</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level.</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<section id=\"id118\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id118\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get affine transform from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id119\">\n<h4>Returns<a class=\"headerlink\" href=\"#id119\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<blockquote>\n<div><p>the affine (voxel-to-space) transform at the requested resolution\nor None if an invalid level was requested</p>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_affine_inv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level.</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<section id=\"id120\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id120\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the inverse transform from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id121\">\n<h4>Returns<a class=\"headerlink\" href=\"#id121\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>the inverse (space-to-voxel) transform at the requested resolution or\nNone if an invalid level was requested</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_domain_shape</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level.</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<section id=\"id122\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id122\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id123\">\n<h4>Returns<a class=\"headerlink\" href=\"#id123\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<blockquote>\n<div><p>the sub-sampled shape at the requested resolution or None if an\ninvalid level was requested</p>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_expand_factors</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">from_level</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">to_level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level.</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n\u2018expand\u2019 them to level b).</p>\n<section id=\"id124\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id124\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>from_level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the resolution to expand voxels from</p>\n</dd>\n<dt>to_level<span class=\"classifier\">int, 0 &lt;= to_level &lt; from_level</span></dt><dd><p>the resolution to expand voxels to</p>\n</dd>\n</dl>\n</section>\n<section id=\"id125\">\n<h4>Returns<a class=\"headerlink\" href=\"#id125\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>factors<span class=\"classifier\">array, shape (k,), k = 2, 3</span></dt><dd><p>the expand factors (a scalar for each voxel dimension)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_image\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_image</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level.</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<section id=\"id126\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id126\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smooth image from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id127\">\n<h4>Returns<a class=\"headerlink\" href=\"#id127\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<blockquote>\n<div><p>the smooth image at the requested resolution or None if an invalid\nlevel was requested</p>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_scaling\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_scaling</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level.</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<section id=\"id128\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id128\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the scalings from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id129\">\n<h4>Returns<a class=\"headerlink\" href=\"#id129\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>the scaling factors from the original spacing to the spacings at the\nrequested level</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_sigmas\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_sigmas</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level.</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<section id=\"id130\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id130\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smoothing parameters from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id131\">\n<h4>Returns<a class=\"headerlink\" href=\"#id131\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>the smoothing parameters at the requested level</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.get_spacing\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_spacing</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level.</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<section id=\"id132\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id132\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</section>\n<section id=\"id133\">\n<h4>Returns<a class=\"headerlink\" href=\"#id133\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>the spacings (voxel sizes) at the requested resolution or None if an\ninvalid level was requested</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.ScaleSpace.print_level\">\n<span class=\"sig-name descname\"><span class=\"pre\">print_level</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level.</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<section id=\"id134\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id134\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>level<span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to be printed</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"isotropicscalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#isotropicscalespace\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.IsotropicScaleSpace\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.scalespace.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IsotropicScaleSpace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_spacing</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.IsotropicScaleSpace.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">factors</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmas</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image_grid2world</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_spacing</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace.</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<section id=\"id135\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id135\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>image<span class=\"classifier\">array, shape (r,c) or (s, r, c) where s is the number of</span></dt><dd><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</dd>\n<dt>factors<span class=\"classifier\">list of floats</span></dt><dd><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</dd>\n<dt>sigmas<span class=\"classifier\">list of floats</span></dt><dd><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</dd>\n<dt>image_grid2world<span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</dd>\n<dt>input_spacing<span class=\"classifier\">array, shape (dim,), optional</span></dt><dd><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</dd>\n<dt>mask0<span class=\"classifier\">Boolean, optional</span></dt><dd><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id136\">\n<h3>logger<a class=\"headerlink\" href=\"#id136\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.scalespace.logger\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.scalespace.</span></span><span class=\"sig-name descname\"><span class=\"pre\">logger</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.logger\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instances of the Logger class represent a single logging channel. A\n\u201clogging channel\u201d indicates an area of an application. Exactly how an\n\u201carea\u201d is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof \u201cinput processing\u201d might include sub-areas \u201cread CSV files\u201d, \u201cread\nXLS files\u201d and \u201cread Gnumeric files\u201d). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be \u201cinput\u201d for the upper\nlevel, and \u201cinput.csv\u201d, \u201cinput.xls\u201d and \u201cinput.gnu\u201d for the sub-levels.\nThere is no arbitrary limit to the depth of nesting.</p>\n</dd></dl>\n\n</section>\n<section id=\"streamlinedistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#streamlinedistancemetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineDistanceMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">StreamlineDistanceMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineDistanceMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<section id=\"id137\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id137\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id214\"><span class=\"problematic\" id=\"id215\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>calculate distance for current set of parameters.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineDistanceMetric.setup\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">setup</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"bundlemindistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancemetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleMinDistanceMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration.</p>\n<section id=\"methods\">\n<h4>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>setup(static, moving)\ndistance(xopt)</p>\n</section>\n<section id=\"id138\">\n<h4>References<a class=\"headerlink\" href=\"#id138\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"garyfallidis14\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis14<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM,\n2014.</p>\n</div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<section id=\"id139\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id139\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id216\"><span class=\"problematic\" id=\"id217\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric.</p>\n<section id=\"id140\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id140\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>xopt<span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector,</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMetric.setup\">\n<span class=\"sig-name descname\"><span class=\"pre\">setup</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines.</p>\n<section id=\"id141\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id141\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">streamlines</span></dt><dd><p>Fixed or reference set of streamlines.</p>\n</dd>\n<dt>moving<span class=\"classifier\">streamlines</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id142\">\n<h5>Notes<a class=\"headerlink\" href=\"#id142\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>Call this after the object is initiated and before distance.</p>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundlemindistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancematrixmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<section id=\"id143\">\n<h4>Methods<a class=\"headerlink\" href=\"#id143\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>setup(static, moving)\ndistance(xopt)</p>\n</section>\n<section id=\"id144\">\n<h4>Notes<a class=\"headerlink\" href=\"#id144\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The difference with BundleMinDistanceMetric is that this creates\nthe entire distance matrix and therefore requires more memory.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<section id=\"id145\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id145\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id218\"><span class=\"problematic\" id=\"id219\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric.</p>\n<section id=\"id146\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id146\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>xopt<span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\">\n<span class=\"sig-name descname\"><span class=\"pre\">setup</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines.</p>\n<section id=\"id147\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id147\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">streamlines</span></dt><dd><p>Fixed or reference set of streamlines.</p>\n</dd>\n<dt>moving<span class=\"classifier\">streamlines</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id148\">\n<h5>Notes<a class=\"headerlink\" href=\"#id148\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>Call this after the object is initiated and before distance.</p>\n<p>Num_threads is not used in this class. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code>\nfor a faster, threaded and less memory hungry metric</p>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundlemindistanceasymmetricmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistanceasymmetricmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a></p>\n<p>Asymmetric Bundle-based Minimum distance.</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<section id=\"id149\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id149\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id220\"><span class=\"problematic\" id=\"id221\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric.</p>\n<section id=\"id150\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id150\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>xopt<span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"bundlesumdistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlesumdistancematrixmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a></p>\n<p>Bundle-based Sum Distance aka BMD</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<section id=\"id151\">\n<h4>Methods<a class=\"headerlink\" href=\"#id151\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>setup(static, moving)\ndistance(xopt)</p>\n</section>\n<section id=\"id152\">\n<h4>Notes<a class=\"headerlink\" href=\"#id152\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The difference with BundleMinDistanceMatrixMetric is that it uses\nuses the sum of the distance matrix and not the sum of mins.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<section id=\"id153\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id153\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id222\"><span class=\"problematic\" id=\"id223\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<section id=\"id154\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id154\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>xopt<span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"jointbundlemindistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric\" title=\"dipy.align.streamlinear.JointBundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#jointbundlemindistancemetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointBundleMinDistanceMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">JointBundleMinDistanceMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance for joint optimization.</p>\n<p>This cost function is used by the StreamlineLinearRegistration class when\nrunning halfway streamline linear registration for unbiased groupwise\nbundle registration and atlasing.</p>\n<p>It computes the BMD distance after moving both static and moving bundles to\na halfway space in between both.</p>\n<section id=\"id155\">\n<h4>Methods<a class=\"headerlink\" href=\"#id155\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>setup(static, moving)\ndistance(xopt)</p>\n</section>\n<section id=\"id156\">\n<h4>Notes<a class=\"headerlink\" href=\"#id156\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In this metric both static and moving bundles are treated equally (i.e.,\nthere is no static reference bundle as both are intended to move). The\nnaming convention is kept for consistency.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointBundleMinDistanceMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<section id=\"id157\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id157\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id224\"><span class=\"problematic\" id=\"id225\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointBundleMinDistanceMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric.</p>\n<section id=\"id158\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id158\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>xopt<span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector. These affine parameters\nare used to derive the corresponding halfway transformation\nparameters for each bundle.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointBundleMinDistanceMetric.setup\">\n<span class=\"sig-name descname\"><span class=\"pre\">setup</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines.</p>\n<section id=\"id159\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id159\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">streamlines</span></dt><dd><p>Set of streamlines</p>\n</dd>\n<dt>moving<span class=\"classifier\">streamlines</span></dt><dd><p>Set of streamlines</p>\n</dd>\n</dl>\n</section>\n<section id=\"id160\">\n<h5>Notes<a class=\"headerlink\" href=\"#id160\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>Call this after the object is initiated and before distance.\nNum_threads is not used in this class.</p>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"streamlinelinearregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><a class=\"headerlink\" href=\"#streamlinelinearregistration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineLinearRegistration\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">StreamlineLinearRegistration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'rigid'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">options</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evolution</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineLinearRegistration.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'rigid'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">options</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evolution</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Linear registration of 2 sets of streamlines <a class=\"reference internal\" href=\"../../examples_built/20_registration/bundle_registration/#garyfallidis15\" id=\"id161\"><span>[Garyfallidis15]</span></a>.</p>\n<section id=\"id162\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id162\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>metric<span class=\"classifier\">StreamlineDistanceMetric,</span></dt><dd><p>If None and fast is False then the BMD distance is used. If fast\nis True then a faster implementation of BMD is used. Otherwise,\nuse the given distance metric.</p>\n</dd>\n<dt>x0<span class=\"classifier\">array or int or str</span></dt><dd><p>Initial parametrization for the optimization.</p>\n<dl>\n<dt>If 1D array with:</dt><dd><p>a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing is performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p>This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>6</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>7</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>12</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>\u201crigid\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201csimilarity\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201caffine\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n</dd>\n<dt>method<span class=\"classifier\">str,</span></dt><dd><p>\u2018L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used. Default is\n\u2018L_BFGS_B\u2019.</p>\n</dd>\n<dt>bounds<span class=\"classifier\">list of tuples or None,</span></dt><dd><p>If method == \u2018L_BFGS_B\u2019 then we can use bounded optimization.\nFor example for the six parameters of rigid rotation we can set\nthe bounds = [(-30, 30), (-30, 30), (-30, 30),</p>\n<blockquote>\n<div><p>(-45, 45), (-45, 45), (-45, 45)]</p>\n</div></blockquote>\n<p>That means that we have set the bounds for the three translations\nand three rotation axes (in degrees).</p>\n</dd>\n<dt>verbose<span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, if True then information about the optimization is shown.\nDefault: False.</p>\n</dd>\n<dt>options<span class=\"classifier\">None or dict,</span></dt><dd><p>Extra options to be used with the selected method.</p>\n</dd>\n<dt>evolution<span class=\"classifier\">boolean</span></dt><dd><p>If True save the transformation for each iteration of the\noptimizer. Default is False. Supported only with Scipy &gt;= 0.11.</p>\n</dd>\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id226\"><span class=\"problematic\" id=\"id227\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id163\">\n<h4>References<a class=\"headerlink\" href=\"#id163\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"garyfallidis15\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis15<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015</p>\n</div>\n<div class=\"citation\" id=\"id164\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis14<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div>\n<div class=\"citation\" id=\"garyfallidis17\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis17<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based\nregistration and clustering, Neuroimage, 2017.</p>\n</div>\n</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\">\n<span class=\"sig-name descname\"><span class=\"pre\">optimize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the minimum of the provided metric.</p>\n<section id=\"id165\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id165\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">streamlines</span></dt><dd><p>Reference or fixed set of streamlines.</p>\n</dd>\n<dt>moving<span class=\"classifier\">streamlines</span></dt><dd><p>Moving set of streamlines.</p>\n</dd>\n<dt>mat<span class=\"classifier\">array</span></dt><dd><p>Transformation (4, 4) matrix to start the registration. <code class=\"docutils literal notranslate\"><span class=\"pre\">mat</span></code>\nis applied to moving. Default value None which means that initial\ntransformation will be generated by shifting the centers of moving\nand static sets of streamlines to the origin.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id166\">\n<h4>Returns<a class=\"headerlink\" href=\"#id166\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>map : StreamlineRegistrationMap</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"streamlineregistrationmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a><a class=\"headerlink\" href=\"#streamlineregistrationmap\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineRegistrationMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">StreamlineRegistrationMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">matopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">matopt_history</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">funcs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterations</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineRegistrationMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">matopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">matopt_history</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">funcs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterations</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A map holding the optimum affine matrix and some other parameters\nof the optimization</p>\n<section id=\"id167\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id167\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>matrix<span class=\"classifier\">array,</span></dt><dd><p>4x4 affine matrix which transforms the moving to the static\nstreamlines</p>\n</dd>\n<dt>xopt<span class=\"classifier\">array,</span></dt><dd><p>1d array with the parameters of the transformation after centering</p>\n</dd>\n<dt>fopt<span class=\"classifier\">float,</span></dt><dd><p>final value of the metric</p>\n</dd>\n<dt>matrix_history<span class=\"classifier\">array</span></dt><dd><p>All transformation matrices created during the optimization</p>\n</dd>\n<dt>funcs<span class=\"classifier\">int,</span></dt><dd><p>Number of function evaluations of the optimizer</p>\n</dd>\n<dt>iterations<span class=\"classifier\">int</span></dt><dd><p>Number of iterations of the optimizer</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform moving streamlines to the static.</p>\n<section id=\"id168\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id168\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>moving : streamlines</p>\n</section>\n<section id=\"id169\">\n<h4>Returns<a class=\"headerlink\" href=\"#id169\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>moved : streamlines</p>\n</section>\n<section id=\"id170\">\n<h4>Notes<a class=\"headerlink\" href=\"#id170\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>All this does is apply <code class=\"docutils literal notranslate\"><span class=\"pre\">self.matrix</span></code> to the input streamlines.</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"jointstreamlineregistrationmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap\" title=\"dipy.align.streamlinear.JointStreamlineRegistrationMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JointStreamlineRegistrationMap</span></code></a><a class=\"headerlink\" href=\"#jointstreamlineregistrationmap\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointStreamlineRegistrationMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">JointStreamlineRegistrationMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">matopt_history</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">funcs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterations</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointStreamlineRegistrationMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">matopt_history</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">funcs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterations</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A map holding the optimum affine matrices for halfway streamline\nlinear registration and some other parameters of the optimization.</p>\n<p>xopt is optimized by StreamlineLinearRegistration using the\nJointBundleMinDistanceMetric. In that case the mat argument of the\noptimize method needs to be np.eye(4) to avoid streamline centering.</p>\n<p>This constructor derives and stores the transformations to move both\nstatic and moving bundles to the halfway space.</p>\n<section id=\"id171\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id171\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>xopt<span class=\"classifier\">array</span></dt><dd><p>1d array with the parameters of the transformation.</p>\n</dd>\n<dt>fopt<span class=\"classifier\">float</span></dt><dd><p>Final value of the metric.</p>\n</dd>\n<dt>matopt_history<span class=\"classifier\">array</span></dt><dd><p>All transformation matrices created during the optimization.</p>\n</dd>\n<dt>funcs<span class=\"classifier\">int</span></dt><dd><p>Number of function evaluations of the optimizer.</p>\n</dd>\n<dt>iterations<span class=\"classifier\">int</span></dt><dd><p>Number of iterations of the optimizer.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.JointStreamlineRegistrationMap.transform\">\n<span class=\"sig-name descname\"><span class=\"pre\">transform</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform both static and moving bundles to the halfway space.</p>\n<p>All this does is apply <code class=\"docutils literal notranslate\"><span class=\"pre\">self.matrix1</span></code> and <cite>self.matrix2`</cite> to the\nstatic and moving bundles, respectively.</p>\n<section id=\"id172\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id172\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>static : streamlines</p>\n<p>moving : streamlines</p>\n</section>\n<section id=\"id173\">\n<h4>Returns<a class=\"headerlink\" href=\"#id173\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>static : streamlines</p>\n<p>moving : streamlines</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id174\">\n<h3>logger<a class=\"headerlink\" href=\"#id174\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.logger\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">logger</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.logger\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instances of the Logger class represent a single logging channel. A\n\u201clogging channel\u201d indicates an area of an application. Exactly how an\n\u201carea\u201d is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof \u201cinput processing\u201d might include sub-areas \u201cread CSV files\u201d, \u201cread\nXLS files\u201d and \u201cread Gnumeric files\u201d). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be \u201cinput\u201d for the upper\nlevel, and \u201cinput.csv\u201d, \u201cinput.xls\u201d and \u201cinput.gnu\u201d for the sub-levels.\nThere is no arbitrary limit to the depth of nesting.</p>\n</dd></dl>\n\n</section>\n<section id=\"bundle-sum-distance\">\n<h3>bundle_sum_distance<a class=\"headerlink\" href=\"#bundle-sum-distance\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.bundle_sum_distance\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundle_sum_distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">t</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF distance optimization function (SUM).</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<section id=\"id175\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id175\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>t<span class=\"classifier\">ndarray</span></dt><dd><p>t is a vector of affine transformation parameters with\nsize at least 6.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt>static<span class=\"classifier\">list</span></dt><dd><p>Static streamlines</p>\n</dd>\n<dt>moving<span class=\"classifier\">list</span></dt><dd><p>Moving streamlines. These will be transformed to align with\nthe static streamlines</p>\n</dd>\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads. If -1 then all available threads will be used.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id176\">\n<h4>Returns<a class=\"headerlink\" href=\"#id176\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>cost: float</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundle-min-distance\">\n<h3>bundle_min_distance<a class=\"headerlink\" href=\"#bundle-min-distance\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.bundle_min_distance\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundle_min_distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">t</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN).</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<section id=\"id177\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id177\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>t<span class=\"classifier\">ndarray</span></dt><dd><p>t is a vector of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt>static<span class=\"classifier\">list</span></dt><dd><p>Static streamlines</p>\n</dd>\n<dt>moving<span class=\"classifier\">list</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id178\">\n<h4>Returns<a class=\"headerlink\" href=\"#id178\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>cost: float</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundle-min-distance-fast\">\n<h3>bundle_min_distance_fast<a class=\"headerlink\" href=\"#bundle-min-distance-fast\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.bundle_min_distance_fast\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundle_min_distance_fast</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">t</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">block_size</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN).</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<section id=\"id179\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id179\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>t<span class=\"classifier\">array</span></dt><dd><p>1D array. t is a vector of affine transformation parameters with\nsize at least 6.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt>static<span class=\"classifier\">array</span></dt><dd><p>N*M x 3 array. All the points of the static streamlines. With order of\nstreamlines intact. Where N is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt>moving<span class=\"classifier\">array</span></dt><dd><p>K*M x 3 array. All the points of the moving streamlines. With order of\nstreamlines intact. Where K is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt>block_size<span class=\"classifier\">int</span></dt><dd><p>Number of points per streamline. All streamlines in static and moving\nshould have the same number of points M.</p>\n</dd>\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id228\"><span class=\"problematic\" id=\"id229\">|num_threads + 1|</span></a> is used (enter -1 to\nuse as many threads as possible). 0 raises an error.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id180\">\n<h4>Returns<a class=\"headerlink\" href=\"#id180\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>cost: float</p>\n</section>\n<section id=\"id181\">\n<h4>Notes<a class=\"headerlink\" href=\"#id181\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>This is a faster implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_min_distance</span></code>, which requires\nthat all the points of each streamline are allocated into an ndarray\n(of shape N*M by 3, with N the number of points per streamline and M the\nnumber of streamlines). This can be done by calling\n<cite>dipy.tracking.streamlines.unlist_streamlines</cite>.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundle-min-distance-asymmetric-fast\">\n<h3>bundle_min_distance_asymmetric_fast<a class=\"headerlink\" href=\"#bundle-min-distance-asymmetric-fast\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundle_min_distance_asymmetric_fast</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">t</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">block_size</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN).</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<section id=\"id182\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id182\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>t<span class=\"classifier\">array</span></dt><dd><p>1D array. t is a vector of affine transformation parameters with\nsize at least 6.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt>static<span class=\"classifier\">array</span></dt><dd><p>N*M x 3 array. All the points of the static streamlines. With order of\nstreamlines intact. Where N is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt>moving<span class=\"classifier\">array</span></dt><dd><p>K*M x 3 array. All the points of the moving streamlines. With order of\nstreamlines intact. Where K is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt>block_size<span class=\"classifier\">int</span></dt><dd><p>Number of points per streamline. All streamlines in static and moving\nshould have the same number of points M.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id183\">\n<h4>Returns<a class=\"headerlink\" href=\"#id183\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>cost: float</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"remove-clusters-by-size\">\n<h3>remove_clusters_by_size<a class=\"headerlink\" href=\"#remove-clusters-by-size\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.remove_clusters_by_size\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">remove_clusters_by_size</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">clusters</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.remove_clusters_by_size\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"progressive-slr\">\n<h3>progressive_slr<a class=\"headerlink\" href=\"#progressive-slr\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.progressive_slr\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">progressive_slr</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.progressive_slr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Progressive SLR.</p>\n<p>This is an utility function that allows for example to do affine\nregistration using Streamline-based Linear Registration (SLR)\n<a class=\"reference internal\" href=\"../../examples_built/20_registration/bundle_registration/#garyfallidis15\" id=\"id184\"><span>[Garyfallidis15]</span></a> by starting with translation first, then rigid,\nthen similarity, scaling and finally affine.</p>\n<p>Similarly, if for example, you want to perform rigid then you start with\ntranslation first. This progressive strategy can helps with finding the\noptimal parameters of the final transformation.</p>\n<section id=\"id185\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id185\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>static : Streamlines\nmoving : Streamlines\nmetric : StreamlineDistanceMetric\nx0 : string</p>\n<blockquote>\n<div><p>Could be any of \u2018translation\u2019, \u2018rigid\u2019, \u2018similarity\u2019, \u2018scaling\u2019,\n\u2018affine\u2019</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>bounds<span class=\"classifier\">array</span></dt><dd><p>Boundaries of registration parameters. See variable <cite>DEFAULT_BOUNDS</cite>\nfor example.</p>\n</dd>\n<dt>method<span class=\"classifier\">string</span></dt><dd><p>L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used. Default is \u2018L_BFGS_B\u2019.</p>\n</dd>\n<dt>verbose<span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, log messages. Default:</p>\n</dd>\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id230\"><span class=\"problematic\" id=\"id231\">|num_threads + 1|</span></a> is used (enter -1 to\nuse as many threads as possible). 0 raises an error. Only metrics\nusing OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id186\">\n<h4>References<a class=\"headerlink\" href=\"#id186\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id187\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis15<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015</p>\n</div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"slr-with-qbx\">\n<h3>slr_with_qbx<a class=\"headerlink\" href=\"#slr-with-qbx\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.slr_with_qbx\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">slr_with_qbx</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'affine'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rm_small_clusters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">maxiter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">100</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">select_random</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">greater_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">less_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">250</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qbx_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(40,</span> <span class=\"pre\">30,</span> <span class=\"pre\">20,</span> <span class=\"pre\">15)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">progressive</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.slr_with_qbx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Utility function for registering large tractograms.</p>\n<p>For efficiency, we apply the registration on cluster centroids and remove\nsmall clusters.</p>\n<section id=\"id188\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id188\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>static : Streamlines\nmoving : Streamlines</p>\n<dl class=\"simple\">\n<dt>x0<span class=\"classifier\">str, optional.</span></dt><dd><p>rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt>rm_small_clusters<span class=\"classifier\">int, optional</span></dt><dd><p>Remove clusters that have less than <cite>rm_small_clusters</cite></p>\n</dd>\n<dt>maxiter<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum number of iterations to perform.</p>\n</dd>\n<dt>select_random<span class=\"classifier\">int, optional.</span></dt><dd><p>If not, None selects a random number of streamlines to apply clustering\nDefault None.</p>\n</dd>\n<dt>verbose<span class=\"classifier\">bool, optional</span></dt><dd><p>If True, logs information about optimization. Default: False</p>\n</dd>\n<dt>greater_than<span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt>less_than<span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt>qbx_thr<span class=\"classifier\">variable int</span></dt><dd><p>Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt>nb_pts<span class=\"classifier\">int, optional</span></dt><dd><p>Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt>progressive<span class=\"classifier\">boolean, optional</span></dt><dd><p>(default True)</p>\n</dd>\n<dt>rng<span class=\"classifier\">RandomState</span></dt><dd><p>If None creates RandomState in function.</p>\n</dd>\n<dt>num_threads<span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id232\"><span class=\"problematic\" id=\"id233\">|num_threads + 1|</span></a> is used (enter -1 to\nuse as many threads as possible). 0 raises an error. Only metrics\nusing OpenMP will use this variable.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id189\">\n<h4>Notes<a class=\"headerlink\" href=\"#id189\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The order of operations is the following. First short or long streamlines\nare removed. Second, the tractogram or a random selection of the tractogram\nis clustered with QuickBundles. Then SLR <a class=\"reference internal\" href=\"../../examples_built/20_registration/bundle_registration/#garyfallidis15\" id=\"id190\"><span>[Garyfallidis15]</span></a> is applied.</p>\n</section>\n<section id=\"id191\">\n<h4>References<a class=\"headerlink\" href=\"#id191\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id192\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis15<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. \u201cRobust and efficient linear</p>\n</div>\n</div>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div><p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div></blockquote>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id193\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis17<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter</p>\n</div>\n</div>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"groupwise-slr\">\n<h3>groupwise_slr<a class=\"headerlink\" href=\"#groupwise-slr\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.groupwise_slr\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">groupwise_slr</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bundles</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'affine'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qbx_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">[4]</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">select_random</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10000</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.groupwise_slr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function to perform unbiased groupwise bundle registration.</p>\n<p>All bundles are moved to the same space by iteratively applying halfway\nstreamline linear registration in pairs. With each iteration, bundles get\ncloser to each other until the procedure converges and there is no more\nimprovement.</p>\n<section id=\"id194\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id194\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>bundles<span class=\"classifier\">list</span></dt><dd><p>List with streamlines of the bundles to be registered.</p>\n</dd>\n<dt>x0<span class=\"classifier\">str, optional</span></dt><dd><p>rigid, similarity or affine transformation model. Default: affine.</p>\n</dd>\n<dt>tol<span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance value to be used to assume convergence. Default: 0.</p>\n</dd>\n<dt>max_iter<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum number of iterations. Depending on the number of bundles to be\nregistered this may need to be larger. Default: 20.</p>\n</dd>\n<dt>qbx_thr<span class=\"classifier\">variable int, optional</span></dt><dd><p>Thresholds for Quickbundles used for clustering streamlines and reduce\ncomputational time. If None, no clustering is performed. Higher values\ncluster streamlines into a smaller number of centroids. Default: [4].</p>\n</dd>\n<dt>nb_pts<span class=\"classifier\">int, optional</span></dt><dd><p>Number of points for discretizing each streamline. Default: 20.</p>\n</dd>\n<dt>select_random<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum number of streamlines for each bundle. If None, all the\nstreamlines are used. Default: 10000.</p>\n</dd>\n<dt>verbose<span class=\"classifier\">bool, optional</span></dt><dd><p>If True, logs information. Default: False.</p>\n</dd>\n<dt>rng<span class=\"classifier\">RandomState</span></dt><dd><p>If None, creates RandomState in function. Default: None.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id195\">\n<h4>References<a class=\"headerlink\" href=\"#id195\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id196\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis15<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. \u201cRobust and efficient linear</p>\n</div>\n</div>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div><p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div></blockquote>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id197\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis17<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter</p>\n</div>\n</div>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"get-unique-pairs\">\n<h3>get_unique_pairs<a class=\"headerlink\" href=\"#get-unique-pairs\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.get_unique_pairs\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_unique_pairs</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pairs</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.get_unique_pairs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Make unique pairs from n_bundle bundles.</p>\n<p>The function allows to input a previous pairs assignment so that the new\npairs are different.</p>\n<section id=\"id198\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id198\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n_bundle<span class=\"classifier\">int</span></dt><dd><p>Number of bundles to be matched in pairs.</p>\n</dd>\n<dt>pairs<span class=\"classifier\">array, optional</span></dt><dd><p>array containing the indexes of previous pairs.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"compose-matrix44\">\n<h3>compose_matrix44<a class=\"headerlink\" href=\"#compose-matrix44\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.compose_matrix44\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">compose_matrix44</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">t</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dtype=&lt;class</span> <span class=\"pre\">'numpy.float64'&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose a 4x4 transformation matrix.</p>\n<section id=\"id199\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id199\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>t<span class=\"classifier\">ndarray</span></dt><dd><p>This is a 1D vector of affine transformation parameters with\nsize at least 3.\nIf the size is 3, t is interpreted as translation.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf the size is 9, t is interpreted as translation + rotation +\nanisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id200\">\n<h4>Returns<a class=\"headerlink\" href=\"#id200\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">ndarray</span></dt><dd><p>Homogeneous transformation matrix of size 4x4.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"decompose-matrix44\">\n<h3>decompose_matrix44<a class=\"headerlink\" href=\"#decompose-matrix44\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamlinear.decompose_matrix44\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamlinear.</span></span><span class=\"sig-name descname\"><span class=\"pre\">decompose_matrix44</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">12</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a 4x4 homogeneous matrix return the parameter vector.</p>\n<section id=\"id201\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id201\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mat<span class=\"classifier\">array</span></dt><dd><p>Homogeneous 4x4 transformation matrix</p>\n</dd>\n<dt>size<span class=\"classifier\">int</span></dt><dd><p>Size of the output vector. 3, for translation, 6 for rigid,\n7 for similarity, 9 for scaling and 12 for affine. Default is 12.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id202\">\n<h4>Returns<a class=\"headerlink\" href=\"#id202\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>t<span class=\"classifier\">ndarray</span></dt><dd><p>One dimensional ndarray of 3, 6, 7, 9 or 12 affine parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"average-bundle-length\">\n<h3>average_bundle_length<a class=\"headerlink\" href=\"#average-bundle-length\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamwarp.average_bundle_length\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">average_bundle_length</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bundle</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamwarp.average_bundle_length\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find average Euclidean length of the bundle in mm.</p>\n<section id=\"id203\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id203\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>bundle<span class=\"classifier\">Streamlines</span></dt><dd><p>Bundle who\u2019s average length is to be calculated.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id204\">\n<h4>Returns<a class=\"headerlink\" href=\"#id204\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>int</dt><dd><p>Average Euclidean length of bundle in mm.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"find-missing\">\n<h3>find_missing<a class=\"headerlink\" href=\"#find-missing\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamwarp.find_missing\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">find_missing</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lst</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cb</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamwarp.find_missing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find unmatched streamline indices in moving bundle.</p>\n<section id=\"id205\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id205\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>lst<span class=\"classifier\">List</span></dt><dd><p>List of integers containing all the streamlines indices in moving\nbundle.</p>\n</dd>\n<dt>cb<span class=\"classifier\">List</span></dt><dd><p>List of integers containing streamline indices of the moving bundle\nthat were not matched to any streamline in static bundle.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id206\">\n<h4>Returns<a class=\"headerlink\" href=\"#id206\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>list</dt><dd><p>List containing unmatched streamlines from moving bundle</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundlewarp\">\n<h3>bundlewarp<a class=\"headerlink\" href=\"#bundlewarp\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamwarp.bundlewarp\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundlewarp</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dist</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.3</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">affine</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamwarp.bundlewarp\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register two bundles using nonlinear method.</p>\n<section id=\"id207\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id207\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>static<span class=\"classifier\">Streamlines</span></dt><dd><p>Reference/fixed bundle</p>\n</dd>\n<dt>moving<span class=\"classifier\">Streamlines</span></dt><dd><p>Target bundle that will be moved/registered to match the static bundle</p>\n</dd>\n<dt>dist<span class=\"classifier\">float, optional.</span></dt><dd><p>Precomputed distance matrix (default None)</p>\n</dd>\n<dt>alpha<span class=\"classifier\">float, optional</span></dt><dd><p>Represents the trade-off between regularizing the deformation and\nhaving points match very closely. Lower value of alpha means high\ndeformations (default 0.3)</p>\n</dd>\n<dt>beta<span class=\"classifier\">int, optional</span></dt><dd><p>Represents the strength of the interaction between points\nGaussian kernel size (default 20)</p>\n</dd>\n<dt>max_iter<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum number of iterations for deformation process in ml-CPD method\n(default 15)</p>\n</dd>\n<dt>affine<span class=\"classifier\">boolean, optional</span></dt><dd><p>If False, use rigid registration as starting point (default True)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id208\">\n<h4>Returns<a class=\"headerlink\" href=\"#id208\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>deformed_bundle<span class=\"classifier\">Streamlines</span></dt><dd><p>Nonlinearly moved bundle (warped bundle)</p>\n</dd>\n<dt>moving_aligned<span class=\"classifier\">Streamlines</span></dt><dd><p>Linearly moved bundle (affinely moved)</p>\n</dd>\n<dt>dist<span class=\"classifier\">np.ndarray</span></dt><dd><p>Float array containing distance between moving and static bundle</p>\n</dd>\n<dt>matched_pairs<span class=\"classifier\">np.ndarray</span></dt><dd><p>Int array containing streamline correspondences between two bundles</p>\n</dd>\n<dt>warp<span class=\"classifier\">np.ndarray</span></dt><dd><p>Nonlinear warp map generated by BundleWarp</p>\n</dd>\n</dl>\n</section>\n<section id=\"id209\">\n<h4>References<a class=\"headerlink\" href=\"#id209\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"chandio2023\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Chandio2023<span class=\"fn-bracket\">]</span></span>\n<p>Chandio et al. \u201cBundleWarp, streamline-based nonlinear\nregistration of white matter tracts.\u201d bioRxiv (2023): 2023-01.</p>\n</div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundlewarp-vector-filed\">\n<h3>bundlewarp_vector_filed<a class=\"headerlink\" href=\"#bundlewarp-vector-filed\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamwarp.bundlewarp_vector_filed\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundlewarp_vector_filed</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_aligned</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">deformed_bundle</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamwarp.bundlewarp_vector_filed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate vector fields.</p>\n<p>Vector field computation as the difference between each streamline point\nin the deformed and linearly aligned bundles</p>\n<section id=\"id210\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id210\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving_aligned<span class=\"classifier\">Streamlines</span></dt><dd><p>Linearly (affinely) moved bundle</p>\n</dd>\n<dt>deformed_bundle<span class=\"classifier\">Streamlines</span></dt><dd><p>Nonlinearly (warped) bundle</p>\n</dd>\n</dl>\n</section>\n<section id=\"id211\">\n<h4>Returns<a class=\"headerlink\" href=\"#id211\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>offsets<span class=\"classifier\">List</span></dt><dd><p>Vector field modules</p>\n</dd>\n<dt>directions<span class=\"classifier\">List</span></dt><dd><p>Unitary vector directions</p>\n</dd>\n</dl>\n<p>colors : List</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bundlewarp-shape-analysis\">\n<h3>bundlewarp_shape_analysis<a class=\"headerlink\" href=\"#bundlewarp-shape-analysis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.align.streamwarp.bundlewarp_shape_analysis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.align.streamwarp.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundlewarp_shape_analysis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving_aligned</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">deformed_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">no_disks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">plotting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamwarp.bundlewarp_shape_analysis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate bundle shape difference profile.</p>\n<p>Bundle shape difference analysis using magnitude from BundleWarp\ndisplacements and BUAN</p>\n<section id=\"id212\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id212\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>moving_aligned<span class=\"classifier\">Streamlines</span></dt><dd><p>Linearly (affinely) moved bundle</p>\n</dd>\n<dt>deformed_bundle<span class=\"classifier\">Streamlines</span></dt><dd><p>Nonlinearly (warped) bundle</p>\n</dd>\n<dt>no_disks<span class=\"classifier\">int</span></dt><dd><p>Number of segments to be created along the length of the bundle\n(Default 10)</p>\n</dd>\n<dt>plotting<span class=\"classifier\">Boolean, optional</span></dt><dd><p>Plot bundle shape profile (default False)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id213\">\n<h4>Returns<a class=\"headerlink\" href=\"#id213\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>shape_profilen<span class=\"classifier\">np.ndarray</span></dt><dd><p>Float array containing bundlewarp displacement magnitudes along the\nlength of the bundle</p>\n</dd>\n<dt>stdv<span class=\"classifier\">np.ndarray</span></dt><dd><p>Float array containing standard deviations</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.boots", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>", "N", "next"], ["reference/dipy.__config__", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__config__</span></code>", "P", "previous"]], "sourcename": "reference/dipy.align.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.align._public\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align._public</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.cpd\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.cpd</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#note\">Note</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imaffine\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imaffine</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imwarp\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imwarp</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.metrics\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.metrics</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.reslice\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.reslice</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.scalespace\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.scalespace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.streamlinear\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.streamlinear</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.streamwarp\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.streamwarp</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bunch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.Bunch\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.Bunch.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Bunch.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#verbositylevels\">VerbosityLevels</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.VerbosityLevels\"><code class=\"docutils literal notranslate\"><span class=\"pre\">VerbosityLevels()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#syn-registration\">syn_registration</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#register-dwi-to-template\">register_dwi_to_template</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_to_template\"><code class=\"docutils literal notranslate\"><span class=\"pre\">register_dwi_to_template()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#write-mapping\">write_mapping</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.write_mapping\"><code class=\"docutils literal notranslate\"><span class=\"pre\">write_mapping()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#read-mapping\">read_mapping</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.read_mapping\"><code class=\"docutils literal notranslate\"><span class=\"pre\">read_mapping()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#resample\">resample</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.resample\"><code class=\"docutils literal notranslate\"><span class=\"pre\">resample()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#affine-registration\">affine_registration</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#center-of-mass\">center_of_mass</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.center_of_mass\"><code class=\"docutils literal notranslate\"><span class=\"pre\">center_of_mass()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#translation\">translation</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.translation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">translation()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rigid\">rigid</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.rigid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rigid()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rigid-isoscaling\">rigid_isoscaling</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.rigid_isoscaling\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rigid_isoscaling()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rigid-scaling\">rigid_scaling</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.rigid_scaling\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rigid_scaling()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#affine\">affine</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.affine\"><code class=\"docutils literal notranslate\"><span class=\"pre\">affine()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#method-dict\">_METHOD_DICT</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public._METHOD_DICT\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_METHOD_DICT()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#register-series\">register_series</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.register_series\"><code class=\"docutils literal notranslate\"><span class=\"pre\">register_series()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#register-dwi-series\">register_dwi_series</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_series\"><code class=\"docutils literal notranslate\"><span class=\"pre\">register_dwi_series()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#motion-correction\">motion_correction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.motion_correction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">motion_correction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streamline-registration\">streamline_registration</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align._public.streamline_registration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">streamline_registration()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#deformableregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeformableRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.expectation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.expectation()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.get_registration_parameters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.get_registration_parameters()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.iterate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.iterate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.maximization\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.maximization()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.register\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.register()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.transform_point_cloud\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.transform_point_cloud()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.update_transform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.update_transform()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.DeformableRegistration.update_variance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeformableRegistration.update_variance()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#gaussian-kernel\">gaussian_kernel</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.gaussian_kernel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gaussian_kernel()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#low-rank-eigen\">low_rank_eigen</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.low_rank_eigen\"><code class=\"docutils literal notranslate\"><span class=\"pre\">low_rank_eigen()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#initialize-sigma2\">initialize_sigma2</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.initialize_sigma2\"><code class=\"docutils literal notranslate\"><span class=\"pre\">initialize_sigma2()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lowrankqs\">lowrankQS</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.cpd.lowrankQS\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lowrankQS()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#affineinversionerror\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineInversionError.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#affineinvalidvalueserror\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInvalidValuesError.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#affinemap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.get_affine\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap.get_affine()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.set_affine\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap.set_affine()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap.transform()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap.transform_inverse()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mutualinformationmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric.distance()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric.distance_and_gradient()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric.gradient()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric.setup()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#affineregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineRegistration.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration.docstring_addendum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineRegistration.docstring_addendum</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineRegistration.optimize()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#transform-method\">_transform_method</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine._transform_method\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_transform_method()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#transform-centers-of-mass\">transform_centers_of_mass</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_centers_of_mass\"><code class=\"docutils literal notranslate\"><span class=\"pre\">transform_centers_of_mass()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#transform-geometric-centers\">transform_geometric_centers</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_geometric_centers\"><code class=\"docutils literal notranslate\"><span class=\"pre\">transform_geometric_centers()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#transform-origins\">transform_origins</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_origins\"><code class=\"docutils literal notranslate\"><span class=\"pre\">transform_origins()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicmap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.allocate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.compute_inversion_error()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.expand_fields()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.get_backward_field()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.get_forward_field()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.get_simplified_transform()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.interpret_matrix()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.inverse()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.shallow_copy()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.transform()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.transform_inverse()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.transform_points()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_points_inverse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.transform_points_inverse()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap.warp_endomorphism()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration.get_map()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration.optimize()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration.set_level_iters()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#symmetricdiffeomorphicregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration.get_map()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration.optimize()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration.update()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#registrationstages\">RegistrationStages</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.RegistrationStages\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RegistrationStages()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#logger\">logger</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.logger\"><code class=\"docutils literal notranslate\"><span class=\"pre\">logger()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mult-aff\">mult_aff</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.mult_aff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mult_aff()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#get-direction-and-spacings\">get_direction_and_spacings</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.imwarp.get_direction_and_spacings\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_direction_and_spacings()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#similaritymetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.compute_backward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.compute_forward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.free_iteration()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.get_energy()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.initialize_iteration()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.set_levels_above()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.set_levels_below()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.set_moving_image()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.set_static_image()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.use_moving_image_dynamics()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimilarityMetric.use_static_image_dynamics()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ccmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_backward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric.compute_backward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_forward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric.compute_forward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.free_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric.free_iteration()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.get_energy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric.get_energy()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric.initialize_iteration()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#emmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_backward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.compute_backward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.compute_demons_step()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_forward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.compute_forward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.compute_gauss_newton_step()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.free_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.free_iteration()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.get_energy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.get_energy()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.initialize_iteration()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.use_moving_image_dynamics()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric.use_static_image_dynamics()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ssdmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.compute_backward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.compute_demons_step()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.compute_forward()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.compute_gauss_newton_step()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.free_iteration()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.get_energy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.get_energy()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric.initialize_iteration()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#v-cycle-2d\">v_cycle_2d</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_2d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">v_cycle_2d()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#v-cycle-3d\">v_cycle_3d</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_3d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">v_cycle_3d()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.reslice.reslice\"><code class=\"docutils literal notranslate\"><span class=\"pre\">reslice()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#scalespace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_affine()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_affine_inv()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_domain_shape()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_expand_factors()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_image()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_scaling()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_sigmas()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.get_spacing()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ScaleSpace.print_level()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#isotropicscalespace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id136\">logger</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.scalespace.logger\"><code class=\"docutils literal notranslate\"><span class=\"pre\">logger()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streamlinedistancemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric.distance()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric.setup()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric.distance()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric.setup()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancematrixmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric.distance()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric.setup()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlemindistanceasymmetricmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric.distance()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlesumdistancematrixmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric.distance()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#jointbundlemindistancemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric.distance()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointBundleMinDistanceMetric.setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointBundleMinDistanceMetric.setup()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streamlinelinearregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration.optimize()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streamlineregistrationmap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap.transform()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#jointstreamlineregistrationmap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JointStreamlineRegistrationMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointStreamlineRegistrationMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointStreamlineRegistrationMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.JointStreamlineRegistrationMap.transform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JointStreamlineRegistrationMap.transform()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id174\">logger</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.logger\"><code class=\"docutils literal notranslate\"><span class=\"pre\">logger()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundle-sum-distance\">bundle_sum_distance</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_sum_distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_sum_distance()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance\">bundle_min_distance</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_min_distance()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance-fast\">bundle_min_distance_fast</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_min_distance_fast()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance-asymmetric-fast\">bundle_min_distance_asymmetric_fast</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_min_distance_asymmetric_fast()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#remove-clusters-by-size\">remove_clusters_by_size</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.remove_clusters_by_size\"><code class=\"docutils literal notranslate\"><span class=\"pre\">remove_clusters_by_size()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#progressive-slr\">progressive_slr</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.progressive_slr\"><code class=\"docutils literal notranslate\"><span class=\"pre\">progressive_slr()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#slr-with-qbx\">slr_with_qbx</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.slr_with_qbx\"><code class=\"docutils literal notranslate\"><span class=\"pre\">slr_with_qbx()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#groupwise-slr\">groupwise_slr</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.groupwise_slr\"><code class=\"docutils literal notranslate\"><span class=\"pre\">groupwise_slr()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#get-unique-pairs\">get_unique_pairs</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.get_unique_pairs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_unique_pairs()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#compose-matrix44\">compose_matrix44</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix44\"><code class=\"docutils literal notranslate\"><span class=\"pre\">compose_matrix44()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix44\">decompose_matrix44</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix44\"><code class=\"docutils literal notranslate\"><span class=\"pre\">decompose_matrix44()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#average-bundle-length\">average_bundle_length</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamwarp.average_bundle_length\"><code class=\"docutils literal notranslate\"><span class=\"pre\">average_bundle_length()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#find-missing\">find_missing</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamwarp.find_missing\"><code class=\"docutils literal notranslate\"><span class=\"pre\">find_missing()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlewarp\">bundlewarp</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamwarp.bundlewarp\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundlewarp()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlewarp-vector-filed\">bundlewarp_vector_filed</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamwarp.bundlewarp_vector_filed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundlewarp_vector_filed()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlewarp-shape-analysis\">bundlewarp_shape_analysis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.align.streamwarp.bundlewarp_shape_analysis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundlewarp_shape_analysis()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.align", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}