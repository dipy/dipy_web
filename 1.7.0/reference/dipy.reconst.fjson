{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.nn/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code>"}, "next": {"link": "../dipy.segment/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code>", "meta": {}, "body": "<section id=\"module-dipy.reconst\">\n<span id=\"reconst\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n</tbody>\n</table>\n<section id=\"module-dipy.reconst.base\">\n<span id=\"module-reconst-base\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.base</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.base\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Base-classes for reconstruction models and reconstruction fits.</p>\n<p>All the models in the reconst module follow the same template: a Model object\nis used to represent the abstract properties of the model, that are independent\nof the specifics of the data . These properties are reused whenever fitting a\nparticular set of data (different voxels, for example).</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a>(gtab)</p></td>\n<td><p>Abstract class for signal reconstruction models</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a>(model,\u00a0data)</p></td>\n<td><p>Abstract class which holds the fit result of ReconstModel</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.benchmarks\">\n<span id=\"module-reconst-benchmarks\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.benchmarks\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.benchmarks.bench_bounding_box\">\n<span id=\"module-reconst-benchmarks-bench-bounding-box\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_bounding_box</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.benchmarks.bench_bounding_box\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Benchmarks for bounding_box</p>\n<p>Run all benchmarks with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst</span> <span class=\"k\">as</span> <span class=\"nn\">dire</span>\n<span class=\"n\">dire</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With Pytest, Run this benchmark with:</p>\n<blockquote>\n<div><p>pytest -svv -c bench.ini /path/to/bench_bounding_box.py</p>\n</div></blockquote>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box\" title=\"dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_bounding_box</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.benchmarks.bench_csd\">\n<span id=\"module-reconst-benchmarks-bench-csd\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_csd</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.benchmarks.bench_csd\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_csd.num_grad\" title=\"dipy.reconst.benchmarks.bench_csd.num_grad\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">num_grad</span></code></a>(gtab)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_csd.bench_csdeconv\" title=\"dipy.reconst.benchmarks.bench_csd.bench_csdeconv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_csdeconv</span></code></a>([center,\u00a0width])</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.benchmarks.bench_peaks\">\n<span id=\"module-reconst-benchmarks-bench-peaks\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_peaks</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.benchmarks.bench_peaks\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Benchmarks for peak finding</p>\n<p>Run all benchmarks with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst</span> <span class=\"k\">as</span> <span class=\"nn\">dire</span>\n<span class=\"n\">dire</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With Pytest, Run this benchmark with:</p>\n<blockquote>\n<div><p>pytest -svv -c bench.ini /path/to/bench_peaks.py</p>\n</div></blockquote>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_peaks.bench_local_maxima\" title=\"dipy.reconst.benchmarks.bench_peaks.bench_local_maxima\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_local_maxima</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.benchmarks.bench_squash\">\n<span id=\"module-reconst-benchmarks-bench-squash\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_squash</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.benchmarks.bench_squash\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Benchmarks for fast squashing</p>\n<p>Run all benchmarks with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst</span> <span class=\"k\">as</span> <span class=\"nn\">dire</span>\n<span class=\"n\">dire</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With Pytest, Run this benchmark with:</p>\n<blockquote>\n<div><p>pytest -svv -c bench.ini /path/to/bench_squash.py</p>\n</div></blockquote>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_squash.old_squash\" title=\"dipy.reconst.benchmarks.bench_squash.old_squash\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">old_squash</span></code></a>(arr[,\u00a0mask,\u00a0fill])</p></td>\n<td><p>Try and make a standard array from an object array</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_squash.bench_quick_squash\" title=\"dipy.reconst.benchmarks.bench_squash.bench_quick_squash\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_quick_squash</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.benchmarks.bench_vec_val_sum\">\n<span id=\"module-reconst-benchmarks-bench-vec-val-sum\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_vec_val_sum</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.benchmarks.bench_vec_val_sum\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Benchmarks for vec / val summation routine</p>\n<p>Run benchmarks with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst</span> <span class=\"k\">as</span> <span class=\"nn\">dire</span>\n<span class=\"n\">dire</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With Pytest, Run this benchmark with:</p>\n<blockquote>\n<div><p>pytest -svv -c bench.ini /path/to/bench_vec_val_sum.py</p>\n</div></blockquote>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect\" title=\"dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_vec_val_vect</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.cache\">\n<span id=\"module-reconst-cache\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.cache</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.cache\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a>()</p></td>\n<td><p>Cache values based on a key object (such as a sphere or gradient table).</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.cross_validation\">\n<span id=\"module-reconst-cross-validation\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.cross_validation</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.cross_validation\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Cross-validation analysis of diffusion models.</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.cross_validation.coeff_of_determination\" title=\"dipy.reconst.cross_validation.coeff_of_determination\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">coeff_of_determination</span></code></a>(data,\u00a0model[,\u00a0axis])</p></td>\n<td><p>Calculate the coefficient of determination for a model prediction,</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.cross_validation.kfold_xval\" title=\"dipy.reconst.cross_validation.kfold_xval\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">kfold_xval</span></code></a>(model,\u00a0data,\u00a0folds,\u00a0*model_args,\u00a0...)</p></td>\n<td><p>Perform k-fold cross-validation.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.csdeconv\">\n<span id=\"module-reconst-csdeconv\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.csdeconv</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.csdeconv\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.AxSymShResponse\" title=\"dipy.reconst.csdeconv.AxSymShResponse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AxSymShResponse</span></code></a>(S0,\u00a0dwi_response[,\u00a0bvalue])</p></td>\n<td><p>A simple wrapper for response functions represented using only axially symmetric, even spherical harmonic functions (ie, m == 0 and n even).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\" title=\"dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a>(gtab,\u00a0response)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel\" title=\"dipy.reconst.csdeconv.ConstrainedSDTModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstrainedSDTModel</span></code></a>(gtab,\u00a0ratio[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.auto_response\" title=\"dipy.reconst.csdeconv.auto_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_response</span></code></a>(gtab,\u00a0data[,\u00a0roi_center,\u00a0...])</p></td>\n<td><p>Automatic estimation of ssst response function using FA.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.response_from_mask\" title=\"dipy.reconst.csdeconv.response_from_mask\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">response_from_mask</span></code></a>(gtab,\u00a0data,\u00a0mask)</p></td>\n<td><p>Computation of single-shell single-tissue (ssst) response</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.estimate_response\" title=\"dipy.reconst.csdeconv.estimate_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">estimate_response</span></code></a>(gtab,\u00a0evals,\u00a0S0)</p></td>\n<td><p>Estimate single fiber response function</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.forward_sdt_deconv_mat\" title=\"dipy.reconst.csdeconv.forward_sdt_deconv_mat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">forward_sdt_deconv_mat</span></code></a>(ratio,\u00a0n[,\u00a0r2_term])</p></td>\n<td><p>Build forward sharpening deconvolution transform (SDT) matrix\n\nParameters\n----------\nratio : float\n    ratio = <span class=\"math notranslate nohighlight\">\\(\\frac{\\lambda_2}{\\lambda_1}\\)</span> of the single fiber response\n    function\nn : ndarray (N,)\n    The degree of spherical harmonic function associated with each row of\n    the deconvolution matrix.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.csdeconv\" title=\"dipy.reconst.csdeconv.csdeconv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">csdeconv</span></code></a>(dwsignal,\u00a0X,\u00a0B_reg[,\u00a0tau,\u00a0...])</p></td>\n<td><p>Constrained-regularized spherical deconvolution (CSD) <a href=\"#id1275\"><span class=\"problematic\" id=\"id1\">[1]_</span></a>\n\nDeconvolves the axially symmetric single fiber response function <cite>r_rh</cite> in\nrotational harmonics coefficients from the diffusion weighted signal in\n<cite>dwsignal</cite>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.odf_deconv\" title=\"dipy.reconst.csdeconv.odf_deconv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">odf_deconv</span></code></a>(odf_sh,\u00a0R,\u00a0B_reg[,\u00a0lambda_,\u00a0tau,\u00a0...])</p></td>\n<td><p>ODF constrained-regularized spherical deconvolution using\nthe Sharpening Deconvolution Transform (SDT) <a href=\"#id1276\"><span class=\"problematic\" id=\"id2\">[1]_</span></a>, <a href=\"#id1277\"><span class=\"problematic\" id=\"id3\">[2]_</span></a>. Parameters\n----------\nodf_sh : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)*(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,)\n     ndarray of SH coefficients for the ODF spherical function to be\n     deconvolved\nR : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,\n     <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>)\n     SDT matrix in SH basis\nB_reg : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,\n     <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>)\n     SH basis matrix used for deconvolution\n<a href=\"#id1278\"><span class=\"problematic\" id=\"id1279\">lambda_</span></a> : float\n     lambda parameter in minimization equation (default 1.0)\ntau : float\n     threshold (tau <a href=\"#id4\"><span class=\"problematic\" id=\"id5\">*</span></a>max(fODF)) controlling the amplitude below\n     which the corresponding fODF is assumed to be zero. r2_term : bool\n     True if ODF is computed from model that uses the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the\n     integral. Recall that Tuch's ODF (used in Q-ball Imaging <a href=\"#id1280\"><span class=\"problematic\" id=\"id6\">[1]_</span></a>) and\n     the true normalized ODF definition differ from a <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the ODF\n     integral. The original Sharpening Deconvolution Transform (SDT)\n     technique <a href=\"#id1281\"><span class=\"problematic\" id=\"id7\">[2]_</span></a> is expecting Tuch's ODF without the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> (see <a href=\"#id1282\"><span class=\"problematic\" id=\"id8\">[3]_</span></a> for\n     the mathematical details). Now, this function supports ODF that have\n     been computed using the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term because the proper analytical\n     response function has be derived. For example, models such as DSI,\n     GQI, SHORE, CSA, Tensor, Multi-tensor ODFs, should now be deconvolved\n     with the r2_term=True. Returns\n-------\nfodf_sh : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,)\n     Spherical harmonics coefficients of the constrained-regularized fiber\n     ODF\nnum_it : int\n     Number of iterations in the constrained-regularization used for\n     convergence\n\nReferences\n----------\n.. [1] Tuch, D. MRM 2004. Q-Ball Imaging. .. [2] Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\n       Probabilistic Tractography Based on Complex Fibre Orientation\n       Distributions\n.. [3] Descoteaux, M, PhD thesis, INRIA Sophia-Antipolis, 2008. .</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.odf_sh_to_sharp\" title=\"dipy.reconst.csdeconv.odf_sh_to_sharp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">odf_sh_to_sharp</span></code></a>(odfs_sh,\u00a0sphere[,\u00a0basis,\u00a0...])</p></td>\n<td><p>Sharpen odfs using the sharpening deconvolution transform <a href=\"#id1283\"><span class=\"problematic\" id=\"id9\">[2]_</span></a>\n\nThis function can be used to sharpen any smooth ODF spherical function.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.mask_for_response_ssst\" title=\"dipy.reconst.csdeconv.mask_for_response_ssst\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mask_for_response_ssst</span></code></a>(gtab,\u00a0data[,\u00a0...])</p></td>\n<td><p>Computation of mask for single-shell single-tissue (ssst) response</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.response_from_mask_ssst\" title=\"dipy.reconst.csdeconv.response_from_mask_ssst\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">response_from_mask_ssst</span></code></a>(gtab,\u00a0data,\u00a0mask)</p></td>\n<td><p>Computation of single-shell single-tissue (ssst) response</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.auto_response_ssst\" title=\"dipy.reconst.csdeconv.auto_response_ssst\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_response_ssst</span></code></a>(gtab,\u00a0data[,\u00a0roi_center,\u00a0...])</p></td>\n<td><p>Automatic estimation of single-shell single-tissue (ssst) response</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.recursive_response\" title=\"dipy.reconst.csdeconv.recursive_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">recursive_response</span></code></a>(gtab,\u00a0data[,\u00a0mask,\u00a0...])</p></td>\n<td><p>Recursive calibration of response function using peak threshold</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.fa_trace_to_lambdas\" title=\"dipy.reconst.csdeconv.fa_trace_to_lambdas\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fa_trace_to_lambdas</span></code></a>([fa,\u00a0trace])</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.dki\">\n<span id=\"module-reconst-dki\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dki</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.dki\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting the diffusion kurtosis model</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel\" title=\"dipy.reconst.dki.DiffusionKurtosisModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a>(gtab[,\u00a0fit_method])</p></td>\n<td><p>Class for the Diffusion Kurtosis Model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit\" title=\"dipy.reconst.dki.DiffusionKurtosisFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit</span></code></a>(model,\u00a0model_params)</p></td>\n<td><p>Class for fitting the Diffusion Kurtosis Model</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.carlson_rf\" title=\"dipy.reconst.dki.carlson_rf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">carlson_rf</span></code></a>(x,\u00a0y,\u00a0z[,\u00a0errtol])</p></td>\n<td><p>Compute the Carlson's incomplete elliptic integral of the first kind</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.carlson_rd\" title=\"dipy.reconst.dki.carlson_rd\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">carlson_rd</span></code></a>(x,\u00a0y,\u00a0z[,\u00a0errtol])</p></td>\n<td><p>Compute the Carlson's incomplete elliptic integral of the second kind</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.directional_diffusion\" title=\"dipy.reconst.dki.directional_diffusion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">directional_diffusion</span></code></a>(dt,\u00a0V[,\u00a0min_diffusivity])</p></td>\n<td><p>Calculate the apparent diffusion coefficient (adc) in each direction of a sphere for a single voxel <a href=\"#id1284\"><span class=\"problematic\" id=\"id10\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.directional_diffusion_variance\" title=\"dipy.reconst.dki.directional_diffusion_variance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">directional_diffusion_variance</span></code></a>(kt,\u00a0V[,\u00a0...])</p></td>\n<td><p>Calculate the apparent diffusion variance (adv) in each direction of a sphere for a single voxel <a href=\"#id1285\"><span class=\"problematic\" id=\"id11\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.directional_kurtosis\" title=\"dipy.reconst.dki.directional_kurtosis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">directional_kurtosis</span></code></a>(dt,\u00a0md,\u00a0kt,\u00a0V[,\u00a0...])</p></td>\n<td><p>Calculate the apparent kurtosis coefficient (akc) in each direction of a sphere for a single voxel <a href=\"#id1286\"><span class=\"problematic\" id=\"id12\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.apparent_kurtosis_coef\" title=\"dipy.reconst.dki.apparent_kurtosis_coef\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apparent_kurtosis_coef</span></code></a>(dki_params,\u00a0sphere[,\u00a0...])</p></td>\n<td><p>Calculate the apparent kurtosis coefficient (AKC) in each direction\nof a sphere <a href=\"#id1287\"><span class=\"problematic\" id=\"id13\">[1]_</span></a>\n\nParameters\n----------\ndki_params : ndarray (x, y, z, 27) or (n, 27)\n    All parameters estimated from the diffusion kurtosis model.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.mean_kurtosis\" title=\"dipy.reconst.dki.mean_kurtosis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_kurtosis</span></code></a>(dki_params[,\u00a0min_kurtosis,\u00a0...])</p></td>\n<td><p>Compute mean kurtosis (MK) from the kurtosis tensor\n\nParameters\n----------\ndki_params : ndarray (x, y, z, 27) or (n, 27)\n    All parameters estimated from the diffusion kurtosis model.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.radial_kurtosis\" title=\"dipy.reconst.dki.radial_kurtosis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_kurtosis</span></code></a>(dki_params[,\u00a0min_kurtosis,\u00a0...])</p></td>\n<td><p>Compute radial kurtosis (RK) of a diffusion kurtosis tensor <a href=\"#id1288\"><span class=\"problematic\" id=\"id14\">[1]_</span></a>, <a href=\"#id1289\"><span class=\"problematic\" id=\"id15\">[2]_</span></a></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.axial_kurtosis\" title=\"dipy.reconst.dki.axial_kurtosis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">axial_kurtosis</span></code></a>(dki_params[,\u00a0min_kurtosis,\u00a0...])</p></td>\n<td><p>Compute axial kurtosis (AK) from the kurtosis tensor <a href=\"#id1290\"><span class=\"problematic\" id=\"id16\">[1]_</span></a>, <a href=\"#id1291\"><span class=\"problematic\" id=\"id17\">[2]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.kurtosis_maximum\" title=\"dipy.reconst.dki.kurtosis_maximum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">kurtosis_maximum</span></code></a>(dki_params[,\u00a0sphere,\u00a0gtol,\u00a0...])</p></td>\n<td><p>Compute kurtosis maximum value</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.mean_kurtosis_tensor\" title=\"dipy.reconst.dki.mean_kurtosis_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_kurtosis_tensor</span></code></a>(dki_params[,\u00a0...])</p></td>\n<td><p>Compute mean of the kurtosis tensor (MKT) <a href=\"#id1292\"><span class=\"problematic\" id=\"id18\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.kurtosis_fractional_anisotropy\" title=\"dipy.reconst.dki.kurtosis_fractional_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">kurtosis_fractional_anisotropy</span></code></a>(dki_params)</p></td>\n<td><p>Compute the anisotropy of the kurtosis tensor (KFA) <a href=\"#id1293\"><span class=\"problematic\" id=\"id19\">[1]_</span></a>\n\nParameters\n----------\ndki_params : ndarray (x, y, z, 27) or (n, 27)\n    All parameters estimated from the diffusion kurtosis model.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.dki_prediction\" title=\"dipy.reconst.dki.dki_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dki_prediction</span></code></a>(dki_params,\u00a0gtab[,\u00a0S0])</p></td>\n<td><p>Predict a signal given diffusion kurtosis imaging parameters</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.params_to_dki_params\" title=\"dipy.reconst.dki.params_to_dki_params\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">params_to_dki_params</span></code></a>(result[,\u00a0min_diffusivity])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.ls_fit_dki\" title=\"dipy.reconst.dki.ls_fit_dki\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ls_fit_dki</span></code></a>(design_matrix,\u00a0data,\u00a0...[,\u00a0...])</p></td>\n<td><p>Compute the diffusion and kurtosis tensors using an ordinary or weighted linear least squares approach <a href=\"#id1294\"><span class=\"problematic\" id=\"id20\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.cls_fit_dki\" title=\"dipy.reconst.dki.cls_fit_dki\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cls_fit_dki</span></code></a>(design_matrix,\u00a0data,\u00a0...[,\u00a0...])</p></td>\n<td><p>Compute the diffusion and kurtosis tensors using a constrained ordinary or weighted linear least squares approach <a href=\"#id1295\"><span class=\"problematic\" id=\"id21\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.Wrotate\" title=\"dipy.reconst.dki.Wrotate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Wrotate</span></code></a>(kt,\u00a0Basis)</p></td>\n<td><p>Rotate a kurtosis tensor from the standard Cartesian coordinate system to another coordinate system basis</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.Wrotate_element\" title=\"dipy.reconst.dki.Wrotate_element\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Wrotate_element</span></code></a>(kt,\u00a0indi,\u00a0indj,\u00a0indk,\u00a0indl,\u00a0B)</p></td>\n<td><p>Compute the the specified index element of a kurtosis tensor rotated to the coordinate system basis B</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.Wcons\" title=\"dipy.reconst.dki.Wcons\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Wcons</span></code></a>(k_elements)</p></td>\n<td><p>Construct the full 4D kurtosis tensors from its 15 independent elements</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki.split_dki_param\" title=\"dipy.reconst.dki.split_dki_param\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">split_dki_param</span></code></a>(dki_params)</p></td>\n<td><p>Extract the diffusion tensor eigenvalues, the diffusion tensor eigenvector matrix, and the 15 independent elements of the kurtosis tensor from the model parameters estimated from the DKI model</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.dki_micro\">\n<span id=\"module-reconst-dki-micro\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dki_micro</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.dki_micro\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting the DKI-based microstructural model</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel\" title=\"dipy.reconst.dki_micro.KurtosisMicrostructureModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel</span></code></a>(gtab[,\u00a0fit_method])</p></td>\n<td><p>Class for the Diffusion Kurtosis Microstructural Model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit\" title=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit</span></code></a>(model,\u00a0model_params)</p></td>\n<td><p>Class for fitting the Diffusion Kurtosis Microstructural Model</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.axonal_water_fraction\" title=\"dipy.reconst.dki_micro.axonal_water_fraction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">axonal_water_fraction</span></code></a>(dki_params[,\u00a0sphere,\u00a0...])</p></td>\n<td><p>Computes the axonal water fraction from DKI <a href=\"#id1296\"><span class=\"problematic\" id=\"id22\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.diffusion_components\" title=\"dipy.reconst.dki_micro.diffusion_components\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">diffusion_components</span></code></a>(dki_params[,\u00a0sphere,\u00a0...])</p></td>\n<td><p>Extracts the restricted and hindered diffusion tensors of well aligned fibers from diffusion kurtosis imaging parameters <a href=\"#id1297\"><span class=\"problematic\" id=\"id23\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.dkimicro_prediction\" title=\"dipy.reconst.dki_micro.dkimicro_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dkimicro_prediction</span></code></a>(params,\u00a0gtab[,\u00a0S0])</p></td>\n<td><p>Signal prediction given the DKI microstructure model parameters. Parameters\n----------\nparams : ndarray (x, y, z, 40) or (n, 40)\nAll parameters estimated from the diffusion kurtosis microstructure model. Parameters are ordered as follows:\n        1) Three diffusion tensor's eigenvalues\n        2) Three lines of the eigenvector matrix each containing the\n           first, second and third coordinates of the eigenvector\n        3) Fifteen elements of the kurtosis tensor\n        4) Six elements of the hindered diffusion tensor\n        5) Six elements of the restricted diffusion tensor\n        6) Axonal water fraction\ngtab : a GradientTable class instance\n    The gradient table for this prediction\nS0 : float or ndarray\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nReturns\n-------\nS : (..., N) ndarray\n    Simulated signal based on the DKI microstructure model\n\nNotes\n-----\n1) The predicted signal is given by:\n<span class=\"math notranslate nohighlight\">\\(S(\\theta, b) = S_0 * [f * e^{-b ADC_{r}} + (1-f) * e^{-b ADC_{h}]\\)</span>, where\n:math:` ADC_{r} and ADC_{h} are the apparent diffusion coefficients of the\ndiffusion hindered and restricted compartment for a given direction\n<cite>theta:math:</cite>, <cite>b:math:</cite> is the b value provided in the GradientTable input for that\ndirection, <a href=\"#id24\"><span class=\"problematic\" id=\"id25\">`</span></a>f$ is the volume fraction of the restricted diffusion\ncompartment (also known as the axonal water fraction). 2) In the original article of DKI microstructural model <a href=\"#id1298\"><span class=\"problematic\" id=\"id26\">[1]_</span></a>, the hindered\nand restricted tensors were defined as the intra-cellular and\nextra-cellular diffusion compartments respectively. .</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.tortuosity\" title=\"dipy.reconst.dki_micro.tortuosity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">tortuosity</span></code></a>(hindered_ad,\u00a0hindered_rd)</p></td>\n<td><p>Computes the tortuosity of the hindered diffusion compartment given its axial and radial diffusivities</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.dsi\">\n<span id=\"module-reconst-dsi\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dsi</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.dsi\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel\" title=\"dipy.reconst.dsi.DiffusionSpectrumModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel</span></code></a>(gtab[,\u00a0qgrid_size,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit\" title=\"dipy.reconst.dsi.DiffusionSpectrumFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit</span></code></a>(model,\u00a0data)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel\" title=\"dipy.reconst.dsi.DiffusionSpectrumDeconvModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvModel</span></code></a>(gtab[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit\" title=\"dipy.reconst.dsi.DiffusionSpectrumDeconvFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvFit</span></code></a>(model,\u00a0data)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.create_qspace\" title=\"dipy.reconst.dsi.create_qspace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_qspace</span></code></a>(gtab,\u00a0origin)</p></td>\n<td><p>create the 3D grid which holds the signal values (q-space)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.create_qtable\" title=\"dipy.reconst.dsi.create_qtable\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_qtable</span></code></a>(gtab,\u00a0origin)</p></td>\n<td><p>create a normalized version of gradients</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.hanning_filter\" title=\"dipy.reconst.dsi.hanning_filter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">hanning_filter</span></code></a>(gtab,\u00a0filter_width,\u00a0origin)</p></td>\n<td><p>create a hanning window</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.pdf_interp_coords\" title=\"dipy.reconst.dsi.pdf_interp_coords\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pdf_interp_coords</span></code></a>(sphere,\u00a0rradius,\u00a0origin)</p></td>\n<td><p>Precompute coordinates for ODF calculation from the PDF</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.pdf_odf\" title=\"dipy.reconst.dsi.pdf_odf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pdf_odf</span></code></a>(Pr,\u00a0rradius,\u00a0interp_coords)</p></td>\n<td><p>Calculates the real ODF from the diffusion propagator(PDF) Pr</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.half_to_full_qspace\" title=\"dipy.reconst.dsi.half_to_full_qspace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">half_to_full_qspace</span></code></a>(data,\u00a0gtab)</p></td>\n<td><p>Half to full Cartesian grid mapping</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.project_hemisph_bvecs\" title=\"dipy.reconst.dsi.project_hemisph_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">project_hemisph_bvecs</span></code></a>(gtab)</p></td>\n<td><p>Project any near identical bvecs to the other hemisphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.threshold_propagator\" title=\"dipy.reconst.dsi.threshold_propagator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">threshold_propagator</span></code></a>(P[,\u00a0estimated_snr])</p></td>\n<td><p>Applies hard threshold on the propagator to remove background noise for the deconvolution.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.gen_PSF\" title=\"dipy.reconst.dsi.gen_PSF\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gen_PSF</span></code></a>(qgrid_sampling,\u00a0siz_x,\u00a0siz_y,\u00a0siz_z)</p></td>\n<td><p>Generate a PSF for DSI Deconvolution by taking the ifft of the binary q-space sampling mask and truncating it to keep only the center.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dsi.LR_deconv\" title=\"dipy.reconst.dsi.LR_deconv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LR_deconv</span></code></a>(prop,\u00a0psf[,\u00a0numit,\u00a0acc_factor])</p></td>\n<td><p>Perform Lucy-Richardson deconvolution algorithm on a 3D array.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.dti\">\n<span id=\"module-reconst-dti\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dti</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.dti\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting tensors</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorModel\" title=\"dipy.reconst.dti.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,\u00a0fit_method,\u00a0return_S0_hat])</p></td>\n<td><p>Diffusion Tensor</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit\" title=\"dipy.reconst.dti.TensorFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code></a>(model,\u00a0model_params[,\u00a0model_S0])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.fractional_anisotropy\" title=\"dipy.reconst.dti.fractional_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Return Fractional anisotropy (FA) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.geodesic_anisotropy\" title=\"dipy.reconst.dti.geodesic_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">geodesic_anisotropy</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Geodesic anisotropy (GA) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.mean_diffusivity\" title=\"dipy.reconst.dti.mean_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_diffusivity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Mean Diffusivity (MD) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.axial_diffusivity\" title=\"dipy.reconst.dti.axial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">axial_diffusivity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Axial Diffusivity (AD) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.radial_diffusivity\" title=\"dipy.reconst.dti.radial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_diffusivity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Radial Diffusivity (RD) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.trace\" title=\"dipy.reconst.dti.trace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">trace</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Trace of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.color_fa\" title=\"dipy.reconst.dti.color_fa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color_fa</span></code></a>(fa,\u00a0evecs)</p></td>\n<td><p>Color fractional anisotropy of diffusion tensor</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.determinant\" title=\"dipy.reconst.dti.determinant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">determinant</span></code></a>(q_form)</p></td>\n<td><p>The determinant of a tensor, given in quadratic form</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.isotropic\" title=\"dipy.reconst.dti.isotropic\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">isotropic</span></code></a>(q_form)</p></td>\n<td><p>Calculate the isotropic part of the tensor <a href=\"#id1299\"><span class=\"problematic\" id=\"id27\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.deviatoric\" title=\"dipy.reconst.dti.deviatoric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">deviatoric</span></code></a>(q_form)</p></td>\n<td><p>Calculate the deviatoric (anisotropic) part of the tensor <a href=\"#id1300\"><span class=\"problematic\" id=\"id28\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.norm\" title=\"dipy.reconst.dti.norm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">norm</span></code></a>(q_form)</p></td>\n<td><p>Calculate the Frobenius norm of a tensor quadratic form</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.mode\" title=\"dipy.reconst.dti.mode\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mode</span></code></a>(q_form)</p></td>\n<td><p>Mode (MO) of a diffusion tensor <a href=\"#id1301\"><span class=\"problematic\" id=\"id29\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.linearity\" title=\"dipy.reconst.dti.linearity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">linearity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>The linearity of the tensor <a href=\"#id1302\"><span class=\"problematic\" id=\"id30\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.planarity\" title=\"dipy.reconst.dti.planarity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">planarity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>The planarity of the tensor <a href=\"#id1303\"><span class=\"problematic\" id=\"id31\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.sphericity\" title=\"dipy.reconst.dti.sphericity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sphericity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>The sphericity of the tensor <a href=\"#id1304\"><span class=\"problematic\" id=\"id32\">[1]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.apparent_diffusion_coef\" title=\"dipy.reconst.dti.apparent_diffusion_coef\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apparent_diffusion_coef</span></code></a>(q_form,\u00a0sphere)</p></td>\n<td><p>Calculate the apparent diffusion coefficient (ADC) in each direction of a sphere.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.tensor_prediction\" title=\"dipy.reconst.dti.tensor_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">tensor_prediction</span></code></a>(dti_params,\u00a0gtab,\u00a0S0)</p></td>\n<td><p>Predict a signal given tensor parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.iter_fit_tensor\" title=\"dipy.reconst.dti.iter_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor</span></code></a>([step])</p></td>\n<td><p>Wrap a fit_tensor func and iterate over chunks of data with given length</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.wls_fit_tensor\" title=\"dipy.reconst.dti.wls_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">wls_fit_tensor</span></code></a>(design_matrix,\u00a0data[,\u00a0...])</p></td>\n<td><p>Computes weighted least squares (WLS) fit to calculate self-diffusion tensor using a linear regression model <a href=\"#id1305\"><span class=\"problematic\" id=\"id33\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.ols_fit_tensor\" title=\"dipy.reconst.dti.ols_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ols_fit_tensor</span></code></a>(design_matrix,\u00a0data[,\u00a0...])</p></td>\n<td><p>Computes ordinary least squares (OLS) fit to calculate self-diffusion tensor using a linear regression model <a href=\"#id1306\"><span class=\"problematic\" id=\"id34\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.nlls_fit_tensor\" title=\"dipy.reconst.dti.nlls_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nlls_fit_tensor</span></code></a>(design_matrix,\u00a0data[,\u00a0...])</p></td>\n<td><p>Fit the cumulant expansion params (e.g.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.restore_fit_tensor\" title=\"dipy.reconst.dti.restore_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">restore_fit_tensor</span></code></a>(design_matrix,\u00a0data[,\u00a0...])</p></td>\n<td><p>Use the RESTORE algorithm <a href=\"#id1307\"><span class=\"problematic\" id=\"id35\">[1]_</span></a> to calculate a robust tensor fit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti._lt_indices\" title=\"dipy.reconst.dti._lt_indices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">_lt_indices</span></code></a></p></td>\n<td><p>ndarray(shape, dtype=float, buffer=None, offset=0,</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.from_lower_triangular\" title=\"dipy.reconst.dti.from_lower_triangular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_lower_triangular</span></code></a>(D)</p></td>\n<td><p>Returns a tensor given the six unique tensor elements</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti._lt_rows\" title=\"dipy.reconst.dti._lt_rows\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">_lt_rows</span></code></a></p></td>\n<td><p>ndarray(shape, dtype=float, buffer=None, offset=0,</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti._lt_cols\" title=\"dipy.reconst.dti._lt_cols\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">_lt_cols</span></code></a></p></td>\n<td><p>ndarray(shape, dtype=float, buffer=None, offset=0,</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.lower_triangular\" title=\"dipy.reconst.dti.lower_triangular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lower_triangular</span></code></a>(tensor[,\u00a0b0])</p></td>\n<td><p>Returns the six lower triangular values of the tensor ordered as (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz) and a dummy variable if b0 is not None.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.decompose_tensor\" title=\"dipy.reconst.dti.decompose_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decompose_tensor</span></code></a>(tensor[,\u00a0min_diffusivity])</p></td>\n<td><p>Returns eigenvalues and eigenvectors given a diffusion tensor</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.design_matrix\" title=\"dipy.reconst.dti.design_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">design_matrix</span></code></a>(gtab[,\u00a0dtype])</p></td>\n<td><p>Constructs design matrix for DTI weighted least squares or least squares fitting.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.quantize_evecs\" title=\"dipy.reconst.dti.quantize_evecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">quantize_evecs</span></code></a>(evecs[,\u00a0odf_vertices])</p></td>\n<td><p>Find the closest orientation of an evenly distributed sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.dti.eig_from_lo_tri\" title=\"dipy.reconst.dti.eig_from_lo_tri\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">eig_from_lo_tri</span></code></a>(data[,\u00a0min_diffusivity])</p></td>\n<td><p>Calculates tensor eigenvalues/eigenvectors from an array containing the lower diagonal form of the six unique tensor elements.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.forecast\">\n<span id=\"module-reconst-forecast\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.forecast</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.forecast\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastModel\" title=\"dipy.reconst.forecast.ForecastModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ForecastModel</span></code></a>(gtab[,\u00a0sh_order,\u00a0lambda_lb,\u00a0...])</p></td>\n<td><p>Fiber ORientation Estimated using Continuous Axially Symmetric Tensors (FORECAST) [1,2,3]_.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit\" title=\"dipy.reconst.forecast.ForecastFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ForecastFit</span></code></a>(model,\u00a0data,\u00a0sh_coef,\u00a0d_par,\u00a0d_perp)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.find_signal_means\" title=\"dipy.reconst.forecast.find_signal_means\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_signal_means</span></code></a>(b_unique,\u00a0data_norm,\u00a0...)</p></td>\n<td><p>Calculate the mean signal for each shell.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.forecast_error_func\" title=\"dipy.reconst.forecast.forecast_error_func\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">forecast_error_func</span></code></a>(x,\u00a0b_unique,\u00a0E)</p></td>\n<td><p>Calculates the difference between the mean signal calculated using the parameter vector x and the average signal E using FORECAST and SMT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.psi_l\" title=\"dipy.reconst.forecast.psi_l\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">psi_l</span></code></a>(l,\u00a0b)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.forecast_matrix\" title=\"dipy.reconst.forecast.forecast_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">forecast_matrix</span></code></a>(sh_order,\u00a0d_par,\u00a0d_perp,\u00a0bvals)</p></td>\n<td><p>Compute the FORECAST radial matrix</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.rho_matrix\" title=\"dipy.reconst.forecast.rho_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rho_matrix</span></code></a>(sh_order,\u00a0vecs)</p></td>\n<td><p>Compute the SH matrix <span class=\"math notranslate nohighlight\">\\(\\rho\\)</span></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.forecast.lb_forecast\" title=\"dipy.reconst.forecast.lb_forecast\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lb_forecast</span></code></a>(sh_order)</p></td>\n<td><p>Returns the Laplace-Beltrami regularization matrix for FORECAST</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.fwdti\">\n<span id=\"module-reconst-fwdti\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.fwdti</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.fwdti\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting tensors without free water\ncontamination</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel\" title=\"dipy.reconst.fwdti.FreeWaterTensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel</span></code></a>(gtab[,\u00a0fit_method])</p></td>\n<td><p>Class for the Free Water Elimination Diffusion Tensor Model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit\" title=\"dipy.reconst.fwdti.FreeWaterTensorFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit</span></code></a>(model,\u00a0model_params)</p></td>\n<td><p>Class for fitting the Free Water Tensor Model</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.fwdti_prediction\" title=\"dipy.reconst.fwdti.fwdti_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fwdti_prediction</span></code></a>(params,\u00a0gtab[,\u00a0S0,\u00a0Diso])</p></td>\n<td><p>Signal prediction given the free water DTI model parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.wls_iter\" title=\"dipy.reconst.fwdti.wls_iter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">wls_iter</span></code></a>(design_matrix,\u00a0sig,\u00a0S0[,\u00a0Diso,\u00a0...])</p></td>\n<td><p>Applies weighted linear least squares fit of the water free elimination\nmodel to single voxel signals.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.wls_fit_tensor\" title=\"dipy.reconst.fwdti.wls_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">wls_fit_tensor</span></code></a>(gtab,\u00a0data[,\u00a0Diso,\u00a0mask,\u00a0...])</p></td>\n<td><p>Computes weighted least squares (WLS) fit to calculate self-diffusion\ntensor using a linear regression model <a href=\"#id1308\"><span class=\"problematic\" id=\"id36\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.nls_iter\" title=\"dipy.reconst.fwdti.nls_iter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nls_iter</span></code></a>(design_matrix,\u00a0sig,\u00a0S0[,\u00a0Diso,\u00a0...])</p></td>\n<td><p>Applies non linear least squares fit of the water free elimination\nmodel to single voxel signals.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.nls_fit_tensor\" title=\"dipy.reconst.fwdti.nls_fit_tensor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nls_fit_tensor</span></code></a>(gtab,\u00a0data[,\u00a0mask,\u00a0Diso,\u00a0...])</p></td>\n<td><p>Fit the water elimination tensor model using the non-linear least-squares.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.lower_triangular_to_cholesky\" title=\"dipy.reconst.fwdti.lower_triangular_to_cholesky\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lower_triangular_to_cholesky</span></code></a>(tensor_elements)</p></td>\n<td><p>Performs Cholesky decomposition of the diffusion tensor</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.cholesky_to_lower_triangular\" title=\"dipy.reconst.fwdti.cholesky_to_lower_triangular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cholesky_to_lower_triangular</span></code></a>(R)</p></td>\n<td><p>Convert Cholesky decomposition elements to the diffusion tensor elements</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.gqi\">\n<span id=\"module-reconst-gqi\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.gqi</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.gqi\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for generalized q-sampling</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel\" title=\"dipy.reconst.gqi.GeneralizedQSamplingModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingModel</span></code></a>(gtab[,\u00a0method,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit\" title=\"dipy.reconst.gqi.GeneralizedQSamplingFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingFit</span></code></a>(model,\u00a0data)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.normalize_qa\" title=\"dipy.reconst.gqi.normalize_qa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">normalize_qa</span></code></a>(qa[,\u00a0max_qa])</p></td>\n<td><p>Normalize quantitative anisotropy.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.squared_radial_component\" title=\"dipy.reconst.gqi.squared_radial_component\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">squared_radial_component</span></code></a>(x[,\u00a0tol])</p></td>\n<td><p>Part of the GQI2 integral</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.npa\" title=\"dipy.reconst.gqi.npa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">npa</span></code></a>(self,\u00a0odf[,\u00a0width])</p></td>\n<td><p>non-parametric anisotropy</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.equatorial_zone_vertices\" title=\"dipy.reconst.gqi.equatorial_zone_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">equatorial_zone_vertices</span></code></a>(vertices,\u00a0pole[,\u00a0width])</p></td>\n<td><p>finds the 'vertices' in the equatorial zone conjugate to 'pole' with width half 'width' degrees</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.polar_zone_vertices\" title=\"dipy.reconst.gqi.polar_zone_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">polar_zone_vertices</span></code></a>(vertices,\u00a0pole[,\u00a0width])</p></td>\n<td><p>finds the 'vertices' in the equatorial band around the 'pole' of radius 'width' degrees</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.upper_hemi_map\" title=\"dipy.reconst.gqi.upper_hemi_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">upper_hemi_map</span></code></a>(v)</p></td>\n<td><p>maps a 3-vector into the z-upper hemisphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.equatorial_maximum\" title=\"dipy.reconst.gqi.equatorial_maximum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">equatorial_maximum</span></code></a>(vertices,\u00a0odf,\u00a0pole,\u00a0width)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.patch_vertices\" title=\"dipy.reconst.gqi.patch_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">patch_vertices</span></code></a>(vertices,\u00a0pole,\u00a0width)</p></td>\n<td><p>find 'vertices' within the cone of 'width' degrees around 'pole'</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.patch_maximum\" title=\"dipy.reconst.gqi.patch_maximum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">patch_maximum</span></code></a>(vertices,\u00a0odf,\u00a0pole,\u00a0width)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.odf_sum\" title=\"dipy.reconst.gqi.odf_sum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">odf_sum</span></code></a>(odf)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.patch_sum\" title=\"dipy.reconst.gqi.patch_sum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">patch_sum</span></code></a>(vertices,\u00a0odf,\u00a0pole,\u00a0width)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.gqi.triple_odf_maxima\" title=\"dipy.reconst.gqi.triple_odf_maxima\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">triple_odf_maxima</span></code></a>(vertices,\u00a0odf,\u00a0width)</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.ivim\">\n<span id=\"module-reconst-ivim\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.ivim</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.ivim\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting ivim model</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR\" title=\"dipy.reconst.ivim.IvimModelTRR\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IvimModelTRR</span></code></a>(gtab[,\u00a0split_b_D,\u00a0split_b_S0,\u00a0...])</p></td>\n<td><p>Ivim model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP\" title=\"dipy.reconst.ivim.IvimModelVP\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IvimModelVP</span></code></a>(gtab[,\u00a0bounds,\u00a0maxiter,\u00a0xtol])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit\" title=\"dipy.reconst.ivim.IvimFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IvimFit</span></code></a>(model,\u00a0model_params)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.ivim_prediction\" title=\"dipy.reconst.ivim.ivim_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ivim_prediction</span></code></a>(params,\u00a0gtab)</p></td>\n<td><p>The Intravoxel incoherent motion (IVIM) model function.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.f_D_star_prediction\" title=\"dipy.reconst.ivim.f_D_star_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">f_D_star_prediction</span></code></a>(params,\u00a0gtab,\u00a0S0,\u00a0D)</p></td>\n<td><p>Function used to predict IVIM signal when S0 and D are known by considering f and D_star as the unknown parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.f_D_star_error\" title=\"dipy.reconst.ivim.f_D_star_error\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">f_D_star_error</span></code></a>(params,\u00a0gtab,\u00a0signal,\u00a0S0,\u00a0D)</p></td>\n<td><p>Error function used to fit f and D_star keeping S0 and D fixed</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.ivim.ivim_model_selector\" title=\"dipy.reconst.ivim.ivim_model_selector\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ivim_model_selector</span></code></a>(gtab[,\u00a0fit_method])</p></td>\n<td><p>Selector function to switch between the 2-stage Trust-Region Reflective based NLLS fitting method (also containing the linear fit): <cite>trr</cite> and the Variable Projections based fitting method: <cite>varpro</cite>.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.mapmri\">\n<span id=\"module-reconst-mapmri\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.mapmri</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.mapmri\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriModel\" title=\"dipy.reconst.mapmri.MapmriModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MapmriModel</span></code></a>(gtab[,\u00a0radial_order,\u00a0...])</p></td>\n<td><p>Mean Apparent Propagator MRI (MAPMRI) <a href=\"#id1309\"><span class=\"problematic\" id=\"id37\">[1]_</span></a> of the diffusion signal.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit\" title=\"dipy.reconst.mapmri.MapmriFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MapmriFit</span></code></a>(model,\u00a0mapmri_coef,\u00a0mu,\u00a0R,\u00a0lopt[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.isotropic_scale_factor\" title=\"dipy.reconst.mapmri.isotropic_scale_factor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">isotropic_scale_factor</span></code></a>(mu_squared)</p></td>\n<td><p>Estimated isotropic scaling factor _[1] Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_index_matrix\" title=\"dipy.reconst.mapmri.mapmri_index_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_index_matrix</span></code></a>(radial_order)</p></td>\n<td><p>Calculates the indices for the MAPMRI <a href=\"#id1310\"><span class=\"problematic\" id=\"id38\">[1]_</span></a> basis in x, y and z.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.b_mat\" title=\"dipy.reconst.mapmri.b_mat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">b_mat</span></code></a>(index_matrix)</p></td>\n<td><p>Calculates the B coefficients from <a href=\"#id1311\"><span class=\"problematic\" id=\"id39\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.b_mat_isotropic\" title=\"dipy.reconst.mapmri.b_mat_isotropic\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">b_mat_isotropic</span></code></a>(index_matrix)</p></td>\n<td><p>Calculates the isotropic B coefficients from <a href=\"#id1312\"><span class=\"problematic\" id=\"id40\">[1]_</span></a> Fig 8.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_phi_1d\" title=\"dipy.reconst.mapmri.mapmri_phi_1d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_phi_1d</span></code></a>(n,\u00a0q,\u00a0mu)</p></td>\n<td><p>One dimensional MAPMRI basis function from <a href=\"#id1313\"><span class=\"problematic\" id=\"id41\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_phi_matrix\" title=\"dipy.reconst.mapmri.mapmri_phi_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_phi_matrix</span></code></a>(radial_order,\u00a0mu,\u00a0q_gradients)</p></td>\n<td><p>Compute the MAPMRI phi matrix for the signal <a href=\"#id1314\"><span class=\"problematic\" id=\"id42\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_psi_1d\" title=\"dipy.reconst.mapmri.mapmri_psi_1d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_psi_1d</span></code></a>(n,\u00a0x,\u00a0mu)</p></td>\n<td><p>One dimensional MAPMRI propagator basis function from <a href=\"#id1315\"><span class=\"problematic\" id=\"id43\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_psi_matrix\" title=\"dipy.reconst.mapmri.mapmri_psi_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_psi_matrix</span></code></a>(radial_order,\u00a0mu,\u00a0rgrad)</p></td>\n<td><p>Compute the MAPMRI psi matrix for the propagator <a href=\"#id1316\"><span class=\"problematic\" id=\"id44\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_odf_matrix\" title=\"dipy.reconst.mapmri.mapmri_odf_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_odf_matrix</span></code></a>(radial_order,\u00a0mu,\u00a0s,\u00a0vertices)</p></td>\n<td><p>Compute the MAPMRI ODF matrix <a href=\"#id1317\"><span class=\"problematic\" id=\"id45\">[1]_</span></a>  Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_phi_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_phi_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_phi_matrix</span></code></a>(radial_order,\u00a0mu,\u00a0q)</p></td>\n<td><p>Three dimensional isotropic MAPMRI signal basis function from <a href=\"#id1318\"><span class=\"problematic\" id=\"id46\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis\" title=\"dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_radial_signal_basis</span></code></a>(j,\u00a0l,\u00a0...)</p></td>\n<td><p>Radial part of the isotropic 1D-SHORE signal basis <a href=\"#id1319\"><span class=\"problematic\" id=\"id47\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent\" title=\"dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_M_mu_independent</span></code></a>(...)</p></td>\n<td><p>Computed the mu independent part of the signal design matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent\" title=\"dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_M_mu_dependent</span></code></a>(...)</p></td>\n<td><p>Computed the mu dependent part of the signal design matrix.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_psi_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_psi_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_psi_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Three dimensional isotropic MAPMRI propagator basis function from <a href=\"#id1320\"><span class=\"problematic\" id=\"id48\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_radial_pdf_basis\" title=\"dipy.reconst.mapmri.mapmri_isotropic_radial_pdf_basis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_radial_pdf_basis</span></code></a>(j,\u00a0l,\u00a0mu,\u00a0r)</p></td>\n<td><p>Radial part of the isotropic 1D-SHORE propagator basis <a href=\"#id1321\"><span class=\"problematic\" id=\"id49\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_K_mu_independent\" title=\"dipy.reconst.mapmri.mapmri_isotropic_K_mu_independent\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_K_mu_independent</span></code></a>(...)</p></td>\n<td><p>Computes mu independent part of K.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_K_mu_dependent\" title=\"dipy.reconst.mapmri.mapmri_isotropic_K_mu_dependent\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_K_mu_dependent</span></code></a>(...)</p></td>\n<td><p>Computes mu dependent part of M.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.binomialfloat\" title=\"dipy.reconst.mapmri.binomialfloat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binomialfloat</span></code></a>(n,\u00a0k)</p></td>\n<td><p>Custom Binomial function</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_odf_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_odf_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_odf_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Compute the isotropic MAPMRI ODF matrix <a href=\"#id1322\"><span class=\"problematic\" id=\"id50\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_odf_sh_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_odf_sh_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_odf_sh_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Compute the isotropic MAPMRI ODF matrix <a href=\"#id1323\"><span class=\"problematic\" id=\"id51\">[1]_</span></a> Eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_laplacian_reg_matrix</span></code></a>(...)</p></td>\n<td><p>Computes the Laplacian regularization matrix for MAP-MRI's isotropic implementation <a href=\"#id1324\"><span class=\"problematic\" id=\"id52\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_laplacian_reg_matrix_from_index_matrix</span></code></a>(...)</p></td>\n<td><p>Computes the Laplacian regularization matrix for MAP-MRI's isotropic implementation <a href=\"#id1325\"><span class=\"problematic\" id=\"id53\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_index_matrix\" title=\"dipy.reconst.mapmri.mapmri_isotropic_index_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_index_matrix</span></code></a>(radial_order)</p></td>\n<td><p>Calculates the indices for the isotropic MAPMRI basis <a href=\"#id1326\"><span class=\"problematic\" id=\"id54\">[1]_</span></a> Fig 8.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.create_rspace\" title=\"dipy.reconst.mapmri.create_rspace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_rspace</span></code></a>(gridsize,\u00a0radius_max)</p></td>\n<td><p>Create the real space table, that contains the points in which to compute the pdf.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.delta\" title=\"dipy.reconst.mapmri.delta\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">delta</span></code></a>(n,\u00a0m)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.map_laplace_u\" title=\"dipy.reconst.mapmri.map_laplace_u\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">map_laplace_u</span></code></a>(n,\u00a0m)</p></td>\n<td><p>S(n, m) static matrix for Laplacian regularization <a href=\"#id1327\"><span class=\"problematic\" id=\"id55\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.map_laplace_t\" title=\"dipy.reconst.mapmri.map_laplace_t\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">map_laplace_t</span></code></a>(n,\u00a0m)</p></td>\n<td><p>L(m, n) static matrix for Laplacian regularization <a href=\"#id1328\"><span class=\"problematic\" id=\"id56\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.map_laplace_s\" title=\"dipy.reconst.mapmri.map_laplace_s\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">map_laplace_s</span></code></a>(n,\u00a0m)</p></td>\n<td><p>R(m,n) static matrix for Laplacian regularization <a href=\"#id1329\"><span class=\"problematic\" id=\"id57\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_STU_reg_matrices\" title=\"dipy.reconst.mapmri.mapmri_STU_reg_matrices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_STU_reg_matrices</span></code></a>(radial_order)</p></td>\n<td><p>Generate the static portions of the Laplacian regularization matrix according to <a href=\"#id1330\"><span class=\"problematic\" id=\"id58\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_laplacian_reg_matrix\" title=\"dipy.reconst.mapmri.mapmri_laplacian_reg_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mapmri_laplacian_reg_matrix</span></code></a>(ind_mat,\u00a0mu,\u00a0...)</p></td>\n<td><p>Put the Laplacian regularization matrix together <a href=\"#id1331\"><span class=\"problematic\" id=\"id59\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.generalized_crossvalidation_array\" title=\"dipy.reconst.mapmri.generalized_crossvalidation_array\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generalized_crossvalidation_array</span></code></a>(data,\u00a0M,\u00a0LR)</p></td>\n<td><p>Generalized Cross Validation Function <a href=\"#id1332\"><span class=\"problematic\" id=\"id60\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.generalized_crossvalidation\" title=\"dipy.reconst.mapmri.generalized_crossvalidation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generalized_crossvalidation</span></code></a>(data,\u00a0M,\u00a0LR[,\u00a0...])</p></td>\n<td><p>Generalized Cross Validation Function <a href=\"#id1333\"><span class=\"problematic\" id=\"id61\">[1]_</span></a> eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.gcv_cost_function\" title=\"dipy.reconst.mapmri.gcv_cost_function\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gcv_cost_function</span></code></a>(weight,\u00a0args)</p></td>\n<td><p>The GCV cost function that is iterated [4].</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.mcsd\">\n<span id=\"module-reconst-mcsd\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.mcsd</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.mcsd\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellResponse\" title=\"dipy.reconst.mcsd.MultiShellResponse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MultiShellResponse</span></code></a>(response,\u00a0sh_order,\u00a0shells)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel\" title=\"dipy.reconst.mcsd.MultiShellDeconvModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel</span></code></a>(gtab,\u00a0response[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit\" title=\"dipy.reconst.mcsd.MSDeconvFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MSDeconvFit</span></code></a>(model,\u00a0coeff,\u00a0mask)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.QpFitter\" title=\"dipy.reconst.mcsd.QpFitter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QpFitter</span></code></a>(X,\u00a0reg)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.multi_tissue_basis\" title=\"dipy.reconst.mcsd.multi_tissue_basis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">multi_tissue_basis</span></code></a>(gtab,\u00a0sh_order,\u00a0iso_comp)</p></td>\n<td><p>Builds a basis for multi-shell multi-tissue CSD model.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.solve_qp\" title=\"dipy.reconst.mcsd.solve_qp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">solve_qp</span></code></a>(P,\u00a0Q,\u00a0G,\u00a0H)</p></td>\n<td><p>Helper function to set up and solve the Quadratic Program (QP) in CVXPY.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.multi_shell_fiber_response\" title=\"dipy.reconst.mcsd.multi_shell_fiber_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">multi_shell_fiber_response</span></code></a>(sh_order,\u00a0bvals,\u00a0...)</p></td>\n<td><p>Fiber response function estimation for multi-shell data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.mask_for_response_msmt\" title=\"dipy.reconst.mcsd.mask_for_response_msmt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mask_for_response_msmt</span></code></a>(gtab,\u00a0data[,\u00a0...])</p></td>\n<td><p>Computation of masks for multi-shell multi-tissue (msmt) response</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.response_from_mask_msmt\" title=\"dipy.reconst.mcsd.response_from_mask_msmt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">response_from_mask_msmt</span></code></a>(gtab,\u00a0data,\u00a0mask_wm,\u00a0...)</p></td>\n<td><p>Computation of multi-shell multi-tissue (msmt) response</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.auto_response_msmt\" title=\"dipy.reconst.mcsd.auto_response_msmt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_response_msmt</span></code></a>(gtab,\u00a0data[,\u00a0tol,\u00a0...])</p></td>\n<td><p>Automatic estimation of multi-shell multi-tissue (msmt) response</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.msdki\">\n<span id=\"module-reconst-msdki\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.msdki</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.msdki\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting the mean signal diffusion kurtosis\nmodel</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel\" title=\"dipy.reconst.msdki.MeanDiffusionKurtosisModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel</span></code></a>(gtab[,\u00a0bmag,\u00a0...])</p></td>\n<td><p>Mean signal Diffusion Kurtosis Model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit\" title=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit</span></code></a>(model,\u00a0model_params)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.mean_signal_bvalue\" title=\"dipy.reconst.msdki.mean_signal_bvalue\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_signal_bvalue</span></code></a>(data,\u00a0gtab[,\u00a0bmag])</p></td>\n<td><p>Computes the average signal across different diffusion directions\nfor each unique b-value\n\nParameters\n----------\ndata : ndarray ([X, Y, Z, ...], g)\n    ndarray containing the data signals in its last dimension.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.msk_from_awf\" title=\"dipy.reconst.msdki.msk_from_awf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">msk_from_awf</span></code></a>(f)</p></td>\n<td><p>Computes mean signal kurtosis from axonal water fraction estimates of the SMT2 model</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.awf_from_msk\" title=\"dipy.reconst.msdki.awf_from_msk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">awf_from_msk</span></code></a>(msk[,\u00a0mask])</p></td>\n<td><p>Computes the axonal water fraction from the mean signal kurtosis assuming the 2-compartmental spherical mean technique model <a href=\"#id1334\"><span class=\"problematic\" id=\"id62\">[1]_</span></a>, <a href=\"#id1335\"><span class=\"problematic\" id=\"id63\">[2]_</span></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.msdki_prediction\" title=\"dipy.reconst.msdki.msdki_prediction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">msdki_prediction</span></code></a>(msdki_params,\u00a0gtab[,\u00a0S0])</p></td>\n<td><p>Predict the mean signal given the parameters of the mean signal DKI, an\nGradientTable object and S0 signal.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.wls_fit_msdki\" title=\"dipy.reconst.msdki.wls_fit_msdki\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">wls_fit_msdki</span></code></a>(design_matrix,\u00a0msignal,\u00a0ng[,\u00a0...])</p></td>\n<td><p>Fits the mean signal diffusion kurtosis imaging based on a weighted least square solution <a href=\"#id1336\"><span class=\"problematic\" id=\"id64\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.msdki.design_matrix\" title=\"dipy.reconst.msdki.design_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">design_matrix</span></code></a>(ubvals)</p></td>\n<td><p>Constructs design matrix for the mean signal diffusion kurtosis model</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.multi_voxel\">\n<span id=\"module-reconst-multi-voxel\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.multi_voxel</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.multi_voxel\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Tools to easily make multi voxel models</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit\" title=\"dipy.reconst.multi_voxel.MultiVoxelFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit</span></code></a>(model,\u00a0fit_array,\u00a0mask)</p></td>\n<td><p>Holds an array of fits and allows access to their attributes and methods</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.CallableArray\" title=\"dipy.reconst.multi_voxel.CallableArray\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CallableArray</span></code></a></p></td>\n<td><p>An array which can be called like a function</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.multi_voxel_fit\" title=\"dipy.reconst.multi_voxel.multi_voxel_fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">multi_voxel_fit</span></code></a>(single_voxel_fit)</p></td>\n<td><p>Method decorator to turn a single voxel model fit definition into a multi voxel model fit definition</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.odf\">\n<span id=\"module-reconst-odf\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.odf</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.odf\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a>(gtab)</p></td>\n<td><p>An abstract class to be sub-classed by specific odf models</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a>(model,\u00a0data)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.odf.gfa\" title=\"dipy.reconst.odf.gfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gfa</span></code></a>(samples)</p></td>\n<td><p>The general fractional anisotropy of a function evaluated\non the unit sphere\n\nParameters\n----------\nsamples : ndarray\n    Values of data on the unit sphere.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.odf.minmax_normalize\" title=\"dipy.reconst.odf.minmax_normalize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">minmax_normalize</span></code></a>(samples[,\u00a0out])</p></td>\n<td><p>Min-max normalization of a function evaluated on the unit sphere</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.qtdmri\">\n<span id=\"module-reconst-qtdmri\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.qtdmri</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.qtdmri\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriModel\" title=\"dipy.reconst.qtdmri.QtdmriModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QtdmriModel</span></code></a>(gtab[,\u00a0radial_order,\u00a0...])</p></td>\n<td><p>The q:math:<cite>tau</cite>-dMRI model [1] to analytically and continuously represent\nthe q:math:<cite>tau</cite> diffusion signal attenuation over diffusion sensitization\nq and diffusion time <span class=\"math notranslate nohighlight\">\\(\\tau\\)</span>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit\" title=\"dipy.reconst.qtdmri.QtdmriFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QtdmriFit</span></code></a>(model,\u00a0qtdmri_coef,\u00a0us,\u00a0ut,\u00a0...)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_to_mapmri_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_to_mapmri_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_to_mapmri_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Generates the matrix that maps the qtdmri coefficients to MAP-MRI coefficients.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_to_mapmri_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_to_mapmri_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_to_mapmri_matrix</span></code></a>(...)</p></td>\n<td><p>Generates the matrix that maps the spherical qtdmri coefficients to MAP-MRI coefficients.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_temporal_normalization\" title=\"dipy.reconst.qtdmri.qtdmri_temporal_normalization\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_temporal_normalization</span></code></a>(ut)</p></td>\n<td><p>Normalization factor for the temporal basis</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_mapmri_normalization\" title=\"dipy.reconst.qtdmri.qtdmri_mapmri_normalization\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_mapmri_normalization</span></code></a>(mu)</p></td>\n<td><p>Normalization factor for Cartesian MAP-MRI basis.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_mapmri_isotropic_normalization\" title=\"dipy.reconst.qtdmri.qtdmri_mapmri_isotropic_normalization\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_mapmri_isotropic_normalization</span></code></a>(j,\u00a0l,\u00a0u0)</p></td>\n<td><p>Normalization factor for Spherical MAP-MRI basis.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_signal_matrix_\" title=\"dipy.reconst.qtdmri.qtdmri_signal_matrix_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_signal_matrix_</span></code></a>(radial_order,\u00a0...[,\u00a0...])</p></td>\n<td><p>Function to generate the qtdmri signal basis.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_signal_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_signal_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_signal_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Constructs the design matrix as a product of 3 separated radial, angular and temporal design matrices.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_eap_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_eap_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_eap_matrix</span></code></a>(radial_order,\u00a0time_order,\u00a0...)</p></td>\n<td><p>Constructs the design matrix as a product of 3 separated radial, angular and temporal design matrices.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix_\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_signal_matrix_</span></code></a>(...[,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_signal_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_eap_matrix_\" title=\"dipy.reconst.qtdmri.qtdmri_eap_matrix_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_eap_matrix_</span></code></a>(radial_order,\u00a0time_order,\u00a0...)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix_\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_eap_matrix_</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_eap_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Constructs the design matrix as a product of 3 separated radial, angular and temporal design matrices.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.radial_basis_opt\" title=\"dipy.reconst.qtdmri.radial_basis_opt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_basis_opt</span></code></a>(j,\u00a0l,\u00a0us,\u00a0q)</p></td>\n<td><p>Spatial basis dependent on spatial scaling factor us</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.angular_basis_opt\" title=\"dipy.reconst.qtdmri.angular_basis_opt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">angular_basis_opt</span></code></a>(l,\u00a0m,\u00a0q,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Angular basis independent of spatial scaling factor us.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.radial_basis_EAP_opt\" title=\"dipy.reconst.qtdmri.radial_basis_EAP_opt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_basis_EAP_opt</span></code></a>(j,\u00a0l,\u00a0us,\u00a0r)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.angular_basis_EAP_opt\" title=\"dipy.reconst.qtdmri.angular_basis_EAP_opt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">angular_basis_EAP_opt</span></code></a>(j,\u00a0l,\u00a0m,\u00a0r,\u00a0theta,\u00a0phi)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.temporal_basis\" title=\"dipy.reconst.qtdmri.temporal_basis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">temporal_basis</span></code></a>(o,\u00a0ut,\u00a0tau)</p></td>\n<td><p>Temporal basis dependent on temporal scaling factor ut</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_index_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_index_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_index_matrix</span></code></a>(radial_order,\u00a0time_order)</p></td>\n<td><p>Computes the SHORE basis order indices according to [1].</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_index_matrix</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Computes the SHORE basis order indices according to [1].</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_laplacian_reg_matrix</span></code></a>(ind_mat,\u00a0us,\u00a0ut)</p></td>\n<td><p>Computes the cartesian qt-dMRI Laplacian regularization matrix.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_laplacian_reg_matrix</span></code></a>(...[,\u00a0...])</p></td>\n<td><p>Computes the spherical qt-dMRI Laplacian regularization matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part23_reg_matrix_q\" title=\"dipy.reconst.qtdmri.part23_reg_matrix_q\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part23_reg_matrix_q</span></code></a>(ind_mat,\u00a0U_mat,\u00a0T_mat,\u00a0us)</p></td>\n<td><p>Partial cartesian spatial Laplacian regularization matrix following second line of Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part23_iso_reg_matrix_q\" title=\"dipy.reconst.qtdmri.part23_iso_reg_matrix_q\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part23_iso_reg_matrix_q</span></code></a>(ind_mat,\u00a0us)</p></td>\n<td><p>Partial spherical spatial Laplacian regularization matrix following the equation below Eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part4_reg_matrix_q\" title=\"dipy.reconst.qtdmri.part4_reg_matrix_q\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part4_reg_matrix_q</span></code></a>(ind_mat,\u00a0U_mat,\u00a0us)</p></td>\n<td><p>Partial cartesian spatial Laplacian regularization matrix following equation Eq.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part4_iso_reg_matrix_q\" title=\"dipy.reconst.qtdmri.part4_iso_reg_matrix_q\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part4_iso_reg_matrix_q</span></code></a>(ind_mat,\u00a0us)</p></td>\n<td><p>Partial spherical spatial Laplacian regularization matrix following the equation below Eq.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part1_reg_matrix_tau\" title=\"dipy.reconst.qtdmri.part1_reg_matrix_tau\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part1_reg_matrix_tau</span></code></a>(ind_mat,\u00a0ut)</p></td>\n<td><p>Partial temporal Laplacian regularization matrix following Appendix B in [1].</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part23_reg_matrix_tau\" title=\"dipy.reconst.qtdmri.part23_reg_matrix_tau\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part23_reg_matrix_tau</span></code></a>(ind_mat,\u00a0ut)</p></td>\n<td><p>Partial temporal Laplacian regularization matrix following Appendix B in [1].</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part4_reg_matrix_tau\" title=\"dipy.reconst.qtdmri.part4_reg_matrix_tau\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">part4_reg_matrix_tau</span></code></a>(ind_mat,\u00a0ut)</p></td>\n<td><p>Partial temporal Laplacian regularization matrix following Appendix B in [1].</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.H\" title=\"dipy.reconst.qtdmri.H\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">H</span></code></a>(value)</p></td>\n<td><p>Step function of H(x)=1 if x&gt;=0 and zero otherwise.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.generalized_crossvalidation\" title=\"dipy.reconst.qtdmri.generalized_crossvalidation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generalized_crossvalidation</span></code></a>(data,\u00a0M,\u00a0LR[,\u00a0...])</p></td>\n<td><p>Generalized Cross Validation Function [1].</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.GCV_cost_function\" title=\"dipy.reconst.qtdmri.GCV_cost_function\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GCV_cost_function</span></code></a>(weight,\u00a0arguments)</p></td>\n<td><p>Generalized Cross Validation Function that is iterated [1].</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_scaling\" title=\"dipy.reconst.qtdmri.qtdmri_isotropic_scaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_scaling</span></code></a>(data,\u00a0q,\u00a0tau)</p></td>\n<td><p>Constructs design matrix for fitting an exponential to the diffusion time points.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_anisotropic_scaling\" title=\"dipy.reconst.qtdmri.qtdmri_anisotropic_scaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_anisotropic_scaling</span></code></a>(data,\u00a0q,\u00a0bvecs,\u00a0tau)</p></td>\n<td><p>Constructs design matrix for fitting an exponential to the diffusion time points.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.design_matrix_spatial\" title=\"dipy.reconst.qtdmri.design_matrix_spatial\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">design_matrix_spatial</span></code></a>(bvecs,\u00a0qvals)</p></td>\n<td><p>Constructs design matrix for DTI weighted least squares or least squares fitting.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.create_rt_space_grid\" title=\"dipy.reconst.qtdmri.create_rt_space_grid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_rt_space_grid</span></code></a>(grid_size_r,\u00a0...)</p></td>\n<td><p>Generates EAP grid (for potential positivity constraint).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_number_of_coefficients\" title=\"dipy.reconst.qtdmri.qtdmri_number_of_coefficients\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qtdmri_number_of_coefficients</span></code></a>(radial_order,\u00a0...)</p></td>\n<td><p>Computes the total number of coefficients of the qtdmri basis given a radial and temporal order.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.l1_crossvalidation\" title=\"dipy.reconst.qtdmri.l1_crossvalidation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">l1_crossvalidation</span></code></a>(b0s_mask,\u00a0E,\u00a0M[,\u00a0...])</p></td>\n<td><p>cross-validation function to find the optimal weight of alpha for sparsity regularization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.elastic_crossvalidation\" title=\"dipy.reconst.qtdmri.elastic_crossvalidation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">elastic_crossvalidation</span></code></a>(b0s_mask,\u00a0E,\u00a0M,\u00a0L,\u00a0lopt)</p></td>\n<td><p>cross-validation function to find the optimal weight of alpha for sparsity regularization when also Laplacian regularization is used.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow\" title=\"dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">visualise_gradient_table_G_Delta_rainbow</span></code></a>(gtab)</p></td>\n<td><p>This function visualizes a q-tau acquisition scheme as a function of gradient strength and pulse separation (big_delta).</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.qti\">\n<span id=\"module-reconst-qti\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.qti</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.qti\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Classes and functions for fitting the covariance tensor model of q-space\ntrajectory imaging (QTI) by Westin et al. as presented in \u201cQ-space trajectory\nimaging for multidimensional diffusion MRI of the human brain\u201d NeuroImage vol.\n135 (2016): 345-62. <a class=\"reference external\" href=\"https://doi.org/10.1016/j.neuroimage.2016.02.039\">https://doi.org/10.1016/j.neuroimage.2016.02.039</a></p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiModel\" title=\"dipy.reconst.qti.QtiModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QtiModel</span></code></a>(gtab[,\u00a0fit_method,\u00a0cvxpy_solver])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit\" title=\"dipy.reconst.qti.QtiFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QtiFit</span></code></a>(params)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_3x3_to_6x1\" title=\"dipy.reconst.qti.from_3x3_to_6x1\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_3x3_to_6x1</span></code></a>(T)</p></td>\n<td><p>Convert symmetric 3 x 3 matrices into 6 x 1 vectors.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_6x1_to_3x3\" title=\"dipy.reconst.qti.from_6x1_to_3x3\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_6x1_to_3x3</span></code></a>(V)</p></td>\n<td><p>Convert 6 x 1 vectors into symmetric 3 x 3 matrices.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_6x6_to_21x1\" title=\"dipy.reconst.qti.from_6x6_to_21x1\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_6x6_to_21x1</span></code></a>(T)</p></td>\n<td><p>Convert symmetric 6 x 6 matrices into 21 x 1 vectors.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_21x1_to_6x6\" title=\"dipy.reconst.qti.from_21x1_to_6x6\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_21x1_to_6x6</span></code></a>(V)</p></td>\n<td><p>Convert 21 x 1 vectors into symmetric 6 x 6 matrices.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.cvxpy_1x6_to_3x3\" title=\"dipy.reconst.qti.cvxpy_1x6_to_3x3\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cvxpy_1x6_to_3x3</span></code></a>(V)</p></td>\n<td><p>Convert a 1 x 6 vector into a symmetric 3 x 3 matrix.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.cvxpy_1x21_to_6x6\" title=\"dipy.reconst.qti.cvxpy_1x21_to_6x6\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cvxpy_1x21_to_6x6</span></code></a>(V)</p></td>\n<td><p>Convert 1 x 21 vector into a symmetric 6 x 6 matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.dtd_covariance\" title=\"dipy.reconst.qti.dtd_covariance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dtd_covariance</span></code></a>(DTD)</p></td>\n<td><p>Calculate covariance of a diffusion tensor distribution (DTD).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.qti_signal\" title=\"dipy.reconst.qti.qti_signal\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qti_signal</span></code></a>(gtab,\u00a0D,\u00a0C[,\u00a0S0])</p></td>\n<td><p>Generate signals using the covariance tensor signal representation.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.qti.design_matrix\" title=\"dipy.reconst.qti.design_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">design_matrix</span></code></a>(btens)</p></td>\n<td><p>Calculate the design matrix from the b-tensors.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.rumba\">\n<span id=\"module-reconst-rumba\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.rumba</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.rumba\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Robust and Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaSDModel\" title=\"dipy.reconst.rumba.RumbaSDModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RumbaSDModel</span></code></a>(gtab[,\u00a0wm_response,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit\" title=\"dipy.reconst.rumba.RumbaFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RumbaFit</span></code></a>(model,\u00a0model_params)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.logger\" title=\"dipy.reconst.rumba.logger\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">logger</span></code></a></p></td>\n<td><p>Instances of the Logger class represent a single logging channel.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.rumba_deconv\" title=\"dipy.reconst.rumba.rumba_deconv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rumba_deconv</span></code></a>(data,\u00a0kernel[,\u00a0n_iter,\u00a0...])</p></td>\n<td><p>Fit fODF and GM/CSF volume fractions for a voxel using RUMBA-SD <a href=\"#id1337\"><span class=\"problematic\" id=\"id65\">[1]_</span></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.mbessel_ratio\" title=\"dipy.reconst.rumba.mbessel_ratio\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mbessel_ratio</span></code></a>(n,\u00a0x)</p></td>\n<td><p>Fast computation of modified Bessel function ratio (first kind).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.generate_kernel\" title=\"dipy.reconst.rumba.generate_kernel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_kernel</span></code></a>(gtab,\u00a0sphere,\u00a0wm_response,\u00a0...)</p></td>\n<td><p>Generate deconvolution kernel</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.rumba.rumba_deconv_global\" title=\"dipy.reconst.rumba.rumba_deconv_global\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rumba_deconv_global</span></code></a>(data,\u00a0kernel,\u00a0mask[,\u00a0...])</p></td>\n<td><p>Fit fODF for all voxels simultaneously using RUMBA-SD.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.sfm\">\n<span id=\"module-reconst-sfm\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.sfm</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.sfm\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>The Sparse Fascicle Model.</p>\n<p>This is an implementation of the sparse fascicle model described in\n<a class=\"reference internal\" href=\"../../examples_built/13_fiber_tracking/tracking_sfm/#rokem2015\" id=\"id66\"><span>[Rokem2015]</span></a>. The multi b-value version of this model is described in\n<a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/kfold_xval/#rokem2014\" id=\"id67\"><span>[Rokem2014]</span></a>.</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rokem2015\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Rokem2015<span class=\"fn-bracket\">]</span></span>\n<p>Ariel Rokem, Jason D. Yeatman, Franco Pestilli, Kendrick\nN. Kay, Aviv Mezer, Stefan van der Walt, Brian A. Wandell\n(2015). Evaluating the accuracy of diffusion MRI models in white\nmatter. PLoS ONE 10(4): e0123272. doi:10.1371/journal.pone.0123272</p>\n</div>\n<div class=\"citation\" id=\"rokem2014\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Rokem2014<span class=\"fn-bracket\">]</span></span>\n<p>Ariel Rokem, Kimberly L. Chan, Jason D. Yeatman, Franco\nPestilli,  Brian A. Wandell (2014). Evaluating the accuracy of diffusion\nmodels at multiple b-values with cross-validation. ISMRM 2014.</p>\n</div>\n</div>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicModel\" title=\"dipy.reconst.sfm.IsotropicModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IsotropicModel</span></code></a>(gtab)</p></td>\n<td><p>A base-class for the representation of isotropic signals.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicFit\" title=\"dipy.reconst.sfm.IsotropicFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IsotropicFit</span></code></a>(model,\u00a0params)</p></td>\n<td><p>A fit object for representing the isotropic signal as the mean of the diffusion-weighted signal.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel\" title=\"dipy.reconst.sfm.ExponentialIsotropicModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicModel</span></code></a>(gtab)</p></td>\n<td><p>Representing the isotropic signal as a fit to an exponential decay function with b-values</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit\" title=\"dipy.reconst.sfm.ExponentialIsotropicFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicFit</span></code></a>(model,\u00a0params)</p></td>\n<td><p>A fit to the ExponentialIsotropicModel object, based on data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleModel\" title=\"dipy.reconst.sfm.SparseFascicleModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel</span></code></a>(gtab[,\u00a0sphere,\u00a0...])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleFit\" title=\"dipy.reconst.sfm.SparseFascicleFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit</span></code></a>(model,\u00a0beta,\u00a0S0,\u00a0iso)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.sfm.sfm_design_matrix\" title=\"dipy.reconst.sfm.sfm_design_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sfm_design_matrix</span></code></a>(gtab,\u00a0sphere,\u00a0response[,\u00a0mode])</p></td>\n<td><p>Construct the SFM design matrix</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.shm\">\n<span id=\"module-reconst-shm\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.shm</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.shm\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Tools for using spherical harmonic models to fit diffusion data.</p>\n<section id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id68\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging With Solid\nAngle Consideration.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id69\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., et al. 2007. Regularized, fast, and robust analytical\nQ-ball imaging.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id70\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tristan-Vega, A., et al. 2010. A new methodology for estimation of fiber\npopulations in white matter of the brain with Funk-Radon transform.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id71\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>4<span class=\"fn-bracket\">]</span></span>\n<p>Tristan-Vega, A., et al. 2009. Estimation of fiber orientation\nprobability density functions in high angular resolution diffusion\nimaging.</p>\n</aside>\n</aside>\n<p>Note about the Transpose:\nIn the literature the matrix representation of these methods is often written\nas Y = Bx where B is some design matrix and Y and x are column vectors. In our\ncase the input data, a dwi stored as a nifti file for example, is stored as row\nvectors (ndarrays) of the form (x, y, z, n), where n is the number of diffusion\ndirections. We could transpose and reshape the data to be (n, x*y*z), so that\nwe could directly plug it into the above equation. However, I have chosen to\nkeep the data as is and implement the relevant equations rewritten in the\nfollowing form: Y.T = x.T B.T, or in python syntax data = np.dot(sh_coef, B.T)\nwhere data is Y.T and sh_coef is x.T.</p>\n</section>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a>(gtab)</p></td>\n<td><p>To be subclassed by all models that return a SphHarmFit when fit.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a>(gtab,\u00a0sh_order[,\u00a0smooth,\u00a0...])</p></td>\n<td><p>To be subclassed by Qball type models.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit\" title=\"dipy.reconst.shm.SphHarmFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SphHarmFit</span></code></a>(model,\u00a0shm_coef,\u00a0mask)</p></td>\n<td><p>Diffusion data fit to a spherical harmonic model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.CsaOdfModel\" title=\"dipy.reconst.shm.CsaOdfModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a>(gtab,\u00a0sh_order[,\u00a0smooth,\u00a0...])</p></td>\n<td><p>Implementation of Constant Solid Angle reconstruction method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.OpdtModel\" title=\"dipy.reconst.shm.OpdtModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">OpdtModel</span></code></a>(gtab,\u00a0sh_order[,\u00a0smooth,\u00a0...])</p></td>\n<td><p>Implementation of Orientation Probability Density Transform reconstruction method.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballModel\" title=\"dipy.reconst.shm.QballModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QballModel</span></code></a>(gtab,\u00a0sh_order[,\u00a0smooth,\u00a0...])</p></td>\n<td><p>Implementation of regularized Qball reconstruction method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.ResidualBootstrapWrapper\" title=\"dipy.reconst.shm.ResidualBootstrapWrapper\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResidualBootstrapWrapper</span></code></a>(signal_object,\u00a0B,\u00a0...)</p></td>\n<td><p>Returns a residual bootstrap sample of the signal_object when indexed</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.forward_sdeconv_mat\" title=\"dipy.reconst.shm.forward_sdeconv_mat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">forward_sdeconv_mat</span></code></a>(r_rh,\u00a0n)</p></td>\n<td><p>Build forward spherical deconvolution matrix</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.sh_to_rh\" title=\"dipy.reconst.shm.sh_to_rh\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sh_to_rh</span></code></a>(r_sh,\u00a0m,\u00a0n)</p></td>\n<td><p>Spherical harmonics (SH) to rotational harmonics (RH)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.gen_dirac\" title=\"dipy.reconst.shm.gen_dirac\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gen_dirac</span></code></a>(m,\u00a0n,\u00a0theta,\u00a0phi[,\u00a0legacy])</p></td>\n<td><p>Generate Dirac delta function orientated in (theta, phi) on the sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.spherical_harmonics\" title=\"dipy.reconst.shm.spherical_harmonics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">spherical_harmonics</span></code></a>(m,\u00a0n,\u00a0theta,\u00a0phi[,\u00a0...])</p></td>\n<td><p>Compute spherical harmonics.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sph_harm\" title=\"dipy.reconst.shm.real_sph_harm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sph_harm</span></code></a>(m,\u00a0n,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Compute real spherical harmonics.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_tournier_from_index\" title=\"dipy.reconst.shm.real_sh_tournier_from_index\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sh_tournier_from_index</span></code></a>(m,\u00a0n,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Compute real spherical harmonics as initially defined in Tournier\n2007 <a href=\"#id1338\"><span class=\"problematic\" id=\"id72\">[1]_</span></a> then updated in MRtrix3 <a href=\"#id1339\"><span class=\"problematic\" id=\"id73\">[2]_</span></a>, where the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>\nis defined to be:\n\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>) * sqrt(2)    if m &lt; 0\n\nThis may take scalar or array arguments.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_descoteaux_from_index\" title=\"dipy.reconst.shm.real_sh_descoteaux_from_index\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sh_descoteaux_from_index</span></code></a>(m,\u00a0n,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Compute real spherical harmonics as in Descoteaux et al. 2007 <a href=\"#id1340\"><span class=\"problematic\" id=\"id74\">[1]_</span></a>,\nwhere the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be:\n\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &lt; 0\n\nThis may take scalar or array arguments.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_tournier\" title=\"dipy.reconst.shm.real_sh_tournier\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sh_tournier</span></code></a>(sh_order,\u00a0theta,\u00a0phi[,\u00a0...])</p></td>\n<td><p>Compute real spherical harmonics as initially defined in Tournier\n2007 <a href=\"#id1341\"><span class=\"problematic\" id=\"id75\">[1]_</span></a> then updated in MRtrix3 <a href=\"#id1342\"><span class=\"problematic\" id=\"id76\">[2]_</span></a>, where the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>\nis defined to be:\n\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>) * sqrt(2)    if m &lt; 0\n\nThis may take scalar or array arguments.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_descoteaux\" title=\"dipy.reconst.shm.real_sh_descoteaux\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sh_descoteaux</span></code></a>(sh_order,\u00a0theta,\u00a0phi[,\u00a0...])</p></td>\n<td><p>Compute real spherical harmonics as in Descoteaux et al. 2007 <a href=\"#id1343\"><span class=\"problematic\" id=\"id77\">[1]_</span></a>,\nwhere the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be:\n\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &lt; 0\n\nThis may take scalar or array arguments.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sym_sh_mrtrix\" title=\"dipy.reconst.shm.real_sym_sh_mrtrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sym_sh_mrtrix</span></code></a>(sh_order,\u00a0theta,\u00a0phi)</p></td>\n<td><p>dipy.reconst.shm.real_sym_sh_mrtrix is deprecated, Please use dipy.reconst.shm.real_sh_tournier instead\n\n* deprecated from version: 1.3\n* Will raise &lt;class 'dipy.utils.deprecator.ExpiredDeprecationError'&gt; as of version: 2.0\n\nCompute real symmetric spherical harmonics as in Tournier 2007 <a href=\"#id1344\"><span class=\"problematic\" id=\"id78\">[2]_</span></a>, where\nthe real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be::\n\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>)       if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>             if m = 0\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>)     if m &lt; 0\n\nThis may take scalar or array arguments.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sym_sh_basis\" title=\"dipy.reconst.shm.real_sym_sh_basis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">real_sym_sh_basis</span></code></a>(sh_order,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Samples a real symmetric spherical harmonic basis at point on the sphere\n\ndipy.reconst.shm.real_sym_sh_basis is deprecated, Please use dipy.reconst.shm.real_sh_descoteaux instead\n\n* deprecated from version: 1.3\n* Will raise &lt;class 'dipy.utils.deprecator.ExpiredDeprecationError'&gt; as of version: 2.0\n\nSamples the basis functions up to order <cite>sh_order</cite> at points on the sphere\ngiven by <cite>theta</cite> and <cite>phi</cite>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.sph_harm_ind_list\" title=\"dipy.reconst.shm.sph_harm_ind_list\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sph_harm_ind_list</span></code></a>(sh_order[,\u00a0full_basis])</p></td>\n<td><p>Returns the degree (<code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code>) and order (<code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code>) of all the symmetric spherical harmonics of degree less then or equal to <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.order_from_ncoef\" title=\"dipy.reconst.shm.order_from_ncoef\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">order_from_ncoef</span></code></a>(ncoef[,\u00a0full_basis])</p></td>\n<td><p>Given a number <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> of coefficients, calculate back the <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.smooth_pinv\" title=\"dipy.reconst.shm.smooth_pinv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">smooth_pinv</span></code></a>(B,\u00a0L)</p></td>\n<td><p>Regularized pseudo-inverse\n\nComputes a regularized least square inverse of B\n\nParameters\n----------\nB : array_like (n, m)\n    Matrix to be inverted\nL : array_like (n,)\n\nReturns\n-------\ninv : ndarray (m, n)\n    regularized least square inverse of B\n\nNotes\n-----\nIn the literature this inverse is often written <span class=\"math notranslate nohighlight\">\\((B^{T}B+L^{2})^{-1}B^{T}\\)</span>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.lazy_index\" title=\"dipy.reconst.shm.lazy_index\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lazy_index</span></code></a>(index)</p></td>\n<td><p>Produces a lazy index</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.normalize_data\" title=\"dipy.reconst.shm.normalize_data\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">normalize_data</span></code></a>(data,\u00a0where_b0[,\u00a0min_signal,\u00a0out])</p></td>\n<td><p>Normalizes the data with respect to the mean b0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.hat\" title=\"dipy.reconst.shm.hat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">hat</span></code></a>(B)</p></td>\n<td><p>Returns the hat matrix for the design matrix B</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.lcr_matrix\" title=\"dipy.reconst.shm.lcr_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lcr_matrix</span></code></a>(H)</p></td>\n<td><p>Returns a matrix for computing leveraged, centered residuals from data</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.bootstrap_data_array\" title=\"dipy.reconst.shm.bootstrap_data_array\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bootstrap_data_array</span></code></a>(data,\u00a0H,\u00a0R[,\u00a0permute])</p></td>\n<td><p>Applies the Residual Bootstraps to the data given H and R</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.bootstrap_data_voxel\" title=\"dipy.reconst.shm.bootstrap_data_voxel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bootstrap_data_voxel</span></code></a>(data,\u00a0H,\u00a0R[,\u00a0permute])</p></td>\n<td><p>Like bootstrap_data_array but faster when for a single voxel</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.sf_to_sh\" title=\"dipy.reconst.shm.sf_to_sh\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sf_to_sh</span></code></a>(sf,\u00a0sphere[,\u00a0sh_order,\u00a0basis_type,\u00a0...])</p></td>\n<td><p>Spherical function to spherical harmonics (SH).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.sh_to_sf\" title=\"dipy.reconst.shm.sh_to_sf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sh_to_sf</span></code></a>(sh,\u00a0sphere[,\u00a0sh_order,\u00a0basis_type,\u00a0...])</p></td>\n<td><p>Spherical harmonics (SH) to spherical function (SF).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.sh_to_sf_matrix\" title=\"dipy.reconst.shm.sh_to_sf_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sh_to_sf_matrix</span></code></a>(sphere[,\u00a0sh_order,\u00a0...])</p></td>\n<td><p>Matrix that transforms Spherical harmonics (SH) to spherical function (SF).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.calculate_max_order\" title=\"dipy.reconst.shm.calculate_max_order\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">calculate_max_order</span></code></a>(n_coeffs[,\u00a0full_basis])</p></td>\n<td><p>Calculate the maximal harmonic order, given that you know the\nnumber of parameters that were estimated.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.anisotropic_power\" title=\"dipy.reconst.shm.anisotropic_power\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">anisotropic_power</span></code></a>(sh_coeffs[,\u00a0norm_factor,\u00a0...])</p></td>\n<td><p>Calculate anisotropic power map with a given SH coefficient matrix. Parameters\n----------\nsh_coeffs : ndarray\n    A ndarray where the last dimension is the\n    SH coefficients estimates for that voxel. norm_factor: float, optional\n    The value to normalize the ap values. power : int, optional\n    The degree to which power maps are calculated. non_negative: bool, optional\n    Whether to rectify the resulting map to be non-negative. Returns\n-------\nlog_ap : ndarray\n    The log of the resulting power image. Notes\n-----\nCalculate AP image based on a IxJxKxC SH coefficient matrix based on the\nequation:\n.. math::\n    AP = sum_{l=2,4,6,...}{frac{1}{2l+1} sum_{m=-l}^l{<a href=\"#id79\"><span class=\"problematic\" id=\"id80\">|</span></a>a_{l,m}|^n}}\n\nWhere the last dimension, C, is made of a flattened array of <span class=\"math notranslate nohighlight\">\\(l`x:math:`m\\)</span>\ncoefficients, where <span class=\"math notranslate nohighlight\">\\(l\\)</span> are the SH orders, and <span class=\"math notranslate nohighlight\">\\(m = 2l+1\\)</span>,\nSo l=1 has 1 coefficient, l=2 has 5, ... l=8 has 17 and so on. A l=2 SH coefficient matrix will then be composed of a IxJxKx6 volume. The power, <span class=\"math notranslate nohighlight\">\\(n\\)</span> is usually set to <span class=\"math notranslate nohighlight\">\\(n=2\\)</span>. The final AP image is then shifted by -log(norm_factor), to be strictly\nnon-negative. Remaining values &lt; 0 are discarded (set to 0), per default,\nand this option is controlled through the <cite>non_negative</cite> keyword argument. References\n----------\n.. [1]  Dell'Acqua, F., Lacerda, L., Catani, M., Simmons, A., 2014. Anisotropic Power Maps: A diffusion contrast to reveal low\n        anisotropy tissues from HARDI data,\n        in: Proceedings of International Society for Magnetic Resonance in\n        Medicine. Milan, Italy. .</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.convert_sh_to_full_basis\" title=\"dipy.reconst.shm.convert_sh_to_full_basis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">convert_sh_to_full_basis</span></code></a>(sh_coeffs)</p></td>\n<td><p>Given an array of SH coeffs from a symmetric basis, returns the coefficients for the full SH basis by filling odd order SH coefficients with zeros</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.convert_sh_from_legacy\" title=\"dipy.reconst.shm.convert_sh_from_legacy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">convert_sh_from_legacy</span></code></a>(sh_coeffs,\u00a0sh_basis)</p></td>\n<td><p>Convert SH coefficients in legacy SH basis to SH coefficients of the new SH basis for <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> <a href=\"#id1345\"><span class=\"problematic\" id=\"id81\">[1]_</span></a> or <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> [2]_[3]_ bases.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shm.convert_sh_to_legacy\" title=\"dipy.reconst.shm.convert_sh_to_legacy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">convert_sh_to_legacy</span></code></a>(sh_coeffs,\u00a0sh_basis[,\u00a0...])</p></td>\n<td><p>Convert SH coefficients in new SH basis to SH coefficients for the legacy SH basis for <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> <a href=\"#id1346\"><span class=\"problematic\" id=\"id82\">[1]_</span></a> or <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> [2]_[3]_ bases.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.shore\">\n<span id=\"module-reconst-shore\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.shore</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.shore\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreModel\" title=\"dipy.reconst.shore.ShoreModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ShoreModel</span></code></a>(gtab[,\u00a0radial_order,\u00a0zeta,\u00a0...])</p></td>\n<td><p>Simple Harmonic Oscillator based Reconstruction and Estimation\n(SHORE) <a href=\"#id1347\"><span class=\"problematic\" id=\"id83\">[1]_</span></a> of the diffusion signal.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit\" title=\"dipy.reconst.shore.ShoreFit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ShoreFit</span></code></a>(model,\u00a0shore_coef)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_matrix\" title=\"dipy.reconst.shore.shore_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shore_matrix</span></code></a>(radial_order,\u00a0zeta,\u00a0gtab[,\u00a0tau])</p></td>\n<td><p>Compute the SHORE matrix for modified Merlet's 3D-SHORE <a href=\"#id1348\"><span class=\"problematic\" id=\"id84\">[1]_</span></a>\n\n..math::\n        :nowrap:\n            begin{equation}\n                textbf{E}(qtextbf{u})=sum_{l=0, even}^{N_{max}}\n                                        sum_{n=l}^{(N_{max}+l)/2}\n                                        sum_{m=-l}^l c_{nlm}\n                                        phi_{nlm}(qtextbf{u})\n            end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\phi_{nlm}\\)</span> is\n..math::\n        :nowrap:\n            begin{equation}\n                phi_{nlm}^{SHORE}(qtextbf{u})=Biggl[dfrac{2(n-l)!}\n                    {zeta^{3/2} Gamma(n+3/2)} Biggr]^{1/2}\n                    Biggl(dfrac{q^2}{zeta}Biggr)^{l/2}\n                    expBiggl(dfrac{-q^2}{2zeta}Biggr)\n                    L^{l+1/2}_{n-l} Biggl(dfrac{q^2}{zeta}Biggr)\n                    Y_l^m(textbf{u}).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_matrix_pdf\" title=\"dipy.reconst.shore.shore_matrix_pdf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shore_matrix_pdf</span></code></a>(radial_order,\u00a0zeta,\u00a0rtab)</p></td>\n<td><p>Compute the SHORE propagator matrix <a href=\"#id1349\"><span class=\"problematic\" id=\"id85\">[1]_</span></a>&quot;</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_matrix_odf\" title=\"dipy.reconst.shore.shore_matrix_odf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shore_matrix_odf</span></code></a>(radial_order,\u00a0zeta,\u00a0...)</p></td>\n<td><p>Compute the SHORE ODF matrix <a href=\"#id1350\"><span class=\"problematic\" id=\"id86\">[1]_</span></a>&quot;</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.l_shore\" title=\"dipy.reconst.shore.l_shore\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">l_shore</span></code></a>(radial_order)</p></td>\n<td><p>Returns the angular regularisation matrix for SHORE basis</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.n_shore\" title=\"dipy.reconst.shore.n_shore\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">n_shore</span></code></a>(radial_order)</p></td>\n<td><p>Returns the angular regularisation matrix for SHORE basis</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.create_rspace\" title=\"dipy.reconst.shore.create_rspace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_rspace</span></code></a>(gridsize,\u00a0radius_max)</p></td>\n<td><p>Create the real space table, that contains the points in which</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_indices\" title=\"dipy.reconst.shore.shore_indices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shore_indices</span></code></a>(radial_order,\u00a0index)</p></td>\n<td><p>Given the basis order and the index, return the shore indices n, l, m\nfor modified Merlet's 3D-SHORE\n..math::\n        :nowrap:\n            begin{equation}\n                textbf{E}(qtextbf{u})=sum_{l=0, even}^{N_{max}}\n                                        sum_{n=l}^{(N_{max}+l)/2}\n                                        sum_{m=-l}^l c_{nlm}\n                                        phi_{nlm}(qtextbf{u})\n            end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\phi_{nlm}\\)</span> is\n..math::\n        :nowrap:\n            begin{equation}\n                phi_{nlm}^{SHORE}(qtextbf{u})=Biggl[dfrac{2(n-l)!}\n                    {zeta^{3/2} Gamma(n+3/2)} Biggr]^{1/2}\n                    Biggl(dfrac{q^2}{zeta}Biggr)^{l/2}\n                    expBiggl(dfrac{-q^2}{2zeta}Biggr)\n                    L^{l+1/2}_{n-l} Biggl(dfrac{q^2}{zeta}Biggr)\n                    Y_l^m(textbf{u}).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_order\" title=\"dipy.reconst.shore.shore_order\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shore_order</span></code></a>(n,\u00a0l,\u00a0m)</p></td>\n<td><p>Given the indices (n,l,m) of the basis, return the minimum order for those indices and their index for modified Merlet's 3D-SHORE.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.reconst.utils\">\n<span id=\"module-reconst-utils\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.utils</span></code><a class=\"headerlink\" href=\"#module-dipy.reconst.utils\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.reconst.utils.dki_design_matrix\" title=\"dipy.reconst.utils.dki_design_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dki_design_matrix</span></code></a>(gtab)</p></td>\n<td><p>Construct B design matrix for DKI.</p></td>\n</tr>\n</tbody>\n</table>\n<section id=\"reconstmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a><a class=\"headerlink\" href=\"#reconstmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.base.ReconstModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.base.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ReconstModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.base.ReconstModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Abstract class for signal reconstruction models</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.base.ReconstModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.base.ReconstModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialization of the abstract class for signal reconstruction models</p>\n<section id=\"parameters\">\n<h4>Parameters<a class=\"headerlink\" href=\"#parameters\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.base.ReconstModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.base.ReconstModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"reconstfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a><a class=\"headerlink\" href=\"#reconstfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.base.ReconstFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.base.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ReconstFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.base.ReconstFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Abstract class which holds the fit result of ReconstModel</p>\n<p>For example that could be holding FA or GFA etc.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.base.ReconstFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.base.ReconstFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"bench-bounding-box\">\n<h3>bench_bounding_box<a class=\"headerlink\" href=\"#bench-bounding-box\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_bounding_box.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bench_bounding_box</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"num-grad\">\n<h3>num_grad<a class=\"headerlink\" href=\"#num-grad\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_csd.num_grad\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_csd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">num_grad</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_csd.num_grad\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"bench-csdeconv\">\n<h3>bench_csdeconv<a class=\"headerlink\" href=\"#bench-csdeconv\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_csd.bench_csdeconv\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_csd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bench_csdeconv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">center</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(50,</span> <span class=\"pre\">40,</span> <span class=\"pre\">40)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">12</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_csd.bench_csdeconv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"bench-local-maxima\">\n<h3>bench_local_maxima<a class=\"headerlink\" href=\"#bench-local-maxima\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_peaks.bench_local_maxima\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_peaks.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bench_local_maxima</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_peaks.bench_local_maxima\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"old-squash\">\n<h3>old_squash<a class=\"headerlink\" href=\"#old-squash\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_squash.old_squash\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_squash.</span></span><span class=\"sig-name descname\"><span class=\"pre\">old_squash</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">arr</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fill</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_squash.old_squash\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try and make a standard array from an object array</p>\n<p>This function takes an object array and attempts to convert it to a more\nuseful dtype. If array can be converted to a better dtype, Nones are\nreplaced by <cite>fill</cite>. To make the behaviour of this function more clear, here\nare the most common cases:</p>\n<ol class=\"arabic simple\">\n<li><p><cite>arr</cite> is an array of scalars of type <cite>T</cite>. Returns an array like\n<cite>arr.astype(T)</cite></p></li>\n<li><p><cite>arr</cite> is an array of arrays. All items in <cite>arr</cite> have the same shape\n<cite>S</cite>. Returns an array with shape <cite>arr.shape + S</cite>.</p></li>\n<li><p><cite>arr</cite> is an array of arrays of different shapes. Returns <cite>arr</cite>.</p></li>\n<li><p>Items in <cite>arr</cite> are not ndarrys or scalars. Returns <cite>arr</cite>.</p></li>\n</ol>\n<section id=\"id87\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id87\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>arr<span class=\"classifier\">array, dtype=object</span></dt><dd><p>The array to be converted.</p>\n</dd>\n<dt>mask<span class=\"classifier\">array, dtype=bool, optional</span></dt><dd><p>Where arr has Nones.</p>\n</dd>\n<dt>fill<span class=\"classifier\">number, optional</span></dt><dd><p>Nones are replaced by fill.</p>\n</dd>\n</dl>\n</section>\n<section id=\"returns\">\n<h4>Returns<a class=\"headerlink\" href=\"#returns\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>result : array</p>\n</section>\n<section id=\"examples\">\n<h4>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">object</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">old_squash</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n<span class=\"go\">array([2, 2, 2])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">old_squash</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n<span class=\"go\">array([0, 2, 2])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">old_squash</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n<span class=\"go\">dtype(&#39;float64&#39;)</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bench-quick-squash\">\n<h3>bench_quick_squash<a class=\"headerlink\" href=\"#bench-quick-squash\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_squash.bench_quick_squash\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_squash.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bench_quick_squash</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_squash.bench_quick_squash\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"bench-vec-val-vect\">\n<h3>bench_vec_val_vect<a class=\"headerlink\" href=\"#bench-vec-val-vect\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.benchmarks.bench_vec_val_sum.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bench_vec_val_vect</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"cache\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a><a class=\"headerlink\" href=\"#cache\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cache.Cache\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.cache.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Cache</span></span><a class=\"headerlink\" href=\"#dipy.reconst.cache.Cache\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Cache values based on a key object (such as a sphere or gradient table).</p>\n<section id=\"notes\">\n<h4>Notes<a class=\"headerlink\" href=\"#notes\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>This class is meant to be used as a mix-in:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Cache</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelFit</span><span class=\"p\">(</span><span class=\"n\">Fit</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>Inside a method on the fit, typical usage would be:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">):</span>\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">cache_get</span><span class=\"p\">(</span><span class=\"s1\">&#39;odf_basis_matrix&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">M</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_compute_basis_matrix</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">cache_set</span><span class=\"p\">(</span><span class=\"s1\">&#39;odf_basis_matrix&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">M</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cache.Cache.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.cache.Cache.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cache.Cache.cache_clear\">\n<span class=\"sig-name descname\"><span class=\"pre\">cache_clear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.cache.Cache.cache_clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clear the cache.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cache.Cache.cache_get\">\n<span class=\"sig-name descname\"><span class=\"pre\">cache_get</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tag</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.cache.Cache.cache_get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Retrieve a value from the cache.</p>\n<section id=\"id88\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id88\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>tag<span class=\"classifier\">str</span></dt><dd><p>Description of the cached value.</p>\n</dd>\n<dt>key<span class=\"classifier\">object</span></dt><dd><p>Key object used to look up the cached value.</p>\n</dd>\n<dt>default<span class=\"classifier\">object</span></dt><dd><p>Value to be returned if no cached entry is found.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id89\">\n<h5>Returns<a class=\"headerlink\" href=\"#id89\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>v<span class=\"classifier\">object</span></dt><dd><p>Value from the cache associated with <code class=\"docutils literal notranslate\"><span class=\"pre\">(tag,</span> <span class=\"pre\">key)</span></code>.  Returns\n<cite>default</cite> if no cached entry is found.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cache.Cache.cache_set\">\n<span class=\"sig-name descname\"><span class=\"pre\">cache_set</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tag</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.cache.Cache.cache_set\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Store a value in the cache.</p>\n<section id=\"id90\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id90\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>tag<span class=\"classifier\">str</span></dt><dd><p>Description of the cached value.</p>\n</dd>\n<dt>key<span class=\"classifier\">object</span></dt><dd><p>Key object used to look up the cached value.</p>\n</dd>\n<dt>value<span class=\"classifier\">object</span></dt><dd><p>Value stored in the cache for each unique combination\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">(tag,</span> <span class=\"pre\">key)</span></code>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id91\">\n<h5>Examples<a class=\"headerlink\" href=\"#id91\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">compute_expensive_matrix</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"c1\"># Imagine the following computation is very expensive</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">parameters</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X1</span> <span class=\"o\">=</span> <span class=\"n\">compute_expensive_matrix</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">cache_set</span><span class=\"p\">(</span><span class=\"s1\">&#39;expensive_matrix&#39;</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">,</span> <span class=\"n\">X1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X2</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">cache_get</span><span class=\"p\">(</span><span class=\"s1\">&#39;expensive_matrix&#39;</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X1</span> <span class=\"ow\">is</span> <span class=\"n\">X2</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"coeff-of-determination\">\n<h3>coeff_of_determination<a class=\"headerlink\" href=\"#coeff-of-determination\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cross_validation.coeff_of_determination\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.cross_validation.</span></span><span class=\"sig-name descname\"><span class=\"pre\">coeff_of_determination</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.cross_validation.coeff_of_determination\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl>\n<dt>Calculate the coefficient of determination for a model prediction,</dt><dd><p>relative to data.</p>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">ndarray</span></dt><dd><p>The data</p>\n</dd>\n<dt>model<span class=\"classifier\">ndarray</span></dt><dd><p>The predictions of a model for this data. Same shape as the data.</p>\n</dd>\n<dt>axis: int, optional</dt><dd><p>The axis along which different samples are laid out (default: -1).</p>\n</dd>\n</dl>\n<dl class=\"simple\">\n<dt>COD<span class=\"classifier\">ndarray</span></dt><dd><p>The coefficient of determination. This has shape <cite>data.shape[:-1]</cite></p>\n</dd>\n</dl>\n<p>See: <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Coefficient_of_determination\">http://en.wikipedia.org/wiki/Coefficient_of_determination</a></p>\n<p>The coefficient of determination is calculated as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[R^2 = 100 * (1 - \\]</div>\n</dd>\n</dl>\n<p>rac{SSE}{SSD})</p>\n<blockquote>\n<div><p>where SSE is the sum of the squared error between the model and the data\n(sum of the squared residuals) and SSD is the sum of the squares of the\ndeviations of the data from the mean of the data (variance * N).</p>\n</div></blockquote>\n</dd></dl>\n\n</section>\n<section id=\"kfold-xval\">\n<h3>kfold_xval<a class=\"headerlink\" href=\"#kfold-xval\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.cross_validation.kfold_xval\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.cross_validation.</span></span><span class=\"sig-name descname\"><span class=\"pre\">kfold_xval</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">folds</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">model_args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">model_kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.cross_validation.kfold_xval\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Perform k-fold cross-validation.</p>\n<p>It generate out-of-sample predictions for each measurement.</p>\n<section id=\"id92\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id92\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">Model class instance</span></dt><dd><p>The type of the model to use for prediction. The corresponding Fit\nobject must have a <cite>predict</cite> function implemented One of the following:\n<cite>reconst.dti.TensorModel</cite> or\n<cite>reconst.csdeconv.ConstrainedSphericalDeconvModel</cite>.</p>\n</dd>\n<dt>data<span class=\"classifier\">ndarray</span></dt><dd><p>Diffusion MRI data acquired with the GradientTable of the model. Shape\nwill typically be <cite>(x, y, z, b)</cite> where <cite>xyz</cite> are spatial dimensions and\nb is the number of bvals/bvecs in the GradientTable.</p>\n</dd>\n<dt>folds<span class=\"classifier\">int</span></dt><dd><p>The number of divisions to apply to the data</p>\n</dd>\n<dt>model_args<span class=\"classifier\">list</span></dt><dd><p>Additional arguments to the model initialization</p>\n</dd>\n<dt>model_kwargs<span class=\"classifier\">dict</span></dt><dd><p>Additional key-word arguments to the model initialization. If contains\nthe kwarg <cite>mask</cite>, this will be used as a key-word argument to the <cite>fit</cite>\nmethod of the model object, rather than being used in the\ninitialization of the model object</p>\n</dd>\n</dl>\n</section>\n<section id=\"id93\">\n<h4>Notes<a class=\"headerlink\" href=\"#id93\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>This function assumes that a prediction API is implemented in the Model\nclass for which prediction is conducted. That is, the Fit object that gets\ngenerated upon fitting the model needs to have a <cite>predict</cite> method, which\nreceives a GradientTable class instance as input and produces a predicted\nsignal as output.</p>\n<p>It also assumes that the model object has <cite>bval</cite> and <cite>bvec</cite> attributes\nholding b-values and corresponding unit vectors.</p>\n</section>\n<section id=\"id94\">\n<h4>References<a class=\"headerlink\" href=\"#id94\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id95\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Rokem, A., Chan, K.L. Yeatman, J.D., Pestilli, F., Mezer, A.,\nWandell, B.A., 2014. Evaluating the accuracy of diffusion models at\nmultiple b-values with cross-validation. ISMRM 2014.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"axsymshresponse\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.AxSymShResponse\" title=\"dipy.reconst.csdeconv.AxSymShResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AxSymShResponse</span></code></a><a class=\"headerlink\" href=\"#axsymshresponse\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.AxSymShResponse\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AxSymShResponse</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dwi_response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvalue</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.AxSymShResponse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A simple wrapper for response functions represented using only axially\nsymmetric, even spherical harmonic functions (ie, m == 0 and n even).</p>\n<section id=\"id96\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id96\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S0<span class=\"classifier\">float</span></dt><dd><p>Signal with no diffusion weighting.</p>\n</dd>\n<dt>dwi_response<span class=\"classifier\">array</span></dt><dd><p>Response function signal as coefficients to axially symmetric, even\nspherical harmonic.</p>\n</dd>\n</dl>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.AxSymShResponse.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dwi_response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvalue</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.AxSymShResponse.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.AxSymShResponse.basis\">\n<span class=\"sig-name descname\"><span class=\"pre\">basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.AxSymShResponse.basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A basis that maps the response coefficients onto a sphere.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.AxSymShResponse.on_sphere\">\n<span class=\"sig-name descname\"><span class=\"pre\">on_sphere</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.AxSymShResponse.on_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Evaluates the response function on sphere.</p>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"constrainedsphericaldeconvmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\" title=\"dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a><a class=\"headerlink\" href=\"#constrainedsphericaldeconvmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">convergence</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">convergence</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained Spherical Deconvolution (CSD) <a href=\"#id1351\"><span class=\"problematic\" id=\"id97\">[1]_</span></a>.</p>\n<p>Spherical deconvolution computes a fiber orientation distribution\n(FOD), also called fiber ODF (fODF) <a href=\"#id1352\"><span class=\"problematic\" id=\"id98\">[2]_</span></a>, as opposed to a diffusion ODF\nas the QballModel or the CsaOdfModel. This results in a sharper angular\nprofile with better angular resolution that is the best object to be\nused for later deterministic and probabilistic tractography <a href=\"#id1353\"><span class=\"problematic\" id=\"id99\">[3]_</span></a>.</p>\n<p>A sharp fODF is obtained because a single fiber <em>response</em> function is\ninjected as <em>a priori</em> knowledge. The response function is often\ndata-driven and is thus provided as input to the\nConstrainedSphericalDeconvModel. It will be used as deconvolution\nkernel, as described in <a href=\"#id1354\"><span class=\"problematic\" id=\"id100\">[1]_</span></a>.</p>\n<section id=\"id101\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id101\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nresponse : tuple or AxSymShResponse object</p>\n<blockquote>\n<div><p>A tuple with two elements. The first is the eigen-values as an (3,)\nndarray and the second is the signal value for the response\nfunction without diffusion weighting (i.e. S0).  This is to be able\nto generate a single fiber synthetic signal. The response function\nwill be used as deconvolution kernel (<a href=\"#id1355\"><span class=\"problematic\" id=\"id102\">[1]_</span></a>).</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>reg_sphere<span class=\"classifier\">Sphere (optional)</span></dt><dd><p>sphere used to build the regularization B matrix.\nDefault: \u2018symmetric362\u2019.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int (optional)</span></dt><dd><p>maximal spherical harmonics order. Default: 8</p>\n</dd>\n<dt><a href=\"#id1356\"><span class=\"problematic\" id=\"id1357\">lambda_</span></a><span class=\"classifier\">float (optional)</span></dt><dd><p>weight given to the constrained-positivity regularization part of\nthe deconvolution equation (see <a href=\"#id1358\"><span class=\"problematic\" id=\"id103\">[1]_</span></a>). Default: 1</p>\n</dd>\n<dt>tau<span class=\"classifier\">float (optional)</span></dt><dd><p>threshold controlling the amplitude below which the corresponding\nfODF is assumed to be zero.  Ideally, tau should be set to\nzero. However, to improve the stability of the algorithm, tau is\nset to tau*100 % of the mean fODF amplitude (here, 10% by default)\n(see <a href=\"#id1359\"><span class=\"problematic\" id=\"id104\">[1]_</span></a>). Default: 0.1</p>\n</dd>\n<dt>convergence<span class=\"classifier\">int</span></dt><dd><p>Maximum number of iterations to allow the deconvolution to\nconverge.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id105\">\n<h4>References<a class=\"headerlink\" href=\"#id105\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id106\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical\ndeconvolution</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id107\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\nProbabilistic Tractography Based on Complex Fibre Orientation\nDistributions</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id108\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>C\u00f4t\u00e9, M-A., et al. Medical Image Analysis 2013. Tractometer:\nTowards validation of tractography pipelines</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id109\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>4<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D, et al. Imaging Systems and Technology\n2012. MRtrix: Diffusion Tractography in Crossing Fiber Regions</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coeff</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute a signal prediction given spherical harmonic coefficients\nfor the provided GradientTable class instance.</p>\n<section id=\"id110\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id110\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh_coeff<span class=\"classifier\">ndarray</span></dt><dd><p>The spherical harmonic representation of the FOD from which to make\nthe signal prediction.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>The gradients for which the signal will be predicted. Uses the\nmodel\u2019s gradient table by default.</p>\n</dd>\n<dt>S0<span class=\"classifier\">ndarray or float</span></dt><dd><p>The non diffusion-weighted signal value.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id111\">\n<h4>Returns<a class=\"headerlink\" href=\"#id111\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>pred_sig<span class=\"classifier\">ndarray</span></dt><dd><p>The predicted signal.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"constrainedsdtmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel\" title=\"dipy.reconst.csdeconv.ConstrainedSDTModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSDTModel</span></code></a><a class=\"headerlink\" href=\"#constrainedsdtmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSDTModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ConstrainedSDTModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ratio</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSDTModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ratio</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spherical Deconvolution Transform (SDT) <a href=\"#id1360\"><span class=\"problematic\" id=\"id112\">[1]_</span></a>.</p>\n<p>The SDT computes a fiber orientation distribution (FOD) as opposed to a\ndiffusion ODF as the QballModel or the CsaOdfModel. This results in a\nsharper angular profile with better angular resolution. The Constrained\nSDTModel is similar to the Constrained CSDModel but mathematically it\ndeconvolves the q-ball ODF as oppposed to the HARDI signal (see <a href=\"#id1361\"><span class=\"problematic\" id=\"id113\">[1]_</span></a>\nfor a comparison and a through discussion).</p>\n<p>A sharp fODF is obtained because a single fiber <em>response</em> function is\ninjected as <em>a priori</em> knowledge. In the SDTModel, this response is a\nsingle fiber q-ball ODF as opposed to a single fiber signal function\nfor the CSDModel. The response function will be used as deconvolution\nkernel.</p>\n<section id=\"id114\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id114\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nratio : float</p>\n<blockquote>\n<div><p>ratio of the smallest vs the largest eigenvalue of the single\nprolate tensor response function</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>reg_sphere<span class=\"classifier\">Sphere</span></dt><dd><p>sphere used to build the regularization B matrix</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int</span></dt><dd><p>maximal spherical harmonics order</p>\n</dd>\n<dt><a href=\"#id1362\"><span class=\"problematic\" id=\"id1363\">lambda_</span></a><span class=\"classifier\">float</span></dt><dd><p>weight given to the constrained-positivity regularization part of\nthe deconvolution equation</p>\n</dd>\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>threshold (tau <a href=\"#id115\"><span class=\"problematic\" id=\"id116\">*</span></a>mean(fODF)) controlling the amplitude below\nwhich the corresponding fODF is assumed to be zero.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id117\">\n<h4>References<a class=\"headerlink\" href=\"#id117\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id118\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\nProbabilistic Tractography Based on Complex Fibre Orientation\nDistributions.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.ConstrainedSDTModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"auto-response\">\n<h3>auto_response<a class=\"headerlink\" href=\"#auto-response\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.auto_response\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">auto_response</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_center</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.7</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa_callable</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_number_of_voxels</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.auto_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Automatic estimation of ssst response function using FA.</p>\n<p>dipy.reconst.csdeconv.auto_response is deprecated, Please use dipy.reconst.csdeconv.auto_response_ssst instead</p>\n<ul class=\"simple\">\n<li><p>deprecated from version: 1.2</p></li>\n<li><p>Raises &lt;class \u2018dipy.utils.deprecator.ExpiredDeprecationError\u2019&gt; as of version: 1.4</p></li>\n</ul>\n<section id=\"id119\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id119\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>roi_center<span class=\"classifier\">array-like, (3,)</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt>roi_radius<span class=\"classifier\">int</span></dt><dd><p>radius of cubic ROI</p>\n</dd>\n<dt>fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold</p>\n</dd>\n<dt>fa_callable<span class=\"classifier\">callable</span></dt><dd><p>A callable that defines an operation that compares FA with the fa_thr.\nThe operator should have two positional arguments\n(e.g., <cite>fa_operator(FA, fa_thr)</cite>) and it should return a bool array.</p>\n</dd>\n<dt>return_number_of_voxels<span class=\"classifier\">bool</span></dt><dd><p>If True, returns the number of voxels used for estimating the response\nfunction</p>\n</dd>\n</dl>\n</section>\n<section id=\"id120\">\n<h4>Returns<a class=\"headerlink\" href=\"#id120\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response<span class=\"classifier\">tuple, (2,)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt>ratio<span class=\"classifier\">float</span></dt><dd><p>The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id121\">\n<h4>Notes<a class=\"headerlink\" href=\"#id121\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this, we look for voxels with very\nanisotropic configurations. We get this information from\ncsdeconv.mask_for_response_ssst(), which returns a mask of selected voxels\n(more details are available in the description of the function).</p>\n<p>With the mask, we compute the response function by using\ncsdeconv.response_from_mask_ssst(), which returns the <cite>response</cite> and the\n<cite>ratio</cite> (more details are available in the description of the function).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"response-from-mask\">\n<h3>response_from_mask<a class=\"headerlink\" href=\"#response-from-mask\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.response_from_mask\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">response_from_mask</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.response_from_mask\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Computation of single-shell single-tissue (ssst) response</dt><dd><p>function from a given mask.</p>\n</dd>\n</dl>\n<p>dipy.reconst.csdeconv.response_from_mask is deprecated, Please use dipy.reconst.csdeconv.response_from_mask_ssst instead</p>\n<ul class=\"simple\">\n<li><p>deprecated from version: 1.2</p></li>\n<li><p>Raises &lt;class \u2018dipy.utils.deprecator.ExpiredDeprecationError\u2019&gt; as of version: 1.4</p></li>\n</ul>\n<section id=\"id122\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id122\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>mask<span class=\"classifier\">ndarray</span></dt><dd><p>mask from where to compute the response function</p>\n</dd>\n</dl>\n</section>\n<section id=\"id123\">\n<h4>Returns<a class=\"headerlink\" href=\"#id123\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response<span class=\"classifier\">tuple, (2,)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt>ratio<span class=\"classifier\">float</span></dt><dd><p>The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id124\">\n<h4>Notes<a class=\"headerlink\" href=\"#id124\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this, we look for voxels with very\nanisotropic configurations. This information can be obtained by using\ncsdeconv.mask_for_response_ssst() through a mask of selected voxels\n(see[1]_). The present function uses such a mask to compute the ssst\nresponse function.</p>\n<p>For the response we also need to find the average S0 in the ROI. This is\npossible using <cite>gtab.b0s_mask()</cite> we can find all the S0 volumes (which\ncorrespond to b-values equal 0) in the dataset.</p>\n<p>The <cite>response</cite> consists always of a prolate tensor created by averaging\nthe highest and second highest eigenvalues in the ROI with FA higher than\nthreshold. We also include the average S0s.</p>\n<p>We also return the <cite>ratio</cite> which is used for the SDT models.</p>\n</section>\n<section id=\"id125\">\n<h4>References<a class=\"headerlink\" href=\"#id125\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id126\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D., et al. NeuroImage 2004. Direct estimation of the</p>\n</aside>\n</aside>\n<p>fiber orientation density function from diffusion-weighted MRI\ndata using spherical deconvolution</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"estimate-response\">\n<h3>estimate_response<a class=\"headerlink\" href=\"#estimate-response\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.estimate_response\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">estimate_response</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.estimate_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Estimate single fiber response function</p>\n<section id=\"id127\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id127\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nevals : ndarray\nS0 : float</p>\n<blockquote>\n<div><p>non diffusion weighted</p>\n</div></blockquote>\n</section>\n<section id=\"id128\">\n<h4>Returns<a class=\"headerlink\" href=\"#id128\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>S : estimated signal</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"forward-sdt-deconv-mat\">\n<h3>forward_sdt_deconv_mat<a class=\"headerlink\" href=\"#forward-sdt-deconv-mat\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.forward_sdt_deconv_mat\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">forward_sdt_deconv_mat</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ratio</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r2_term</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.forward_sdt_deconv_mat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Build forward sharpening deconvolution transform (SDT) matrix\n\nParameters\n\u2014\u2014\u2014-\nratio : float\n    ratio = <span class=\"math notranslate nohighlight\">\\(\\frac{\\lambda_2}{\\lambda_1}\\)</span> of the single fiber response\n    function\nn : ndarray (N,)\n    The degree of spherical harmonic function associated with each row of\n    the deconvolution matrix. Only even degrees are allowed.\nr2_term : bool\n    True if ODF comes from an ODF computed from a model using the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span>\n    term in the integral. For example, DSI, GQI, SHORE, CSA, Tensor,\n    Multi-tensor ODFs. This results in using the proper analytical response\n    function solution solving from the single-fiber ODF with the r^2 term.\n    This derivation is not published anywhere but is very similar to <a href=\"#id1364\"><span class=\"problematic\" id=\"id129\">[1]_</span></a>.\n\nReturns\n\u2014\u2014-\nR : ndarray (N, N)\n    SDT deconvolution matrix\nP : ndarray (N, N)\n    Funk-Radon Transform (FRT) matrix\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Descoteaux, M. PhD Thesis. INRIA Sophia-Antipolis. 2008.</p>\n</dd></dl>\n\n</section>\n<section id=\"csdeconv\">\n<h3>csdeconv<a class=\"headerlink\" href=\"#csdeconv\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.csdeconv\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">csdeconv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dwsignal</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B_reg</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">convergence</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.csdeconv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained-regularized spherical deconvolution (CSD) <a href=\"#id1365\"><span class=\"problematic\" id=\"id130\">[1]_</span></a>\n\nDeconvolves the axially symmetric single fiber response function <cite>r_rh</cite> in\nrotational harmonics coefficients from the diffusion weighted signal in\n<cite>dwsignal</cite>.\n\nParameters\n\u2014\u2014\u2014-\ndwsignal : array\n    Diffusion weighted signals to be deconvolved.\nX : array\n    Prediction matrix which estimates diffusion weighted signals from FOD\n    coefficients.\nB_reg : array (N, B)\n    SH basis matrix which maps FOD coefficients to FOD values on the\n    surface of the sphere. B_reg should be scaled to account for lambda.\ntau : float\n    Threshold controlling the amplitude below which the corresponding fODF\n    is assumed to be zero.  Ideally, tau should be set to zero. However, to\n    improve the stability of the algorithm, tau is set to tau*100 % of the\n    max fODF amplitude (here, 10% by default). This is similar to peak\n    detection where peaks below 0.1 amplitude are usually considered noise\n    peaks. Because SDT is based on a q-ball ODF deconvolution, and not\n    signal deconvolution, using the max instead of mean (as in CSD), is\n    more stable.\nconvergence : int\n    Maximum number of iterations to allow the deconvolution to converge.\nP : ndarray\n    This is an optimization to avoid computing <code class=\"docutils literal notranslate\"><span class=\"pre\">dot(X.T,</span> <span class=\"pre\">X)</span></code> many times.\n    If the same <code class=\"docutils literal notranslate\"><span class=\"pre\">X</span></code> is used many times, <code class=\"docutils literal notranslate\"><span class=\"pre\">P</span></code> can be precomputed and\n    passed to this function.\n\nReturns\n\u2014\u2014-\nfodf_sh : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)*(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,)\n     Spherical harmonics coefficients of the constrained-regularized fiber\n     ODF.\nnum_it : int\n     Number of iterations in the constrained-regularization used for\n     convergence.\n\nNotes\n\u2014\u2013\nThis section describes how the fitting of the SH coefficients is done.\nProblem is to minimise per iteration:\n\n<span class=\"math notranslate nohighlight\">\\(F(f_n) = ||Xf_n - S||^2 + \\lambda^2 ||H_{n-1} f_n||^2\\)</span>\n\nWhere <span class=\"math notranslate nohighlight\">\\(X\\)</span> maps current FOD SH coefficients <span class=\"math notranslate nohighlight\">\\(f_n\\)</span> to DW signals <span class=\"math notranslate nohighlight\">\\(s\\)</span> and\n<span class=\"math notranslate nohighlight\">\\(H_{n-1}\\)</span> maps FOD SH coefficients <span class=\"math notranslate nohighlight\">\\(f_n\\)</span> to amplitudes along set of\nnegative directions identified in previous iteration, i.e. the matrix\nformed by the rows of <span class=\"math notranslate nohighlight\">\\(B_{reg}\\)</span> for which <span class=\"math notranslate nohighlight\">\\(Hf_{n-1}&lt;0\\)</span> where <span class=\"math notranslate nohighlight\">\\(B_{reg}\\)</span>\nmaps <span class=\"math notranslate nohighlight\">\\(f_n\\)</span> to FOD amplitude on a sphere.\n\nSolve by differentiating and setting to zero:\n\n<span class=\"math notranslate nohighlight\">\\(\\Rightarrow \\frac{\\delta F}{\\delta f_n} = 2X^T(Xf_n - S) + 2 \\lambda^2\nH_{n-1}^TH_{n-1}f_n=0\\)</span>\n\nOr:\n\n<span class=\"math notranslate nohighlight\">\\((X^TX + \\lambda^2 H_{n-1}^TH_{n-1})f_n = X^Ts\\)</span>\n\nDefine <span class=\"math notranslate nohighlight\">\\(Q = X^TX + \\lambda^2 H_{n-1}^TH_{n-1}\\)</span> , which by construction is a\nsquare positive definite symmetric matrix of size <span class=\"math notranslate nohighlight\">\\(n_{SH} by n_{SH}\\)</span>. If\nneeded, positive definiteness can be enforced with a small minimum norm\nregulariser (helps a lot with poorly conditioned direction sets and/or\nsuperresolution):\n\n<span class=\"math notranslate nohighlight\">\\(Q = X^TX + (\\lambda H_{n-1}^T) (\\lambda H_{n-1}) + \\mu I\\)</span>\n\nSolve <span class=\"math notranslate nohighlight\">\\(Qf_n = X^Ts\\)</span> using Cholesky decomposition:\n\n<span class=\"math notranslate nohighlight\">\\(Q = LL^T\\)</span>\n\nwhere <span class=\"math notranslate nohighlight\">\\(L\\)</span> is lower triangular. Then problem can be solved by\nback-substitution:\n\n<span class=\"math notranslate nohighlight\">\\(L_y = X^Ts\\)</span>\n\n<span class=\"math notranslate nohighlight\">\\(L^Tf_n = y\\)</span>\n\nTo speeds things up further, form <span class=\"math notranslate nohighlight\">\\(P = X^TX + \\mu I\\)</span>, and update to form\n<span class=\"math notranslate nohighlight\">\\(Q\\)</span> by rankn update with <span class=\"math notranslate nohighlight\">\\(H_{n-1}\\)</span>. The dipy implementation looks like:\n\n    form initially <span class=\"math notranslate nohighlight\">\\(P = X^T X + \\mu I\\)</span> and <span class=\"math notranslate nohighlight\">\\(\\lambda B_{reg}\\)</span>\n\n    for each voxel: form <span class=\"math notranslate nohighlight\">\\(z = X^Ts\\)</span>\n\n        estimate <span class=\"math notranslate nohighlight\">\\(f_0\\)</span> by solving <span class=\"math notranslate nohighlight\">\\(Pf_0=z\\)</span>. We use a simplified <span class=\"math notranslate nohighlight\">\\(l_{max}=4\\)</span>\n        solution here, but it might not make a big difference.\n\n        Then iterate until no change in rows of <span class=\"math notranslate nohighlight\">\\(H\\)</span> used in <span class=\"math notranslate nohighlight\">\\(H_n\\)</span>\n\n            form <span class=\"math notranslate nohighlight\">\\(H_{n}\\)</span> given <span class=\"math notranslate nohighlight\">\\(f_{n-1}\\)</span>\n\n            form <span class=\"math notranslate nohighlight\">\\(Q = P + (\\lambda H_{n-1}^T) (\\lambda H_{n-1}\\)</span>) (this can\n            be done by rankn update, but we currently do not use rankn\n            update).\n\n            solve <span class=\"math notranslate nohighlight\">\\(Qf_n = z\\)</span> using Cholesky decomposition\n\nWe\u2019d like to thanks Donald Tournier for his help with describing and\nimplementing this algorithm.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Tournier, J.D., et al. NeuroImage 2007. Robust determination of the\n       fibre orientation distribution in diffusion MRI: Non-negativity\n       constrained super-resolved spherical deconvolution.</p>\n</dd></dl>\n\n</section>\n<section id=\"odf-deconv\">\n<h3>odf_deconv<a class=\"headerlink\" href=\"#odf-deconv\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.odf_deconv\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">odf_deconv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf_sh</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B_reg</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r2_term</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.odf_deconv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ODF constrained-regularized spherical deconvolution using\nthe Sharpening Deconvolution Transform (SDT) <a href=\"#id1366\"><span class=\"problematic\" id=\"id131\">[1]_</span></a>, <a href=\"#id1367\"><span class=\"problematic\" id=\"id132\">[2]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\nodf_sh : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)*(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,)\n     ndarray of SH coefficients for the ODF spherical function to be\n     deconvolved\nR : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,\n     <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>)\n     SDT matrix in SH basis\nB_reg : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,\n     <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>)\n     SH basis matrix used for deconvolution\n<a href=\"#id1368\"><span class=\"problematic\" id=\"id1369\">lambda_</span></a> : float\n     lambda parameter in minimization equation (default 1.0)\ntau : float\n     threshold (tau <a href=\"#id133\"><span class=\"problematic\" id=\"id134\">*</span></a>max(fODF)) controlling the amplitude below\n     which the corresponding fODF is assumed to be zero.\nr2_term : bool\n     True if ODF is computed from model that uses the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the\n     integral.  Recall that Tuch\u2019s ODF (used in Q-ball Imaging <a href=\"#id1370\"><span class=\"problematic\" id=\"id135\">[1]_</span></a>) and\n     the true normalized ODF definition differ from a <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the ODF\n     integral. The original Sharpening Deconvolution Transform (SDT)\n     technique <a href=\"#id1371\"><span class=\"problematic\" id=\"id136\">[2]_</span></a> is expecting Tuch\u2019s ODF without the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> (see <a href=\"#id1372\"><span class=\"problematic\" id=\"id137\">[3]_</span></a> for\n     the mathematical details).  Now, this function supports ODF that have\n     been computed using the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term because the proper analytical\n     response function has be derived.  For example, models such as DSI,\n     GQI, SHORE, CSA, Tensor, Multi-tensor ODFs, should now be deconvolved\n     with the r2_term=True.\n\nReturns\n\u2014\u2014-\nfodf_sh : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,)\n     Spherical harmonics coefficients of the constrained-regularized fiber\n     ODF\nnum_it : int\n     Number of iterations in the constrained-regularization used for\n     convergence\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Tuch, D. MRM 2004. Q-Ball Imaging.\n.. [2] Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\n       Probabilistic Tractography Based on Complex Fibre Orientation\n       Distributions\n.. [3] Descoteaux, M, PhD thesis, INRIA Sophia-Antipolis, 2008.</p>\n</dd></dl>\n\n</section>\n<section id=\"odf-sh-to-sharp\">\n<h3>odf_sh_to_sharp<a class=\"headerlink\" href=\"#odf-sh-to-sharp\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.odf_sh_to_sharp\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">odf_sh_to_sharp</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odfs_sh</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ratio</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r2_term</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.odf_sh_to_sharp\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sharpen odfs using the sharpening deconvolution transform <a href=\"#id1373\"><span class=\"problematic\" id=\"id138\">[2]_</span></a>\n\nThis function can be used to sharpen any smooth ODF spherical function. In\ntheory, this should only be used to sharpen QballModel ODFs, but in\npractice, one can play with the deconvolution ratio and sharpen almost any\nODF-like spherical function. The constrained-regularization is stable and\nwill not only sharpen the ODF peaks but also regularize the noisy peaks.\n\nParameters\n\u2014\u2014\u2014-\nodfs_sh : ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)*(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>, )\n    array of odfs expressed as spherical harmonics coefficients\nsphere : Sphere\n    sphere used to build the regularization matrix\nbasis : {None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}\n    different spherical harmonic basis:\n    <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n    <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 <a href=\"#id1374\"><span class=\"problematic\" id=\"id139\">[4]_</span></a> basis, and\n    <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a href=\"#id1375\"><span class=\"problematic\" id=\"id140\">[3]_</span></a> basis\n    (<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).\nratio : float,\n    ratio of the smallest vs the largest eigenvalue of the single prolate\n    tensor response function (<span class=\"math notranslate nohighlight\">\\(\\frac{\\lambda_2}{\\lambda_1}\\)</span>)\nsh_order : int\n    maximal SH order of the SH representation\n<a href=\"#id1376\"><span class=\"problematic\" id=\"id1377\">lambda_</span></a> : float\n    lambda parameter (see odfdeconv) (default 1.0)\ntau : float\n    tau parameter in the L matrix construction (see odfdeconv)\n    (default 0.1)\nr2_term : bool\n     True if ODF is computed from model that uses the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the\n     integral.  Recall that Tuch\u2019s ODF (used in Q-ball Imaging <a href=\"#id1378\"><span class=\"problematic\" id=\"id141\">[1]_</span></a>) and\n     the true normalized ODF definition differ from a <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the ODF\n     integral. The original Sharpening Deconvolution Transform (SDT)\n     technique <a href=\"#id1379\"><span class=\"problematic\" id=\"id142\">[2]_</span></a> is expecting Tuch\u2019s ODF without the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> (see <a href=\"#id1380\"><span class=\"problematic\" id=\"id143\">[3]_</span></a> for\n     the mathematical details).  Now, this function supports ODF that have\n     been computed using the <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term because the proper analytical\n     response function has be derived.  For example, models such as DSI,\n     GQI, SHORE, CSA, Tensor, Multi-tensor ODFs, should now be deconvolved\n     with the r2_term=True.\n\nReturns\n\u2014\u2014-\nfodf_sh : ndarray\n    sharpened odf expressed as spherical harmonics coefficients\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Tuch, D. MRM 2004. Q-Ball Imaging.\n.. [2] Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\n       Probabilistic Tractography Based on Complex Fibre Orientation\n       Distributions\n.. [3] Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\n       Regularized, Fast, and Robust Analytical Q-ball Imaging.\n       Magn. Reson. Med. 2007;58:497-510.\n.. [4] Tournier J.D., Calamante F. and Connelly A. Robust determination\n       of the fibre orientation distribution in diffusion MRI:\n       Non-negativity constrained super-resolved spherical deconvolution.\n       NeuroImage. 2007;35(4):1459-1472.</p>\n</dd></dl>\n\n</section>\n<section id=\"mask-for-response-ssst\">\n<h3>mask_for_response_ssst<a class=\"headerlink\" href=\"#mask-for-response-ssst\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.mask_for_response_ssst\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mask_for_response_ssst</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_center</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_radii</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.7</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.mask_for_response_ssst\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Computation of mask for single-shell single-tissue (ssst) response</dt><dd><p>function using FA.</p>\n</dd>\n</dl>\n<section id=\"id144\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id144\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data (4D)</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>roi_center<span class=\"classifier\">array-like, (3,)</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt>roi_radii<span class=\"classifier\">int or array-like, (3,)</span></dt><dd><p>radii of cuboid ROI</p>\n</dd>\n<dt>fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold</p>\n</dd>\n</dl>\n</section>\n<section id=\"id145\">\n<h4>Returns<a class=\"headerlink\" href=\"#id145\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mask<span class=\"classifier\">ndarray</span></dt><dd><p>Mask of voxels within the ROI and with FA above the FA threshold.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id146\">\n<h4>Notes<a class=\"headerlink\" href=\"#id146\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this, we look for voxels with very\nanisotropic configurations. This function aims to accomplish that by\nreturning a mask of voxels within a ROI, that have a FA value above a\ngiven threshold. For example we can use a ROI (20x20x20) at\nthe center of the volume and store the signal values for the voxels with\nFA values higher than 0.7 (see <a href=\"#id1381\"><span class=\"problematic\" id=\"id147\">[1]_</span></a>).</p>\n</section>\n<section id=\"id148\">\n<h4>References<a class=\"headerlink\" href=\"#id148\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id149\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D., et al. NeuroImage 2004. Direct estimation of the</p>\n</aside>\n</aside>\n<p>fiber orientation density function from diffusion-weighted MRI\ndata using spherical deconvolution</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"response-from-mask-ssst\">\n<h3>response_from_mask_ssst<a class=\"headerlink\" href=\"#response-from-mask-ssst\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.response_from_mask_ssst\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">response_from_mask_ssst</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.response_from_mask_ssst\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Computation of single-shell single-tissue (ssst) response</dt><dd><p>function from a given mask.</p>\n</dd>\n</dl>\n<section id=\"id150\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id150\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>mask<span class=\"classifier\">ndarray</span></dt><dd><p>mask from where to compute the response function</p>\n</dd>\n</dl>\n</section>\n<section id=\"id151\">\n<h4>Returns<a class=\"headerlink\" href=\"#id151\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response<span class=\"classifier\">tuple, (2,)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt>ratio<span class=\"classifier\">float</span></dt><dd><p>The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id152\">\n<h4>Notes<a class=\"headerlink\" href=\"#id152\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this, we look for voxels with very\nanisotropic configurations. This information can be obtained by using\ncsdeconv.mask_for_response_ssst() through a mask of selected voxels\n(see[1]_). The present function uses such a mask to compute the ssst\nresponse function.</p>\n<p>For the response we also need to find the average S0 in the ROI. This is\npossible using <cite>gtab.b0s_mask()</cite> we can find all the S0 volumes (which\ncorrespond to b-values equal 0) in the dataset.</p>\n<p>The <cite>response</cite> consists always of a prolate tensor created by averaging\nthe highest and second highest eigenvalues in the ROI with FA higher than\nthreshold. We also include the average S0s.</p>\n<p>We also return the <cite>ratio</cite> which is used for the SDT models.</p>\n</section>\n<section id=\"id153\">\n<h4>References<a class=\"headerlink\" href=\"#id153\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id154\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D., et al. NeuroImage 2004. Direct estimation of the</p>\n</aside>\n</aside>\n<p>fiber orientation density function from diffusion-weighted MRI\ndata using spherical deconvolution</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"auto-response-ssst\">\n<h3>auto_response_ssst<a class=\"headerlink\" href=\"#auto-response-ssst\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.auto_response_ssst\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">auto_response_ssst</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_center</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_radii</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.7</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.auto_response_ssst\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Automatic estimation of single-shell single-tissue (ssst) response</dt><dd><p>function using FA.</p>\n</dd>\n</dl>\n<section id=\"id155\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id155\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>roi_center<span class=\"classifier\">array-like, (3,)</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt>roi_radii<span class=\"classifier\">int or array-like, (3,)</span></dt><dd><p>radii of cuboid ROI</p>\n</dd>\n<dt>fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold</p>\n</dd>\n</dl>\n</section>\n<section id=\"id156\">\n<h4>Returns<a class=\"headerlink\" href=\"#id156\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response<span class=\"classifier\">tuple, (2,)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt>ratio<span class=\"classifier\">float</span></dt><dd><p>The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id157\">\n<h4>Notes<a class=\"headerlink\" href=\"#id157\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this, we look for voxels with very\nanisotropic configurations. We get this information from\ncsdeconv.mask_for_response_ssst(), which returns a mask of selected voxels\n(more details are available in the description of the function).</p>\n<p>With the mask, we compute the response function by using\ncsdeconv.response_from_mask_ssst(), which returns the <cite>response</cite> and the\n<cite>ratio</cite> (more details are available in the description of the function).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"recursive-response\">\n<h3>recursive_response<a class=\"headerlink\" href=\"#recursive-response\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.recursive_response\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">recursive_response</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order=8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">peak_thr=0.01</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">init_fa=0.08</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">init_trace=0.0021</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iter=8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">convergence=0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">parallel=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_processes=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere=&lt;dipy.core.sphere.HemiSphere</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.recursive_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recursive calibration of response function using peak threshold</p>\n<section id=\"id158\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id158\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>mask<span class=\"classifier\">ndarray, optional</span></dt><dd><p>mask for recursive calibration, for example a white matter mask. It has\nshape <cite>data.shape[0:3]</cite> and dtype=bool. Default: use the entire data\narray.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int, optional</span></dt><dd><p>maximal spherical harmonics order. Default: 8</p>\n</dd>\n<dt>peak_thr<span class=\"classifier\">float, optional</span></dt><dd><p>peak threshold, how large the second peak can be relative to the first\npeak in order to call it a single fiber population [1]. Default: 0.01</p>\n</dd>\n<dt>init_fa<span class=\"classifier\">float, optional</span></dt><dd><p>FA of the initial \u2018fat\u2019 response function (tensor). Default: 0.08</p>\n</dd>\n<dt>init_trace<span class=\"classifier\">float, optional</span></dt><dd><p>trace of the initial \u2018fat\u2019 response function (tensor). Default: 0.0021</p>\n</dd>\n<dt>iter<span class=\"classifier\">int, optional</span></dt><dd><p>maximum number of iterations for calibration. Default: 8.</p>\n</dd>\n<dt>convergence<span class=\"classifier\">float, optional</span></dt><dd><p>convergence criterion, maximum relative change of SH\ncoefficients. Default: 0.001.</p>\n</dd>\n<dt>parallel<span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to use parallelization in peak-finding during the calibration\nprocedure. Default: True</p>\n</dd>\n<dt>num_processes<span class=\"classifier\">int, optional</span></dt><dd><p>If <cite>parallel</cite> is True, the number of subprocesses to use\n(default multiprocessing.cpu_count()). If &lt; 0 the maximal number of\ncores minus <code class=\"docutils literal notranslate\"><span class=\"pre\">num_processes</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code> is used (enter -1 to use as many\ncores as possible). 0 raises an error.</p>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere, optional.</span></dt><dd><p>The sphere used for peak finding. Default: default_sphere.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id159\">\n<h4>Returns<a class=\"headerlink\" href=\"#id159\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response<span class=\"classifier\">ndarray</span></dt><dd><p>response function in SH coefficients</p>\n</dd>\n</dl>\n</section>\n<section id=\"id160\">\n<h4>Notes<a class=\"headerlink\" href=\"#id160\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. Using an FA threshold is not a very robust method.\nIt is dependent on the dataset (non-informed used subjectivity), and still\ndepends on the diffusion tensor (FA and first eigenvector),\nwhich has low accuracy at high b-value. This function recursively\ncalibrates the response function, for more information see [1].</p>\n</section>\n<section id=\"id161\">\n<h4>References<a class=\"headerlink\" href=\"#id161\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id162\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tax, C.M.W., et al. NeuroImage 2014. Recursive calibration of\nthe fiber response function for spherical deconvolution of\ndiffusion MRI data.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"fa-trace-to-lambdas\">\n<h3>fa_trace_to_lambdas<a class=\"headerlink\" href=\"#fa-trace-to-lambdas\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.csdeconv.fa_trace_to_lambdas\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.csdeconv.</span></span><span class=\"sig-name descname\"><span class=\"pre\">fa_trace_to_lambdas</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.08</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">trace</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0021</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.csdeconv.fa_trace_to_lambdas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"diffusionkurtosismodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel\" title=\"dipy.reconst.dki.DiffusionKurtosisModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a><a class=\"headerlink\" href=\"#diffusionkurtosismodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffusionKurtosisModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>Class for the Diffusion Kurtosis Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion Kurtosis Tensor Model [1]</p>\n<section id=\"id163\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id163\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>gtab<span class=\"classifier\">GradientTable instance</span></dt><dd><p>The gradient table for the data set.</p>\n</dd>\n<dt>fit_method<span class=\"classifier\">str or callable, optional</span></dt><dd><dl>\n<dt>str be one of the following:</dt><dd><p>\u2018OLS\u2019 or \u2018ULLS\u2019 for ordinary least squares.\n\u2018WLS\u2019, \u2018WLLS\u2019 or \u2018UWLLS\u2019 for weighted ordinary least squares.</p>\n<blockquote>\n<div><p>See dki.ls_fit_dki.</p>\n</div></blockquote>\n<p>\u2018CLS\u2019 for LMI constrained ordinary least squares [2].\n\u2018CWLS\u2019 for LMI constrained weighted least squares [2].</p>\n<blockquote>\n<div><p>See dki.cls_fit_dki.</p>\n</div></blockquote>\n</dd>\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id164\"><span class=\"problematic\" id=\"id165\">*</span></a>args, <a href=\"#id166\"><span class=\"problematic\" id=\"id167\">**</span></a>kwargs).</p>\n</dd>\n</dl>\n<p>Default: \u201cWLS\u201d</p>\n</dd>\n<dt>args, kwargs :</dt><dd><p>arguments and key-word arguments passed to the fit_method.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id168\">\n<h4>References<a class=\"headerlink\" href=\"#id168\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id169\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id170\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Dela Haije et al. \u201cEnforcing necessary non-negativity constraints\nfor common diffusion MRI models using sum of squares\nprogramming\u201d. NeuroImage 209, 2020, 116405.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisModel.multi_fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">multi_fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.multi_fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this DKI model class instance given parameters</p>\n<section id=\"id171\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id171\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n</ol>\n<p>2. Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector\n3. Fifteen elements of the kurtosis tensor</p>\n</dd>\n<dt>S0<span class=\"classifier\">float or ndarray (optional)</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"diffusionkurtosisfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit\" title=\"dipy.reconst.dki.DiffusionKurtosisFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit</span></code></a><a class=\"headerlink\" href=\"#diffusionkurtosisfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffusionKurtosisFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit\" title=\"dipy.reconst.dti.TensorFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code></a></p>\n<p>Class for fitting the Diffusion Kurtosis Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a DiffusionKurtosisFit class instance</p>\n<p>Since DKI is an extension of DTI, class instance is defined as subclass\nof the TensorFit from dti.py</p>\n<section id=\"id172\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id172\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>model<span class=\"classifier\">DiffusionKurtosisModel Class instance</span></dt><dd><p>Class instance containing the Diffusion Kurtosis Model for the fit</p>\n</dd>\n<dt>model_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.ak\">\n<span class=\"sig-name descname\"><span class=\"pre\">ak</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">analytical</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.ak\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute axial kurtosis (AK) of a diffusion kurtosis tensor <a href=\"#id1382\"><span class=\"problematic\" id=\"id173\">[1]_</span></a></p>\n<section id=\"id174\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id174\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, axial\nkurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced\nwith -3./7 (theoretical kurtosis limit\nfor regions that consist of water confined to spherical pores <a href=\"#id1383\"><span class=\"problematic\" id=\"id175\">[2]_</span></a>)</p>\n</dd>\n<dt>max_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, axial\nkurtosis values that are larger than <cite>max_kurtosis</cite> are replaced\nwith <cite>max_kurtosis</cite>. Default = 10</p>\n</dd>\n<dt>analytical<span class=\"classifier\">bool (optional)</span></dt><dd><p>If True, AK is calculated from rotated diffusion kurtosis tensor,\notherwise it will be computed from the apparent diffusion kurtosis\nvalues along the principal axis of the diffusion tensor\n(see notes). Default is set to True.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id176\">\n<h4>Returns<a class=\"headerlink\" href=\"#id176\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ak<span class=\"classifier\">array</span></dt><dd><p>Calculated AK.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id177\">\n<h4>Notes<a class=\"headerlink\" href=\"#id177\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>AK is defined as the directional kurtosis parallel to the fiber\u2019s main\ndirection e1 <a href=\"#id1384\"><span class=\"problematic\" id=\"id178\">[1]_</span></a>, <a href=\"#id1385\"><span class=\"problematic\" id=\"id179\">[2]_</span></a>. You can compute AK using to approaches:</p>\n<ol class=\"arabic simple\">\n<li><p>AK is calculated from rotated diffusion kurtosis tensor <a href=\"#id1386\"><span class=\"problematic\" id=\"id180\">[2]_</span></a>, i.e.:</p></li>\n</ol>\n<div class=\"math notranslate nohighlight\">\n\\[AK = \\hat{W}_{1111}\n\\frac{(\\lambda_{1}+\\lambda_{2}+\\lambda_{3})^2}{(9 \\lambda_{1}^2)}\\]</div>\n<ol class=\"arabic simple\" start=\"2\">\n<li><p>AK can be sampled from the principal axis of the diffusion tensor:</p></li>\n</ol>\n<div class=\"math notranslate nohighlight\">\n\\[AK = K(\\mathbf{\\mathbf{e}_1)\\]</div>\n<p>Although both approaches leads to an exact calculation of AK, the\nfirst approach will be referred to as the analytical method while the\nsecond approach will be referred to as the numerical method based on\ntheir analogy to the estimation strategies for MK and RK.</p>\n</section>\n<section id=\"id181\">\n<h4>References<a class=\"headerlink\" href=\"#id181\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id182\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Jensen, J.H., Helpern, J.A., 2010. MRI quantification of\nnon-Gaussian water diffusion by kurtosis analysis. NMR in\nBiomedicine 23(7): 698-710</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id183\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id184\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on\nBiomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.akc\">\n<span class=\"sig-name descname\"><span class=\"pre\">akc</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.akc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the apparent kurtosis coefficient (AKC) in each\ndirection on the sphere for each voxel in the data\n\nParameters\n\u2014\u2014\u2014-\nsphere : Sphere class instance\n\nReturns\n\u2014\u2014-\nakc : ndarray\n   The estimates of the apparent kurtosis coefficient in every\n   direction on the input sphere\n\nNotes\n\u2014\u2013\nFor each sphere direction with coordinates <span class=\"math notranslate nohighlight\">\\((n_{1}, n_{2}, n_{3})\\)</span>, the\ncalculation of AKC is done using formula:\n\n.. math ::\n\n    AKC(n)=frac{MD^{2}}{ADC(n)^{2}}sum_{i=1}^{3}sum_{j=1}^{3}\n    sum_{k=1}^{3}sum_{l=1}^{3}n_{i}n_{j}n_{k}n_{l}W_{ijkl}\n\nwhere <span class=\"math notranslate nohighlight\">\\(W_{ijkl}\\)</span> are the elements of the kurtosis tensor, MD the mean\ndiffusivity and ADC the apparent diffusion coefficient computed as:\n\n.. math ::\n\n    ADC(n)=sum_{i=1}^{3}sum_{j=1}^{3}n_{i}n_{j}D_{ij}\n\nwhere <span class=\"math notranslate nohighlight\">\\(D_{ij}\\)</span> are the elements of the diffusion tensor.</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.kfa\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">kfa</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.kfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the kurtosis tensor (KFA) <a href=\"#id1387\"><span class=\"problematic\" id=\"id185\">[1]_</span></a>\n\nNotes\n\u2014\u2013\nThe KFA is defined as <a href=\"#id1388\"><span class=\"problematic\" id=\"id186\">[1]_</span></a>:\n\n.. math::\n\n     KFA equiv\n     frac{||mathbf{W} - MKT mathbf{I}^{(4)}||_F}{||mathbf{W}||_F}\n\nwhere <span class=\"math notranslate nohighlight\">\\(W\\)</span> is the kurtosis tensor, MKT the kurtosis tensor mean, <span class=\"math notranslate nohighlight\">\\(I^(4)\\)</span>\nis the fully symmetric rank 2 isotropic tensor and <span class=\"math notranslate nohighlight\">\\(||...||_F\\)</span> is the\ntensor\u2019s Frobenius norm <a href=\"#id1389\"><span class=\"problematic\" id=\"id187\">[1]_</span></a>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Glenn, G. R., Helpern, J. A., Tabesh, A., and Jensen, J. H.\n       (2015). Quantitative assessment of diffusional kurtosis\n       anisotropy. NMR in Biomedicine 28, 448\u2013459. doi:10.1002/nbm.3271</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.kmax\">\n<span class=\"sig-name descname\"><span class=\"pre\">kmax</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'repulsion100'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.kmax\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the maximum value of a single voxel kurtosis tensor</p>\n<section id=\"id188\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id188\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere class instance, optional</span></dt><dd><p>The sphere providing sample directions for the initial search of\nthe maximum value of kurtosis.</p>\n</dd>\n<dt>gtol<span class=\"classifier\">float, optional</span></dt><dd><p>This input is to refine kurtosis maximum under the precision of the\ndirections sampled on the sphere class instance. The gradient of\nthe convergence procedure must be less than gtol before successful\ntermination. If gtol is None, fiber direction is directly taken\nfrom the initial sampled directions of the given sphere object</p>\n</dd>\n</dl>\n</section>\n<section id=\"id189\">\n<h4>Returns<a class=\"headerlink\" href=\"#id189\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>max_value<span class=\"classifier\">float</span></dt><dd><p>kurtosis tensor maximum value</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.kt\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">kt</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.kt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the 15 independent elements of the kurtosis tensor as an array</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.mk\">\n<span class=\"sig-name descname\"><span class=\"pre\">mk</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">analytical</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.mk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute mean kurtosis (MK) from the kurtosis tensor\n\nParameters\n\u2014\u2014\u2014-\nmin_kurtosis : float (optional)\n    To keep kurtosis values within a plausible biophysical range, mean\n    kurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced\n    with <cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis limit\n    for regions that consist of water confined to spherical pores <a href=\"#id1390\"><span class=\"problematic\" id=\"id190\">[4]_</span></a>)\nmax_kurtosis : float (optional)\n    To keep kurtosis values within a plausible biophysical range, mean\n    kurtosis values that are larger than <cite>max_kurtosis</cite> are replaced\n    with <cite>max_kurtosis</cite>. Default = 10\nanalytical : bool (optional)\n    If True, MK is calculated using its analytical solution, otherwise\n    an exact numerical estimator is used (see Notes). Default is set to\n    True.\n\nReturns\n\u2014\u2014-\nmk : array\n    Calculated MK.\n\nNotes\n\u2014\u2013\nThe MK is defined as the average of directional kurtosis coefficients\nacross all spatial directions, which can be formulated by the following\nsurface integral[1]_:\n\n.. math::\n\n     MK equiv frac{1}{4pi} int dOmega_mathbf{n} K(mathbf{n})\n\nThis integral can be numerically solved by averaging directional\nkurtosis values sampled for directions of a spherical t-design <a href=\"#id1391\"><span class=\"problematic\" id=\"id191\">[2]_</span></a>.\n\nAlternatively, MK can be solved from the analytical solution derived by\nTabesh et al. <a href=\"#id1392\"><span class=\"problematic\" id=\"id192\">[3]_</span></a>. This solution is given by:\n\n.. math::\n\n    MK=F_1(lambda_1,lambda_2,lambda_3)hat{W}_{1111}+\n       F_1(lambda_2,lambda_1,lambda_3)hat{W}_{2222}+\n       F_1(lambda_3,lambda_2,lambda_1)hat{W}_{3333}+ \\\n       F_2(lambda_1,lambda_2,lambda_3)hat{W}_{2233}+\n       F_2(lambda_2,lambda_1,lambda_3)hat{W}_{1133}+\n       F_2(lambda_3,lambda_2,lambda_1)hat{W}_{1122}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\hat{W}_{ijkl}\\)</span> are the components of the <span class=\"math notranslate nohighlight\">\\(W\\)</span> tensor in the\ncoordinates system defined by the eigenvectors of the diffusion tensor\n<span class=\"math notranslate nohighlight\">\\(\\mathbf{D}\\)</span> and\n\n.. math::\n\n    F_1(lambda_1,lambda_2,lambda_3)=\n    frac{(lambda_1+lambda_2+lambda_3)^2}\n    {18(lambda_1-lambda_2)(lambda_1-lambda_3)}\n    [frac{sqrt{lambda_2lambda_3}}{lambda_1}\n    R_F(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)+\\\n    frac{3lambda_1^2-lambda_1lambda_2-lambda_2lambda_3-\n    lambda_1lambda_3}\n    {3lambda_1 sqrt{lambda_2 lambda_3}}\n    R_D(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)-1 ]\n\n    F_2(lambda_1,lambda_2,lambda_3)=\n    frac{(lambda_1+lambda_2+lambda_3)^2}\n    {3(lambda_2-lambda_3)^2}\n    [frac{lambda_2+lambda_3}{sqrt{lambda_2lambda_3}}\n    R_F(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)+\\\n    frac{2lambda_1-lambda_2-lambda_3}{3sqrt{lambda_2 lambda_3}}\n    R_D(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)-2]\n\nwhere <span class=\"math notranslate nohighlight\">\\(R_f\\)</span> and <span class=\"math notranslate nohighlight\">\\(R_d\\)</span> are the Carlson\u2019s elliptic integrals.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Jensen, J.H., Helpern, J.A., 2010. MRI quantification of\n       non-Gaussian water diffusion by kurtosis analysis. NMR in\n       Biomedicine 23(7): 698-710\n.. [2] Hardin, R.H., Sloane, N.J.A., 1996. McLaren\u2019s Improved Snub Cube\n       and Other New Spherical Designs in Three Dimensions. Discrete\n       and Computational Geometry 15, 429-441.\n.. [3] Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\n       Estimation of tensors and tensor-derived measures in diffusional\n       kurtosis imaging. Magn Reson Med. 65(3), 823-836\n.. [4] Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\n       Robust estimation from DW-MRI using homogeneous polynomials.\n       Proceedings of the 8th {IEEE} International Symposium on\n       Biomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\n       doi: 10.1109/ISBI.2011.5872402</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.mkt\">\n<span class=\"sig-name descname\"><span class=\"pre\">mkt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.mkt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute mean of the kurtosis tensor (MKT) <a href=\"#id1393\"><span class=\"problematic\" id=\"id193\">[1]_</span></a></p>\n<section id=\"id194\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id194\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, mean\nkurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced\nwith <cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis limit\nfor regions that consist of water confined to spherical pores <a href=\"#id1394\"><span class=\"problematic\" id=\"id195\">[2]_</span></a>)</p>\n</dd>\n<dt>max_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, mean\nkurtosis values that are larger than <cite>max_kurtosis</cite> are replaced\nwith <cite>max_kurtosis</cite>. Default = 10</p>\n</dd>\n</dl>\n</section>\n<section id=\"id196\">\n<h4>Returns<a class=\"headerlink\" href=\"#id196\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mkt<span class=\"classifier\">array</span></dt><dd><p>Calculated mean kurtosis tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id197\">\n<h4>Notes<a class=\"headerlink\" href=\"#id197\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The MKT is defined as <a href=\"#id1395\"><span class=\"problematic\" id=\"id198\">[1]_</span></a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[MKT \\equiv \\frac{1}{4\\pi} \\int d\n\\Omega_{\\mathnbf{n}} n_i n_j n_k n_l W_{ijkl}\\]</div>\n<p>which can be directly computed from the trace of the kurtosis tensor:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<p>MKT = frac{1}{5} Tr(mathbf{W}) = frac{1}{5}\n(W_{1111} + W_{2222} + W_{3333} + 2W_{1122} + 2W_{1133} + 2W_{2233})</p>\n</section>\n<section id=\"id199\">\n<h4>References<a class=\"headerlink\" href=\"#id199\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id200\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Hansen, B., Lund, T. E., Sangill, R., and Jespersen, S. N. 2013.\nExperimentally and computationally fast method for estimation\nof a mean kurtosis. Magnetic Resonance in Medicine69, 1754\u20131760.\n388. doi:10.1002/mrm.24743</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id201\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on\nBiomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a DKI model fit, predict the signal on the vertices of a\ngradient table\n\nParameters\n\u2014\u2014\u2014-\ngtab : a GradientTable class instance\n    The gradient table for this prediction\n\nS0 : float or ndarray (optional)\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n\n.. math::\n\n    S(n,b)=S_{0}e^{-bD(n)+frac{1}{6}b^{2}D(n)^{2}K(n)}\n\n<span class=\"math notranslate nohighlight\">\\(\\mathbf{D(n)}\\)</span> and <span class=\"math notranslate nohighlight\">\\(\\mathbf{K(n)}\\)</span> can be computed from the DT and KT\nusing the following equations:\n\n.. math::\n\n    D(n)=sum_{i=1}^{3}sum_{j=1}^{3}n_{i}n_{j}D_{ij}\n\nand\n\n.. math::\n\n    K(n)=frac{MD^{2}}{D(n)^{2}}sum_{i=1}^{3}sum_{j=1}^{3}\n    sum_{k=1}^{3}sum_{l=1}^{3}n_{i}n_{j}n_{k}n_{l}W_{ijkl}\n\nwhere <span class=\"math notranslate nohighlight\">\\(D_{ij}\\)</span> and <span class=\"math notranslate nohighlight\">\\(W_{ijkl}\\)</span> are the elements of the second-order DT\nand the fourth-order KT tensors, respectively, and <span class=\"math notranslate nohighlight\">\\(MD\\)</span> is the mean\ndiffusivity.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.DiffusionKurtosisFit.rk\">\n<span class=\"sig-name descname\"><span class=\"pre\">rk</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">analytical</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.rk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute radial kurtosis (RK) of a diffusion kurtosis tensor <a href=\"#id1396\"><span class=\"problematic\" id=\"id202\">[1]_</span></a></p>\n<section id=\"id203\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id203\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range,\nradial kurtosis values that are smaller than <cite>min_kurtosis</cite> are\nreplaced with <cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis\nlimit for regions that consist of water confined to spherical pores\n<a href=\"#id1397\"><span class=\"problematic\" id=\"id204\">[3]_</span></a>)</p>\n</dd>\n<dt>max_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range,\nradial kurtosis values that are larger than <cite>max_kurtosis</cite> are\nreplaced with <cite>max_kurtosis</cite>. Default = 10</p>\n</dd>\n<dt>analytical<span class=\"classifier\">bool (optional)</span></dt><dd><p>If True, RK is calculated using its analytical solution, otherwise\nan exact numerical estimator is used (see Notes). Default is set to\nTrue</p>\n</dd>\n</dl>\n</section>\n<section id=\"id205\">\n<h4>Returns<a class=\"headerlink\" href=\"#id205\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rk<span class=\"classifier\">array</span></dt><dd><p>Calculated RK.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id206\">\n<h4>Notes<a class=\"headerlink\" href=\"#id206\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>RK is defined as the average of the directional kurtosis perpendicular\nto the fiber\u2019s main direction e1 <a href=\"#id1398\"><span class=\"problematic\" id=\"id207\">[1]_</span></a>, <a href=\"#id1399\"><span class=\"problematic\" id=\"id208\">[2]_</span></a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<dl class=\"simple\">\n<dt>RK equiv frac{1}{2pi} int dOmega _mathbf{theta}</dt><dd><p>K(mathbf{theta}) delta (mathbf{theta}cdot mathbf{e}_1)</p>\n</dd>\n</dl>\n<p>This equation can be numerically computed by averaging apparent\ndirectional kurtosis samples for directions perpendicular to e1.</p>\n<p>Otherwise, RK can be calculated from its analytical solution <a href=\"#id1400\"><span class=\"problematic\" id=\"id209\">[2]_</span></a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[K_{\\bot} = G_1(\\lambda_1,\\lambda_2,\\lambda_3)\\hat{W}_{2222} +\n           G_1(\\lambda_1,\\lambda_3,\\lambda_2)\\hat{W}_{3333} +\n           G_2(\\lambda_1,\\lambda_2,\\lambda_3)\\hat{W}_{2233}\\]</div>\n<p>where:</p>\n<div class=\"math notranslate nohighlight\">\n\\[G_1(\\lambda_1,\\lambda_2,\\lambda_3)=\n\\frac{(\\lambda_1+\\lambda_2+\\lambda_3)^2}{18\\lambda_2(\\lambda_2-\n\\lambda_3)} \\left (2\\lambda_2 +\n\\frac{\\lambda_3^2-3\\lambda_2\\lambda_3}{\\sqrt{\\lambda_2\\lambda_3}}\n\\right)\\]</div>\n<p>and</p>\n<div class=\"math notranslate nohighlight\">\n\\[ G_2(\\lambda_1,\\lambda_2,\\lambda_3)=\n\\frac{(\\lambda_1+\\lambda_2+\\lambda_3)^2}{(\\lambda_2-\\lambda_3)^2}\n\\left ( \\frac{\\lambda_2+\\lambda_3}{\\sqrt{\\lambda_2\\lambda_3}}-\n2\\right )\\]</div>\n</section>\n<section id=\"id210\">\n<h4>References<a class=\"headerlink\" href=\"#id210\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id211\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Jensen, J.H., Helpern, J.A., 2010. MRI quantification of\nnon-Gaussian water diffusion by kurtosis analysis. NMR in\nBiomedicine 23(7): 698-710</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id212\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id213\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on\nBiomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"carlson-rf\">\n<h3>carlson_rf<a class=\"headerlink\" href=\"#carlson-rf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.carlson_rf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">carlson_rf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">z</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">errtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0003</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.carlson_rf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the Carlson\u2019s incomplete elliptic integral of the first kind</p>\n<p>Carlson\u2019s incomplete elliptic integral of the first kind is defined as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[R_F = \\frac{1}{2} \\int_{0}^{\\infty} \\left [(t+x)(t+y)(t+z)  \\right ]\n^{-\\frac{1}{2}}dt\\]</div>\n<section id=\"id214\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id214\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x<span class=\"classifier\">ndarray</span></dt><dd><p>First independent variable of the integral.</p>\n</dd>\n<dt>y<span class=\"classifier\">ndarray</span></dt><dd><p>Second independent variable of the integral.</p>\n</dd>\n<dt>z<span class=\"classifier\">ndarray</span></dt><dd><p>Third independent variable of the integral.</p>\n</dd>\n<dt>errtol<span class=\"classifier\">float</span></dt><dd><p>Error tolerance. Integral is computed with relative error less in\nmagnitude than the defined value</p>\n</dd>\n</dl>\n</section>\n<section id=\"id215\">\n<h4>Returns<a class=\"headerlink\" href=\"#id215\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>RF<span class=\"classifier\">ndarray</span></dt><dd><p>Value of the incomplete first order elliptic integral</p>\n</dd>\n</dl>\n</section>\n<section id=\"id216\">\n<h4>Notes<a class=\"headerlink\" href=\"#id216\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>x, y, and z have to be nonnegative and at most one of them is zero.</p>\n</section>\n<section id=\"id217\">\n<h4>References<a class=\"headerlink\" href=\"#id217\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id218\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Carlson, B.C., 1994. Numerical computation of real or complex\nelliptic integrals. arXiv:math/9409227 [math.CA]</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"carlson-rd\">\n<h3>carlson_rd<a class=\"headerlink\" href=\"#carlson-rd\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.carlson_rd\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">carlson_rd</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">z</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">errtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0001</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.carlson_rd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the Carlson\u2019s incomplete elliptic integral of the second kind</p>\n<p>Carlson\u2019s incomplete elliptic integral of the second kind is defined as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[R_D = \\frac{3}{2} \\int_{0}^{\\infty} (t+x)^{-\\frac{1}{2}}\n(t+y)^{-\\frac{1}{2}}(t+z)  ^{-\\frac{3}{2}}\\]</div>\n<section id=\"id219\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id219\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x<span class=\"classifier\">ndarray</span></dt><dd><p>First independent variable of the integral.</p>\n</dd>\n<dt>y<span class=\"classifier\">ndarray</span></dt><dd><p>Second independent variable of the integral.</p>\n</dd>\n<dt>z<span class=\"classifier\">ndarray</span></dt><dd><p>Third independent variable of the integral.</p>\n</dd>\n<dt>errtol<span class=\"classifier\">float</span></dt><dd><p>Error tolerance. Integral is computed with relative error less in\nmagnitude than the defined value</p>\n</dd>\n</dl>\n</section>\n<section id=\"id220\">\n<h4>Returns<a class=\"headerlink\" href=\"#id220\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>RD<span class=\"classifier\">ndarray</span></dt><dd><p>Value of the incomplete second order elliptic integral</p>\n</dd>\n</dl>\n</section>\n<section id=\"id221\">\n<h4>Notes<a class=\"headerlink\" href=\"#id221\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>x, y, and z have to be nonnegative and at most x or y is zero.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"directional-diffusion\">\n<h3>directional_diffusion<a class=\"headerlink\" href=\"#directional-diffusion\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.directional_diffusion\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">directional_diffusion</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.directional_diffusion\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the apparent diffusion coefficient (adc) in each direction of\na sphere for a single voxel <a href=\"#id1401\"><span class=\"problematic\" id=\"id222\">[1]_</span></a></p>\n<section id=\"id223\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id223\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dt<span class=\"classifier\">array (6,)</span></dt><dd><p>elements of the diffusion tensor of the voxel.</p>\n</dd>\n<dt>V<span class=\"classifier\">array (g, 3)</span></dt><dd><p>g directions of a Sphere in Cartesian coordinates</p>\n</dd>\n<dt>min_diffusivity<span class=\"classifier\">float (optional)</span></dt><dd><p>Because negative eigenvalues are not physical and small eigenvalues\ncause quite a lot of noise in diffusion-based metrics, diffusivity\nvalues smaller than <cite>min_diffusivity</cite> are replaced with\n<cite>min_diffusivity</cite>. Default = 0</p>\n</dd>\n</dl>\n</section>\n<section id=\"id224\">\n<h4>Returns<a class=\"headerlink\" href=\"#id224\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>adc<span class=\"classifier\">ndarray (g,)</span></dt><dd><p>Apparent diffusion coefficient (adc) in all g directions of a sphere\nfor a single voxel.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id225\">\n<h4>References<a class=\"headerlink\" href=\"#id225\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id226\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Correia MM, Nunes RG, Ferreira HA (2015).\nExploring the 3D geometry of the diffusion kurtosis tensor -\nImpact on the development of robust tractography procedures and\nnovel biomarkers, NeuroImage 111: 85-99</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"directional-diffusion-variance\">\n<h3>directional_diffusion_variance<a class=\"headerlink\" href=\"#directional-diffusion-variance\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.directional_diffusion_variance\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">directional_diffusion_variance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.directional_diffusion_variance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the apparent diffusion variance (adv) in each direction of a\nsphere for a single voxel <a href=\"#id1402\"><span class=\"problematic\" id=\"id227\">[1]_</span></a></p>\n<section id=\"id228\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id228\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dt<span class=\"classifier\">array (6,)</span></dt><dd><p>elements of the diffusion tensor of the voxel.</p>\n</dd>\n<dt>kt<span class=\"classifier\">array (15,)</span></dt><dd><p>elements of the kurtosis tensor of the voxel.</p>\n</dd>\n<dt>V<span class=\"classifier\">array (g, 3)</span></dt><dd><p>g directions of a Sphere in Cartesian coordinates</p>\n</dd>\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>Because high-amplitude negative values of kurtosis are not physically\nand biologicaly pluasible, and these cause artefacts in\nkurtosis-based measures, directional kurtosis values smaller than\n<cite>min_kurtosis</cite> are replaced with <cite>min_kurtosis</cite>. Default = -3./7\n(theoretical kurtosis limit for regions that consist of water confined\nto spherical pores <a href=\"#id1403\"><span class=\"problematic\" id=\"id229\">[2]_</span></a>)</p>\n</dd>\n<dt>adc<span class=\"classifier\">ndarray(g,) (optional)</span></dt><dd><p>Apparent diffusion coefficient (adc) in all g directions of a sphere\nfor a single voxel.</p>\n</dd>\n<dt>adv<span class=\"classifier\">ndarray(g,) (optional)</span></dt><dd><p>Apparent diffusion variance coefficient (advc) in all g directions of\na sphere for a single voxel.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id230\">\n<h4>Returns<a class=\"headerlink\" href=\"#id230\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>adv<span class=\"classifier\">ndarray (g,)</span></dt><dd><p>Apparent diffusion variance (adv) in all g directions of a sphere for\na single voxel.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id231\">\n<h4>References<a class=\"headerlink\" href=\"#id231\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id232\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Correia MM, Nunes RG, Ferreira HA (2015).\nExploring the 3D geometry of the diffusion kurtosis tensor -\nImpact on the development of robust tractography procedures and\nnovel biomarkers, NeuroImage 111: 85-99</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"directional-kurtosis\">\n<h3>directional_kurtosis<a class=\"headerlink\" href=\"#directional-kurtosis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.directional_kurtosis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">directional_kurtosis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">md</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">adc</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">adv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.directional_kurtosis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the apparent kurtosis coefficient (akc) in each direction of\na sphere for a single voxel <a href=\"#id1404\"><span class=\"problematic\" id=\"id233\">[1]_</span></a></p>\n<section id=\"id234\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id234\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dt<span class=\"classifier\">array (6,)</span></dt><dd><p>elements of the diffusion tensor of the voxel.</p>\n</dd>\n<dt>md<span class=\"classifier\">float</span></dt><dd><p>mean diffusivity of the voxel</p>\n</dd>\n<dt>kt<span class=\"classifier\">array (15,)</span></dt><dd><p>elements of the kurtosis tensor of the voxel.</p>\n</dd>\n<dt>V<span class=\"classifier\">array (g, 3)</span></dt><dd><p>g directions of a Sphere in Cartesian coordinates</p>\n</dd>\n<dt>min_diffusivity<span class=\"classifier\">float (optional)</span></dt><dd><p>Because negative eigenvalues are not physical and small eigenvalues\ncause quite a lot of noise in diffusion-based metrics, diffusivity\nvalues smaller than <cite>min_diffusivity</cite> are replaced with\n<cite>min_diffusivity</cite>. Default = 0</p>\n</dd>\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>Because high-amplitude negative values of kurtosis are not physically\nand biologicaly pluasible, and these cause artefacts in\nkurtosis-based measures, directional kurtosis values smaller than\n<cite>min_kurtosis</cite> are replaced with <cite>min_kurtosis</cite>. Default = -3./7\n(theoretical kurtosis limit for regions that consist of water confined\nto spherical pores <a href=\"#id1405\"><span class=\"problematic\" id=\"id235\">[2]_</span></a>)</p>\n</dd>\n<dt>adc<span class=\"classifier\">ndarray(g,) (optional)</span></dt><dd><p>Apparent diffusion coefficient (adc) in all g directions of a sphere\nfor a single voxel.</p>\n</dd>\n<dt>adv<span class=\"classifier\">ndarray(g,) (optional)</span></dt><dd><p>Apparent diffusion variance (advc) in all g directions of a sphere for\na single voxel.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id236\">\n<h4>Returns<a class=\"headerlink\" href=\"#id236\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>akc<span class=\"classifier\">ndarray (g,)</span></dt><dd><p>Apparent kurtosis coefficient (AKC) in all g directions of a sphere for\na single voxel.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id237\">\n<h4>References<a class=\"headerlink\" href=\"#id237\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id238\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Correia MM, Nunes RG, Ferreira HA (2015).\nExploring the 3D geometry of the diffusion kurtosis tensor -\nImpact on the development of robust tractography procedures and\nnovel biomarkers, NeuroImage 111: 85-99</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id239\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on\nBiomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"apparent-kurtosis-coef\">\n<h3>apparent_kurtosis_coef<a class=\"headerlink\" href=\"#apparent-kurtosis-coef\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.apparent_kurtosis_coef\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">apparent_kurtosis_coef</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.apparent_kurtosis_coef\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the apparent kurtosis coefficient (AKC) in each direction\nof a sphere <a href=\"#id1406\"><span class=\"problematic\" id=\"id240\">[1]_</span></a>\n\nParameters\n\u2014\u2014\u2014-\ndki_params : ndarray (x, y, z, 27) or (n, 27)\n    All parameters estimated from the diffusion kurtosis model.\n    Parameters are ordered as follows:\n        1) Three diffusion tensor\u2019s eigenvalues\n        2) Three lines of the eigenvector matrix each containing the first,\n           second and third coordinates of the eigenvectors respectively\n        3) Fifteen elements of the kurtosis tensor\nsphere : a Sphere class instance\n    The AKC will be calculated for each of the vertices in the sphere\nmin_diffusivity : float (optional)\n    Because negative eigenvalues are not physical and small eigenvalues\n    cause quite a lot of noise in diffusion-based metrics, diffusivity\n    values smaller than <cite>min_diffusivity</cite> are replaced with\n    <cite>min_diffusivity</cite>. Default = 0\nmin_kurtosis : float (optional)\n    Because high-amplitude negative values of kurtosis are not physically\n    and biologicaly pluasible, and these cause artefacts in\n    kurtosis-based measures, directional kurtosis values smaller than\n    <cite>min_kurtosis</cite> are replaced with <cite>min_kurtosis</cite>. Default = -3./7\n    (theoretical kurtosis limit for regions that consist of water confined\n    to spherical pores <a href=\"#id1407\"><span class=\"problematic\" id=\"id241\">[2]_</span></a>)\n\nReturns\n\u2014\u2014-\nakc : ndarray (x, y, z, g) or (n, g)\n    Apparent kurtosis coefficient (AKC) for all g directions of a sphere.\n\nNotes\n\u2014\u2013\nFor each sphere direction with coordinates <span class=\"math notranslate nohighlight\">\\((n_{1}, n_{2}, n_{3})\\)</span>, the\ncalculation of AKC is done using formula <a href=\"#id1408\"><span class=\"problematic\" id=\"id242\">[1]_</span></a>:\n\n.. math ::\n\n    AKC(n)=frac{MD^{2}}{ADC(n)^{2}}sum_{i=1}^{3}sum_{j=1}^{3}\n    sum_{k=1}^{3}sum_{l=1}^{3}n_{i}n_{j}n_{k}n_{l}W_{ijkl}\n\nwhere <span class=\"math notranslate nohighlight\">\\(W_{ijkl}\\)</span> are the elements of the kurtosis tensor, MD the mean\ndiffusivity and ADC the apparent diffusion coefficient computed as:\n\n.. math ::\n\n    ADC(n)=sum_{i=1}^{3}sum_{j=1}^{3}n_{i}n_{j}D_{ij}\n\nwhere <span class=\"math notranslate nohighlight\">\\(D_{ij}\\)</span> are the elements of the diffusion tensor.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Neto Henriques R, Correia MM, Nunes RG, Ferreira HA (2015).\n       Exploring the 3D geometry of the diffusion kurtosis tensor -\n       Impact on the development of robust tractography procedures and\n       novel biomarkers, NeuroImage 111: 85-99\n.. [2] Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\n       Robust estimation from DW-MRI using homogeneous polynomials.\n       Proceedings of the 8th {IEEE} International Symposium on\n       Biomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\n       doi: 10.1109/ISBI.2011.5872402</p>\n</dd></dl>\n\n</section>\n<section id=\"mean-kurtosis\">\n<h3>mean_kurtosis<a class=\"headerlink\" href=\"#mean-kurtosis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.mean_kurtosis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mean_kurtosis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">3</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">analytical</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.mean_kurtosis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute mean kurtosis (MK) from the kurtosis tensor\n\nParameters\n\u2014\u2014\u2014-\ndki_params : ndarray (x, y, z, 27) or (n, 27)\n    All parameters estimated from the diffusion kurtosis model.\n    Parameters are ordered as follows:\n        1) Three diffusion tensor\u2019s eigenvalues\n        2) Three lines of the eigenvector matrix each containing the first,\n           second and third coordinates of the eigenvector\n        3) Fifteen elements of the kurtosis tensor\nmin_kurtosis : float (optional)\n    To keep kurtosis values within a plausible biophysical range, mean\n    kurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced with\n    <cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis limit for regions\n    that consist of water confined to spherical pores <a href=\"#id1409\"><span class=\"problematic\" id=\"id243\">[4]_</span></a>)\nmax_kurtosis : float (optional)\n    To keep kurtosis values within a plausible biophysical range, mean\n    kurtosis values that are larger than <cite>max_kurtosis</cite> are replaced with\n    <cite>max_kurtosis</cite>. Default = 10\nanalytical : bool (optional)\n    If True, MK is calculated using its analytical solution, otherwise an\n    exact numerical estimator is used (see Notes). Default is set to True\n\nReturns\n\u2014\u2014-\nmk : array\n    Calculated MK.\n\nNotes\n\u2014\u2013\nThe MK is defined as the average of directional kurtosis coefficients\nacross all spatial directions, which can be formulated by the following\nsurface integral[1]_:\n\n.. math::\n\n     MK equiv frac{1}{4pi} int dOmega_mathbf{n} K(mathbf{n})\n\nThis integral can be numerically solved by averaging directional\nkurtosis values sampled for directions of a spherical t-design <a href=\"#id1410\"><span class=\"problematic\" id=\"id244\">[2]_</span></a>.\n\nAlternatively, MK can be solved from the analytical solution derived by\nTabesh et al. <a href=\"#id1411\"><span class=\"problematic\" id=\"id245\">[3]_</span></a>. This solution is given by:\n\n.. math::\n\n    MK=F_1(lambda_1,lambda_2,lambda_3)hat{W}_{1111}+\n       F_1(lambda_2,lambda_1,lambda_3)hat{W}_{2222}+\n       F_1(lambda_3,lambda_2,lambda_1)hat{W}_{3333}+ \\\n       F_2(lambda_1,lambda_2,lambda_3)hat{W}_{2233}+\n       F_2(lambda_2,lambda_1,lambda_3)hat{W}_{1133}+\n       F_2(lambda_3,lambda_2,lambda_1)hat{W}_{1122}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\hat{W}_{ijkl}\\)</span> are the components of the <span class=\"math notranslate nohighlight\">\\(W\\)</span> tensor in the\ncoordinates system defined by the eigenvectors of the diffusion tensor\n<span class=\"math notranslate nohighlight\">\\(\\mathbf{D}\\)</span> and\n\n.. math::\n\n    F_1(lambda_1,lambda_2,lambda_3)=\n    frac{(lambda_1+lambda_2+lambda_3)^2}\n    {18(lambda_1-lambda_2)(lambda_1-lambda_3)}\n    [frac{sqrt{lambda_2lambda_3}}{lambda_1}\n    R_F(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)+\\\n    frac{3lambda_1^2-lambda_1lambda_2-lambda_2lambda_3-\n    lambda_1lambda_3}\n    {3lambda_1 sqrt{lambda_2 lambda_3}}\n    R_D(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)-1 ]\n\n    F_2(lambda_1,lambda_2,lambda_3)=\n    frac{(lambda_1+lambda_2+lambda_3)^2}\n    {3(lambda_2-lambda_3)^2}\n    [frac{lambda_2+lambda_3}{sqrt{lambda_2lambda_3}}\n    R_F(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)+\\\n    frac{2lambda_1-lambda_2-lambda_3}{3sqrt{lambda_2 lambda_3}}\n    R_D(frac{lambda_1}{lambda_2},frac{lambda_1}{lambda_3},1)-2]\n\nwhere <span class=\"math notranslate nohighlight\">\\(R_f\\)</span> and <span class=\"math notranslate nohighlight\">\\(R_d\\)</span> are the Carlson\u2019s elliptic integrals.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Jensen, J.H., Helpern, J.A., 2010. MRI quantification of\n       non-Gaussian water diffusion by kurtosis analysis. NMR in\n       Biomedicine 23(7): 698-710\n.. [2] Hardin, R.H., Sloane, N.J.A., 1996. McLaren\u2019s Improved Snub Cube and\n       Other New Spherical Designs in Three Dimensions. Discrete and\n       Computational Geometry 15, 429-441.\n.. [3] Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\n       Estimation of tensors and tensor-derived measures in diffusional\n       kurtosis imaging. Magn Reson Med. 65(3), 823-836\n.. [4] Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\n       Robust estimation from DW-MRI using homogeneous polynomials.\n       Proceedings of the 8th {IEEE} International Symposium on\n       Biomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\n       doi: 10.1109/ISBI.2011.5872402</p>\n</dd></dl>\n\n</section>\n<section id=\"radial-kurtosis\">\n<h3>radial_kurtosis<a class=\"headerlink\" href=\"#radial-kurtosis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.radial_kurtosis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">radial_kurtosis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">analytical</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.radial_kurtosis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute radial kurtosis (RK) of a diffusion kurtosis tensor <a href=\"#id1412\"><span class=\"problematic\" id=\"id246\">[1]_</span></a>, <a href=\"#id1413\"><span class=\"problematic\" id=\"id247\">[2]_</span></a></p>\n<section id=\"id248\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id248\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, radial\nkurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced with\n<cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis limit for regions\nthat consist of water confined to spherical pores <a href=\"#id1414\"><span class=\"problematic\" id=\"id249\">[3]_</span></a>)</p>\n</dd>\n<dt>max_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, radial\nkurtosis values that are larger than <cite>max_kurtosis</cite> are replaced with\n<cite>max_kurtosis</cite>. Default = 10</p>\n</dd>\n<dt>analytical<span class=\"classifier\">bool (optional)</span></dt><dd><p>If True, RK is calculated using its analytical solution, otherwise an\nexact numerical estimator is used (see Notes). Default is set to True.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id250\">\n<h4>Returns<a class=\"headerlink\" href=\"#id250\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rk<span class=\"classifier\">array</span></dt><dd><p>Calculated RK.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id251\">\n<h4>Notes<a class=\"headerlink\" href=\"#id251\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>RK is defined as the average of the directional kurtosis perpendicular\nto the fiber\u2019s main direction e1 <a href=\"#id1415\"><span class=\"problematic\" id=\"id252\">[1]_</span></a>, <a href=\"#id1416\"><span class=\"problematic\" id=\"id253\">[2]_</span></a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<dl class=\"simple\">\n<dt>RK equiv frac{1}{2pi} int dOmega _mathbf{theta} K(mathbf{theta})</dt><dd><p>delta (mathbf{theta}cdot mathbf{e}_1)</p>\n</dd>\n</dl>\n<p>This equation can be numerically computed by averaging apparent\ndirectional kurtosis samples for directions perpendicular to e1.</p>\n<p>Otherwise, RK can be calculated from its analytical solution <a href=\"#id1417\"><span class=\"problematic\" id=\"id254\">[2]_</span></a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[K_{\\bot} = G_1(\\lambda_1,\\lambda_2,\\lambda_3)\\hat{W}_{2222} +\n           G_1(\\lambda_1,\\lambda_3,\\lambda_2)\\hat{W}_{3333} +\n           G_2(\\lambda_1,\\lambda_2,\\lambda_3)\\hat{W}_{2233}\\]</div>\n<p>where:</p>\n<div class=\"math notranslate nohighlight\">\n\\[G_1(\\lambda_1,\\lambda_2,\\lambda_3)=\n\\frac{(\\lambda_1+\\lambda_2+\\lambda_3)^2}{18\\lambda_2(\\lambda_2-\n\\lambda_3)} \\left (2\\lambda_2 +\n\\frac{\\lambda_3^2-3\\lambda_2\\lambda_3}{\\sqrt{\\lambda_2\\lambda_3}}\n\\right)\\]</div>\n<p>and</p>\n<div class=\"math notranslate nohighlight\">\n\\[G_2(\\lambda_1,\\lambda_2,\\lambda_3)=\n\\frac{(\\lambda_1+\\lambda_2+\\lambda_3)^2}{(\\lambda_2-\\lambda_3)^2}\n\\left ( \\frac{\\lambda_2+\\lambda_3}{\\sqrt{\\lambda_2\\lambda_3}}-2\\right )\\]</div>\n</section>\n<section id=\"id255\">\n<h4>References<a class=\"headerlink\" href=\"#id255\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id256\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Jensen, J.H., Helpern, J.A., 2010. MRI quantification of\nnon-Gaussian water diffusion by kurtosis analysis. NMR in\nBiomedicine 23(7): 698-710</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id257\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id258\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on Biomedical\nImaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"axial-kurtosis\">\n<h3>axial_kurtosis<a class=\"headerlink\" href=\"#axial-kurtosis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.axial_kurtosis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">axial_kurtosis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">analytical</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.axial_kurtosis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute axial kurtosis (AK) from the kurtosis tensor <a href=\"#id1418\"><span class=\"problematic\" id=\"id259\">[1]_</span></a>, <a href=\"#id1419\"><span class=\"problematic\" id=\"id260\">[2]_</span></a></p>\n<section id=\"id261\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id261\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, axial\nkurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced with\n<cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis limit for regions\nthat consist of water confined to spherical pores <a href=\"#id1420\"><span class=\"problematic\" id=\"id262\">[3]_</span></a>)</p>\n</dd>\n<dt>max_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, axial\nkurtosis values that are larger than <cite>max_kurtosis</cite> are replaced with\n<cite>max_kurtosis</cite>. Default = 10</p>\n</dd>\n<dt>analytical<span class=\"classifier\">bool (optional)</span></dt><dd><p>If True, AK is calculated from rotated diffusion kurtosis tensor,\notherwise it will be computed from the apparent diffusion kurtosis\nvalues along the principal axis of the diffusion tensor (see notes).\nDefault is set to True.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id263\">\n<h4>Returns<a class=\"headerlink\" href=\"#id263\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ak<span class=\"classifier\">array</span></dt><dd><p>Calculated AK.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id264\">\n<h4>Notes<a class=\"headerlink\" href=\"#id264\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>AK is defined as the directional kurtosis parallel to the fiber\u2019s main\ndirection e1 <a href=\"#id1421\"><span class=\"problematic\" id=\"id265\">[1]_</span></a>, <a href=\"#id1422\"><span class=\"problematic\" id=\"id266\">[2]_</span></a>. You can compute AK using to approaches:</p>\n<ol class=\"arabic simple\">\n<li><p>AK is calculated from rotated diffusion kurtosis tensor <a href=\"#id1423\"><span class=\"problematic\" id=\"id267\">[2]_</span></a>, i.e.:</p></li>\n</ol>\n<div class=\"math notranslate nohighlight\">\n\\[AK = \\hat{W}_{1111}\n    \\frac{(\\lambda_{1}+\\lambda_{2}+\\lambda_{3})^2}{(9 \\lambda_{1}^2)}\\]</div>\n<ol class=\"arabic simple\" start=\"2\">\n<li><p>AK can be sampled from the principal axis of the diffusion tensor:</p></li>\n</ol>\n<div class=\"math notranslate nohighlight\">\n\\[AK = K(\\mathbf{\\mathbf{e}_1)\\]</div>\n<p>Although both approaches leads to an exact calculation of AK, the first\napproach will be referred to as the analytical method while the second\napproach will be referred to as the numerical method based on their analogy\nto the estimation strategies for MK and RK.</p>\n</section>\n<section id=\"id268\">\n<h4>References<a class=\"headerlink\" href=\"#id268\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id269\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Jensen, J.H., Helpern, J.A., 2010. MRI quantification of\nnon-Gaussian water diffusion by kurtosis analysis. NMR in\nBiomedicine 23(7): 698-710</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id270\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id271\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on\nBiomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"kurtosis-maximum\">\n<h3>kurtosis_maximum<a class=\"headerlink\" href=\"#kurtosis-maximum\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.kurtosis_maximum\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">kurtosis_maximum</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'repulsion100'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.01</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.kurtosis_maximum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute kurtosis maximum value</p>\n<section id=\"id272\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id272\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eingenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere class instance, optional</span></dt><dd><p>The sphere providing sample directions for the initial search of the\nmaximal value of kurtosis.</p>\n</dd>\n<dt>gtol<span class=\"classifier\">float, optional</span></dt><dd><p>This input is to refine kurtosis maximum under the precision of the\ndirections sampled on the sphere class instance. The gradient of the\nconvergence procedure must be less than gtol before successful\ntermination. If gtol is None, fiber direction is directly taken from\nthe initial sampled directions of the given sphere object</p>\n</dd>\n<dt>mask<span class=\"classifier\">ndarray</span></dt><dd><p>A boolean array used to mark the coordinates in the data that should be\nanalyzed that has the shape dki_params.shape[:-1]</p>\n</dd>\n</dl>\n</section>\n<section id=\"id273\">\n<h4>Returns<a class=\"headerlink\" href=\"#id273\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>max_value<span class=\"classifier\">float</span></dt><dd><p>kurtosis tensor maximum value</p>\n</dd>\n<dt>max_dir<span class=\"classifier\">array (3,)</span></dt><dd><p>Cartesian coordinates of the direction of the maximal kurtosis value</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mean-kurtosis-tensor\">\n<h3>mean_kurtosis_tensor<a class=\"headerlink\" href=\"#mean-kurtosis-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.mean_kurtosis_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mean_kurtosis_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-0.42857142857142855</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_kurtosis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.mean_kurtosis_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute mean of the kurtosis tensor (MKT) <a href=\"#id1424\"><span class=\"problematic\" id=\"id274\">[1]_</span></a></p>\n<section id=\"id275\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id275\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>min_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, mean\nkurtosis values that are smaller than <cite>min_kurtosis</cite> are replaced with\n<cite>min_kurtosis</cite>. Default = -3./7 (theoretical kurtosis limit for regions\nthat consist of water confined to spherical pores <a href=\"#id1425\"><span class=\"problematic\" id=\"id276\">[2]_</span></a>)</p>\n</dd>\n<dt>max_kurtosis<span class=\"classifier\">float (optional)</span></dt><dd><p>To keep kurtosis values within a plausible biophysical range, mean\nkurtosis values that are larger than <cite>max_kurtosis</cite> are replaced with\n<cite>max_kurtosis</cite>. Default = 10</p>\n</dd>\n</dl>\n</section>\n<section id=\"id277\">\n<h4>Returns<a class=\"headerlink\" href=\"#id277\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mkt<span class=\"classifier\">array</span></dt><dd><p>Calculated mean kurtosis tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id278\">\n<h4>Notes<a class=\"headerlink\" href=\"#id278\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The MKT is defined as <a href=\"#id1426\"><span class=\"problematic\" id=\"id279\">[1]_</span></a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[MKT \\equiv \\frac{1}{4\\pi} \\int d\n\\Omega_{\\mathnbf{n}} n_i n_j n_k n_l W_{ijkl}\\]</div>\n<p>which can be directly computed from the trace of the kurtosis tensor:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<p>MKT = frac{1}{5} Tr(mathbf{W}) = frac{1}{5}\n(W_{1111} + W_{2222} + W_{3333} + 2W_{1122} + 2W_{1133} + 2W_{2233})</p>\n</section>\n<section id=\"id280\">\n<h4>References<a class=\"headerlink\" href=\"#id280\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id281\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Hansen, B., Lund, T. E., Sangill, R., and Jespersen, S. N. (2013).\nExperimentally and computationally fast method for estimation of\na mean kurtosis.Magnetic Resonance in Medicine69,  1754\u20131760.388\ndoi:10.1002/mrm.24743</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id282\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Barmpoutis, A., &amp; Zhuo, J., 2011. Diffusion kurtosis imaging:\nRobust estimation from DW-MRI using homogeneous polynomials.\nProceedings of the 8th {IEEE} International Symposium on\nBiomedical Imaging: From Nano to Macro, ISBI 2011, 262-265.\ndoi: 10.1109/ISBI.2011.5872402</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"kurtosis-fractional-anisotropy\">\n<h3>kurtosis_fractional_anisotropy<a class=\"headerlink\" href=\"#kurtosis-fractional-anisotropy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.kurtosis_fractional_anisotropy\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">kurtosis_fractional_anisotropy</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.kurtosis_fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the anisotropy of the kurtosis tensor (KFA) <a href=\"#id1427\"><span class=\"problematic\" id=\"id283\">[1]_</span></a>\n\nParameters\n\u2014\u2014\u2014-\ndki_params : ndarray (x, y, z, 27) or (n, 27)\n    All parameters estimated from the diffusion kurtosis model.\n    Parameters are ordered as follows:\n        1) Three diffusion tensor\u2019s eigenvalues\n        2) Three lines of the eigenvector matrix each containing the first,\n           second and third coordinates of the eigenvector\n        3) Fifteen elements of the kurtosis tensor\nReturns\n\u2014\u2014-\nkfa : array\n    Calculated mean kurtosis tensor.\n\nNotes\n\u2014\u2013\nThe KFA is defined as <a href=\"#id1428\"><span class=\"problematic\" id=\"id284\">[1]_</span></a>:\n\n.. math::\n\n     KFA equiv\n     frac{||mathbf{W} - MKT mathbf{I}^{(4)}||_F}{||mathbf{W}||_F}\n\nwhere <span class=\"math notranslate nohighlight\">\\(W\\)</span> is the kurtosis tensor, MKT the kurtosis tensor mean, <span class=\"math notranslate nohighlight\">\\(I^(4)\\)</span> is\nthe fully symmetric rank 2 isotropic tensor and <span class=\"math notranslate nohighlight\">\\(||...||_F\\)</span> is the tensor\u2019s\nFrobenius norm <a href=\"#id1429\"><span class=\"problematic\" id=\"id285\">[1]_</span></a>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Glenn, G. R., Helpern, J. A., Tabesh, A., and Jensen, J. H. (2015).\n       Quantitative assessment of diffusional kurtosis anisotropy.\n       NMR in Biomedicine 28, 448\u2013459. doi:10.1002/nbm.3271</p>\n</dd></dl>\n\n</section>\n<section id=\"dki-prediction\">\n<h3>dki_prediction<a class=\"headerlink\" href=\"#dki-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.dki_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">dki_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.dki_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal given diffusion kurtosis imaging parameters</p>\n<blockquote>\n<div><dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>gtab<span class=\"classifier\">a GradientTable class instance</span></dt><dd><p>The gradient table for this prediction</p>\n</dd>\n<dt>S0<span class=\"classifier\">float or ndarray (optional)</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">(\u2026, N) ndarray</span></dt><dd><p>Simulated signal based on the DKI model:</p>\n</dd>\n</dl>\n<div class=\"math notranslate nohighlight\">\n\\[S=S_{0}e^{-bD+\\]</div>\n</div></blockquote>\n<p>rac{1}{6}b^{2}D^{2}K}</p>\n</dd></dl>\n\n</section>\n<section id=\"params-to-dki-params\">\n<h3>params_to_dki_params<a class=\"headerlink\" href=\"#params-to-dki-params\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.params_to_dki_params\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">params_to_dki_params</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">result</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.params_to_dki_params\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"ls-fit-dki\">\n<h3>ls_fit_dki<a class=\"headerlink\" href=\"#ls-fit-dki\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.ls_fit_dki\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ls_fit_dki</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inverse_design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.ls_fit_dki\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the diffusion and kurtosis tensors using an ordinary or\nweighted linear least squares approach <a href=\"#id1430\"><span class=\"problematic\" id=\"id286\">[1]_</span></a></p>\n<section id=\"id287\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id287\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g, 22)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients.</p>\n</dd>\n<dt>data<span class=\"classifier\">array (g)</span></dt><dd><p>Data or response variables holding the data.</p>\n</dd>\n<dt>inverse_design_matrix<span class=\"classifier\">array (22, g)</span></dt><dd><p>Inverse of the design matrix.</p>\n</dd>\n<dt>weights<span class=\"classifier\">bool, optional</span></dt><dd><p>Parameter indicating whether weights are used. Default: True.</p>\n</dd>\n<dt>min_diffusivity<span class=\"classifier\">float, optional</span></dt><dd><p>Because negative eigenvalues are not physical and small eigenvalues,\nmuch smaller than the diffusion weighting, cause quite a lot of noise\nin metrics such as fa, diffusivity values smaller than <cite>min_diffusivity</cite>\nare replaced with <cite>min_diffusivity</cite>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id288\">\n<h4>Returns<a class=\"headerlink\" href=\"#id288\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">array (27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model for all N\nvoxels. Parameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor eigenvalues.</p></li>\n<li><p>Three blocks of three elements, containing the first second and\nthird coordinates of the diffusion tensor eigenvectors.</p></li>\n<li><p>Fifteen elements of the kurtosis tensor.</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n<section id=\"id289\">\n<h4>References<a class=\"headerlink\" href=\"#id289\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>[1] Veraart, J., Sijbers, J., Sunaert, S., Leemans, A., Jeurissen, B.,</dt><dd><p>2013. Weighted linear least squares estimation of diffusion MRI\nparameters: Strengths, limitations, and pitfalls. Magn Reson Med 81,\n335-346.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"cls-fit-dki\">\n<h3>cls_fit_dki<a class=\"headerlink\" href=\"#cls-fit-dki\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.cls_fit_dki\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">cls_fit_dki</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inverse_design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sdp</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.cls_fit_dki\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the diffusion and kurtosis tensors using a constrained\nordinary or weighted linear least squares approach <a href=\"#id1431\"><span class=\"problematic\" id=\"id290\">[1]_</span></a></p>\n<section id=\"id291\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id291\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g, 22)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients.</p>\n</dd>\n<dt>data<span class=\"classifier\">array (g)</span></dt><dd><p>Data or response variables holding the data.</p>\n</dd>\n<dt>inverse_design_matrix<span class=\"classifier\">array (22, g)</span></dt><dd><p>Inverse of the design matrix.</p>\n</dd>\n<dt>sdp<span class=\"classifier\">PositiveDefiniteLeastSquares instance</span></dt><dd><p>A CVXPY representation of a regularized least squares optimization\nproblem.</p>\n</dd>\n<dt>weights<span class=\"classifier\">bool, optional</span></dt><dd><p>Parameter indicating whether weights are used. Default: True.</p>\n</dd>\n<dt>min_diffusivity<span class=\"classifier\">float, optional</span></dt><dd><p>Because negative eigenvalues are not physical and small eigenvalues,\nmuch smaller than the diffusion weighting, cause quite a lot of noise\nin metrics such as fa, diffusivity values smaller than <cite>min_diffusivity</cite>\nare replaced with <cite>min_diffusivity</cite>.</p>\n</dd>\n<dt>cvxpy_solver<span class=\"classifier\">str, optional</span></dt><dd><p>cvxpy solver name. Optionally optimize the positivity constraint with a\nparticular cvxpy solver. See <a class=\"reference external\" href=\"http://www.cvxpy.org/\">http://www.cvxpy.org/</a> for details.\nDefault: None (cvxpy chooses its own solver).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id292\">\n<h4>Returns<a class=\"headerlink\" href=\"#id292\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">array (27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model for all N\nvoxels. Parameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor eigenvalues.</p></li>\n<li><p>Three blocks of three elements, containing the first second and\nthird coordinates of the diffusion tensor eigenvectors.</p></li>\n<li><p>Fifteen elements of the kurtosis tensor.</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n<section id=\"id293\">\n<h4>References<a class=\"headerlink\" href=\"#id293\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id294\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Dela Haije et al. \u201cEnforcing necessary non-negativity constraints for\ncommon diffusion MRI models using sum of squares programming\u201d.\nNeuroImage 209, 2020, 116405.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"wrotate\">\n<h3>Wrotate<a class=\"headerlink\" href=\"#wrotate\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.Wrotate\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Wrotate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Basis</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.Wrotate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Rotate a kurtosis tensor from the standard Cartesian coordinate system\nto another coordinate system basis</p>\n<section id=\"id295\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id295\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>kt<span class=\"classifier\">(15,)</span></dt><dd><p>Vector with the 15 independent elements of the kurtosis tensor</p>\n</dd>\n<dt>Basis<span class=\"classifier\">array (3, 3)</span></dt><dd><p>Vectors of the basis column-wise oriented</p>\n</dd>\n<dt>inds<span class=\"classifier\">array(m, 4) (optional)</span></dt><dd><p>Array of vectors containing the four indexes of m specific elements of\nthe rotated kurtosis tensor. If not specified all 15 elements of the\nrotated kurtosis tensor are computed.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id296\">\n<h4>Returns<a class=\"headerlink\" href=\"#id296\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>Wrot<span class=\"classifier\">array (m,) or (15,)</span></dt><dd><p>Vector with the m independent elements of the rotated kurtosis tensor.\nIf \u2018indices\u2019 is not specified all 15 elements of the rotated kurtosis\ntensor are computed.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id297\">\n<h4>Notes<a class=\"headerlink\" href=\"#id297\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>KT elements are assumed to be ordered as follows:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<dl class=\"simple\">\n<dt>begin{matrix} ( &amp; W_{xxxx} &amp; W_{yyyy} &amp; W_{zzzz} &amp; W_{xxxy} &amp; W_{xxxz}</dt><dd><p>&amp; \u2026 \\\n&amp; W_{xyyy} &amp; W_{yyyz} &amp; W_{xzzz} &amp; W_{yzzz} &amp; W_{xxyy}\n&amp; \u2026 \\\n&amp; W_{xxzz} &amp; W_{yyzz} &amp; W_{xxyz} &amp; W_{xyyz} &amp; W_{xyzz}\n&amp; &amp; )end{matrix}</p>\n</dd>\n</dl>\n</section>\n<section id=\"id298\">\n<h4>References<a class=\"headerlink\" href=\"#id298\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>[1] Hui ES, Cheung MM, Qi L, Wu EX, 2008. Towards better MR\ncharacterization of neural tissues using directional diffusion kurtosis\nanalysis. Neuroimage 42(1): 122-34</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"wrotate-element\">\n<h3>Wrotate_element<a class=\"headerlink\" href=\"#wrotate-element\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.Wrotate_element\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Wrotate_element</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indj</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indk</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indl</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.Wrotate_element\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the the specified index element of a kurtosis tensor rotated\nto the coordinate system basis B</p>\n<section id=\"id299\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id299\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>kt<span class=\"classifier\">ndarray (x, y, z, 15) or (n, 15)</span></dt><dd><p>Array containing the 15 independent elements of the kurtosis tensor</p>\n</dd>\n<dt>indi<span class=\"classifier\">int</span></dt><dd><p>Rotated kurtosis tensor element index i (0 for x, 1 for y, 2 for z)</p>\n</dd>\n<dt>indj<span class=\"classifier\">int</span></dt><dd><p>Rotated kurtosis tensor element index j (0 for x, 1 for y, 2 for z)</p>\n</dd>\n<dt>indk<span class=\"classifier\">int</span></dt><dd><p>Rotated kurtosis tensor element index k (0 for x, 1 for y, 2 for z)</p>\n</dd>\n<dt>indl: int</dt><dd><p>Rotated kurtosis tensor element index l (0 for x, 1 for y, 2 for z)</p>\n</dd>\n<dt>B: array (x, y, z, 3, 3) or (n, 15)</dt><dd><p>Vectors of the basis column-wise oriented</p>\n</dd>\n</dl>\n</section>\n<section id=\"id300\">\n<h4>Returns<a class=\"headerlink\" href=\"#id300\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>Wre<span class=\"classifier\">float</span></dt><dd><p>rotated kurtosis tensor element of index ind_i, ind_j, ind_k, ind_l</p>\n</dd>\n</dl>\n</section>\n<section id=\"id301\">\n<h4>Notes<a class=\"headerlink\" href=\"#id301\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>It is assumed that initial kurtosis tensor elementes are defined on the\nCartesian coordinate system.</p>\n</section>\n<section id=\"id302\">\n<h4>References<a class=\"headerlink\" href=\"#id302\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>[1] Hui ES, Cheung MM, Qi L, Wu EX, 2008. Towards better MR\ncharacterization of neural tissues using directional diffusion kurtosis\nanalysis. Neuroimage 42(1): 122-34</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"wcons\">\n<h3>Wcons<a class=\"headerlink\" href=\"#wcons\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.Wcons\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Wcons</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">k_elements</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.Wcons\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Construct the full 4D kurtosis tensors from its 15 independent\nelements</p>\n<section id=\"id303\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id303\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>k_elements<span class=\"classifier\">(15,)</span></dt><dd><p>elements of the kurtosis tensor in the following order:</p>\n</dd>\n</dl>\n<div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<dl class=\"simple\">\n<dt>begin{matrix} ( &amp; W_{xxxx} &amp; W_{yyyy} &amp; W_{zzzz} &amp; W_{xxxy} &amp; W_{xxxz}</dt><dd><p>&amp; \u2026 \\\n&amp; W_{xyyy} &amp; W_{yyyz} &amp; W_{xzzz} &amp; W_{yzzz} &amp; W_{xxyy}\n&amp; \u2026 \\\n&amp; W_{xxzz} &amp; W_{yyzz} &amp; W_{xxyz} &amp; W_{xyyz} &amp; W_{xyzz}\n&amp; &amp; )end{matrix}</p>\n</dd>\n</dl>\n</section>\n<section id=\"id304\">\n<h4>Returns<a class=\"headerlink\" href=\"#id304\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>W<span class=\"classifier\">array(3, 3, 3, 3)</span></dt><dd><p>Full 4D kurtosis tensor</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"split-dki-param\">\n<h3>split_dki_param<a class=\"headerlink\" href=\"#split-dki-param\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki.split_dki_param\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">split_dki_param</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki.split_dki_param\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract the diffusion tensor eigenvalues, the diffusion tensor\neigenvector matrix, and the 15 independent elements of the kurtosis tensor\nfrom the model parameters estimated from the DKI model</p>\n<section id=\"id305\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id305\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n<section id=\"id306\">\n<h4>Returns<a class=\"headerlink\" href=\"#id306\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>eigvals<span class=\"classifier\">array (x, y, z, 3) or (n, 3)</span></dt><dd><p>Eigenvalues from eigen decomposition of the tensor.</p>\n</dd>\n<dt>eigvecs<span class=\"classifier\">array (x, y, z, 3, 3) or (n, 3, 3)</span></dt><dd><p>Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[:,j] is associated with\neigvals[j])</p>\n</dd>\n<dt>kt<span class=\"classifier\">array (x, y, z, 15) or (n, 15)</span></dt><dd><p>Fifteen elements of the kurtosis tensor</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"kurtosismicrostructuremodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel\" title=\"dipy.reconst.dki_micro.KurtosisMicrostructureModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel</span></code></a><a class=\"headerlink\" href=\"#kurtosismicrostructuremodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructureModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki_micro.</span></span><span class=\"sig-name descname\"><span class=\"pre\">KurtosisMicrostructureModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel\" title=\"dipy.reconst.dki.DiffusionKurtosisModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a></p>\n<p>Class for the Diffusion Kurtosis Microstructural Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructureModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a KurtosisMicrostrutureModel class instance <a href=\"#id1432\"><span class=\"problematic\" id=\"id307\">[1]_</span></a>.</p>\n<section id=\"id308\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id308\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance</p>\n<dl>\n<dt>fit_method<span class=\"classifier\">str or callable</span></dt><dd><p>str can be one of the following:\n\u2018OLS\u2019 or \u2018ULLS\u2019 to fit the diffusion tensor and kurtosis tensor\nusing the ordinary linear least squares solution</p>\n<blockquote>\n<div><p>dki.ols_fit_dki</p>\n</div></blockquote>\n<p>\u2018WLS\u2019 or \u2018UWLLS\u2019 to fit the diffusion tensor and kurtosis tensor\nusing the ordinary linear least squares solution</p>\n<blockquote>\n<div><p>dki.wls_fit_dki</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id309\"><span class=\"problematic\" id=\"id310\">*</span></a>args, <a href=\"#id311\"><span class=\"problematic\" id=\"id312\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt>args, kwargs<span class=\"classifier\">arguments and key-word arguments passed to the</span></dt><dd><p>fit_method. See dki.ols_fit_dki, dki.wls_fit_dki for details</p>\n</dd>\n</dl>\n</section>\n<section id=\"id313\">\n<h4>References<a class=\"headerlink\" href=\"#id313\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id314\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructureModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'repulsion100'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.01</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">awf_only</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the Diffusion Kurtosis Microstructural Model</p>\n<section id=\"id315\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id315\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array</span></dt><dd><p>An 4D matrix containing the diffusion-weighted data.</p>\n</dd>\n<dt>mask<span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[-1]</p>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere class instance, optional</span></dt><dd><p>The sphere providing sample directions for the initial search of\nthe maximal value of kurtosis.</p>\n</dd>\n<dt>gtol<span class=\"classifier\">float, optional</span></dt><dd><p>This input is to refine kurtosis maxima under the precision of the\ndirections sampled on the sphere class instance. The gradient of\nthe convergence procedure must be less than gtol before successful\ntermination. If gtol is None, fiber direction is directly taken\nfrom the initial sampled directions of the given sphere object</p>\n</dd>\n<dt>awf_only<span class=\"classifier\">bool, optiomal</span></dt><dd><p>If set to true only the axonal volume fraction is computed from\nthe kurtosis tensor. Default = False</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructureModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for the DKI microstructural model class instance\ngiven parameters.</p>\n<section id=\"id316\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id316\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>params<span class=\"classifier\">ndarray (x, y, z, 40) or (n, 40)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis\nmicrostructural model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n<li><p>Six elements of the hindered diffusion tensor</p></li>\n<li><p>Six elements of the restricted diffusion tensor</p></li>\n<li><p>Axonal water fraction</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>S0<span class=\"classifier\">float or ndarray (optional)</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</section>\n<section id=\"id317\">\n<h4>Notes<a class=\"headerlink\" href=\"#id317\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In the original article of DKI microstructural model <a href=\"#id1433\"><span class=\"problematic\" id=\"id318\">[1]_</span></a>, the hindered\nand restricted tensors were defined as the intra-cellular and\nextra-cellular diffusion compartments respectively.</p>\n</section>\n<section id=\"id319\">\n<h4>References<a class=\"headerlink\" href=\"#id319\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id320\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"kurtosismicrostructuralfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit\" title=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit</span></code></a><a class=\"headerlink\" href=\"#kurtosismicrostructuralfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki_micro.</span></span><span class=\"sig-name descname\"><span class=\"pre\">KurtosisMicrostructuralFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit\" title=\"dipy.reconst.dki.DiffusionKurtosisFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit</span></code></a></p>\n<p>Class for fitting the Diffusion Kurtosis Microstructural Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a KurtosisMicrostructural Fit class instance.</p>\n<section id=\"id321\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id321\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>model<span class=\"classifier\">DiffusionKurtosisModel Class instance</span></dt><dd><p>Class instance containing the Diffusion Kurtosis Model for the fit</p>\n</dd>\n<dt>model_params<span class=\"classifier\">ndarray (x, y, z, 40) or (n, 40)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis\nmicrostructural model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n<li><p>Six elements of the hindered diffusion tensor</p></li>\n<li><p>Six elements of the restricted diffusion tensor</p></li>\n<li><p>Axonal water fraction</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n<section id=\"id322\">\n<h4>Notes<a class=\"headerlink\" href=\"#id322\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In the original article of DKI microstructural model <a href=\"#id1434\"><span class=\"problematic\" id=\"id323\">[1]_</span></a>, the hindered\nand restricted tensors were defined as the intra-cellular and\nextra-cellular diffusion compartments respectively.</p>\n</section>\n<section id=\"id324\">\n<h4>References<a class=\"headerlink\" href=\"#id324\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id325\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.awf\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">awf</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.awf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the volume fraction of the restricted diffusion compartment\nalso known as axonal water fraction.</p>\n<section id=\"id326\">\n<h4>Notes<a class=\"headerlink\" href=\"#id326\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The volume fraction of the restricted diffusion compartment can be seem\nas the volume fraction of the intra-cellular compartment <a href=\"#id1435\"><span class=\"problematic\" id=\"id327\">[1]_</span></a>.</p>\n</section>\n<section id=\"id328\">\n<h4>References<a class=\"headerlink\" href=\"#id328\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id329\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.axonal_diffusivity\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">axonal_diffusivity</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.axonal_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the axonal diffusivity defined as the restricted diffusion\ntensor trace <a href=\"#id1436\"><span class=\"problematic\" id=\"id330\">[1]_</span></a>.</p>\n<section id=\"id331\">\n<h4>References<a class=\"headerlink\" href=\"#id331\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id332\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_ad\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">hindered_ad</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_ad\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the axial diffusivity of the hindered compartment.</p>\n<section id=\"id333\">\n<h4>Notes<a class=\"headerlink\" href=\"#id333\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The hindered diffusion tensor can be seem as the tissue\u2019s\nextra-cellular diffusion compartment <a href=\"#id1437\"><span class=\"problematic\" id=\"id334\">[1]_</span></a>.</p>\n</section>\n<section id=\"id335\">\n<h4>References<a class=\"headerlink\" href=\"#id335\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id336\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_evals\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">hindered_evals</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_evals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the eigenvalues of the hindered diffusion compartment.</p>\n<section id=\"id337\">\n<h4>Notes<a class=\"headerlink\" href=\"#id337\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The hindered diffusion tensor can be seem as the tissue\u2019s\nextra-cellular diffusion compartment <a href=\"#id1438\"><span class=\"problematic\" id=\"id338\">[1]_</span></a>.</p>\n</section>\n<section id=\"id339\">\n<h4>References<a class=\"headerlink\" href=\"#id339\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id340\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_rd\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">hindered_rd</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_rd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the radial diffusivity of the hindered compartment.</p>\n<section id=\"id341\">\n<h4>Notes<a class=\"headerlink\" href=\"#id341\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The hindered diffusion tensor can be seem as the tissue\u2019s\nextra-cellular diffusion compartment <a href=\"#id1439\"><span class=\"problematic\" id=\"id342\">[1]_</span></a>.</p>\n</section>\n<section id=\"id343\">\n<h4>References<a class=\"headerlink\" href=\"#id343\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id344\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a DKI microstructural model fit, predict the signal on the\nvertices of a gradient table\n\ngtab : a GradientTable class instance\n    The gradient table for this prediction\n\nS0 : float or ndarray (optional)\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n\n<span class=\"math notranslate nohighlight\">\\(S(\\theta, b) = S_0 * [f * e^{-b ADC_{r}} + (1-f) * e^{-b ADC_{h}]\\)</span>,\nwhere <span class=\"math notranslate nohighlight\">\\(ADC_{r}\\)</span> and <span class=\"math notranslate nohighlight\">\\(ADC_{h}\\)</span> are the apparent diffusion coefficients\nof the diffusion hindered and restricted compartment for a given\ndirection <span class=\"math notranslate nohighlight\">\\(\\theta\\)</span>, <span class=\"math notranslate nohighlight\">\\(b\\)</span> is the b value provided in the GradientTable\ninput for that direction, <span class=\"math notranslate nohighlight\">\\(f\\)</span> is the volume fraction of the restricted\ndiffusion compartment (also known as the axonal water fraction).</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.restricted_evals\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">restricted_evals</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.restricted_evals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the eigenvalues of the restricted diffusion compartment.</p>\n<section id=\"id345\">\n<h4>Notes<a class=\"headerlink\" href=\"#id345\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The restricted diffusion tensor can be seem as the tissue\u2019s\nintra-cellular diffusion compartment <a href=\"#id1440\"><span class=\"problematic\" id=\"id346\">[1]_</span></a>.</p>\n</section>\n<section id=\"id347\">\n<h4>References<a class=\"headerlink\" href=\"#id347\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id348\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.KurtosisMicrostructuralFit.tortuosity\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">tortuosity</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.tortuosity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the tortuosity of the hindered diffusion which is defined\nby ADe / RDe, where ADe and RDe are the axial and radial diffusivities\nof the hindered compartment <a href=\"#id1441\"><span class=\"problematic\" id=\"id349\">[1]_</span></a>.</p>\n<section id=\"id350\">\n<h4>Notes<a class=\"headerlink\" href=\"#id350\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The hindered diffusion tensor can be seem as the tissue\u2019s\nextra-cellular diffusion compartment <a href=\"#id1442\"><span class=\"problematic\" id=\"id351\">[1]_</span></a>.</p>\n</section>\n<section id=\"id352\">\n<h4>References<a class=\"headerlink\" href=\"#id352\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id353\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans, E., Jensen, J.H., Helpern, J.A., 2011. White Matter\nCharacterization with Diffusion Kurtosis Imaging. Neuroimage\n58(1): 177-188. doi:10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"axonal-water-fraction\">\n<h3>axonal_water_fraction<a class=\"headerlink\" href=\"#axonal-water-fraction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.axonal_water_fraction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki_micro.</span></span><span class=\"sig-name descname\"><span class=\"pre\">axonal_water_fraction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'repulsion100'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.01</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.axonal_water_fraction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the axonal water fraction from DKI <a href=\"#id1443\"><span class=\"problematic\" id=\"id354\">[1]_</span></a>.</p>\n<section id=\"id355\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id355\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere class instance, optional</span></dt><dd><p>The sphere providing sample directions for the initial search of the\nmaximal value of kurtosis.</p>\n</dd>\n<dt>gtol<span class=\"classifier\">float, optional</span></dt><dd><p>This input is to refine kurtosis maxima under the precision of the\ndirections sampled on the sphere class instance. The gradient of the\nconvergence procedure must be less than gtol before successful\ntermination. If gtol is None, fiber direction is directly taken from\nthe initial sampled directions of the given sphere object</p>\n</dd>\n<dt>mask<span class=\"classifier\">ndarray</span></dt><dd><p>A boolean array used to mark the coordinates in the data that should be\nanalyzed that has the shape dki_params.shape[:-1]</p>\n</dd>\n</dl>\n</section>\n<section id=\"id356\">\n<h4>Returns<a class=\"headerlink\" href=\"#id356\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>awf<span class=\"classifier\">ndarray (x, y, z) or (n)</span></dt><dd><p>Axonal Water Fraction</p>\n</dd>\n</dl>\n</section>\n<section id=\"id357\">\n<h4>References<a class=\"headerlink\" href=\"#id357\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id358\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans E, Jensen JH, Helpern JA, 2011. White matter\ncharacterization with diffusional kurtosis imaging.\nNeuroimage 58(1):177-88. doi: 10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"diffusion-components\">\n<h3>diffusion_components<a class=\"headerlink\" href=\"#diffusion-components\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.diffusion_components\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki_micro.</span></span><span class=\"sig-name descname\"><span class=\"pre\">diffusion_components</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'repulsion100'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">awf</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.diffusion_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the restricted and hindered diffusion tensors of well aligned\nfibers from diffusion kurtosis imaging parameters <a href=\"#id1444\"><span class=\"problematic\" id=\"id359\">[1]_</span></a>.</p>\n<section id=\"id360\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id360\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>dki_params<span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere class instance, optional</span></dt><dd><p>The sphere providing sample directions to sample the restricted and\nhindered cellular diffusion tensors. For more details see Fieremans\net al., 2011.</p>\n</dd>\n<dt>awf<span class=\"classifier\">ndarray (optional)</span></dt><dd><p>Array containing values of the axonal water fraction that has the shape\ndki_params.shape[:-1]. If not given this will be automatically computed\nusing <a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.axonal_water_fraction\" title=\"dipy.reconst.dki_micro.axonal_water_fraction\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">axonal_water_fraction()</span></code></a>\u201d with function\u2019s default precision.</p>\n</dd>\n<dt>mask<span class=\"classifier\">ndarray (optional)</span></dt><dd><p>A boolean array used to mark the coordinates in the data that should be\nanalyzed that has the shape dki_params.shape[:-1]</p>\n</dd>\n</dl>\n</section>\n<section id=\"id361\">\n<h4>Returns<a class=\"headerlink\" href=\"#id361\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>edt<span class=\"classifier\">ndarray (x, y, z, 6) or (n, 6)</span></dt><dd><p>Parameters of the hindered diffusion tensor.</p>\n</dd>\n<dt>idt<span class=\"classifier\">ndarray (x, y, z, 6) or (n, 6)</span></dt><dd><p>Parameters of the restricted diffusion tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id362\">\n<h4>Notes<a class=\"headerlink\" href=\"#id362\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In the original article of DKI microstructural model <a href=\"#id1445\"><span class=\"problematic\" id=\"id363\">[1]_</span></a>, the hindered and\nrestricted tensors were defined as the intra-cellular and extra-cellular\ndiffusion compartments respectively.</p>\n</section>\n<section id=\"id364\">\n<h4>References<a class=\"headerlink\" href=\"#id364\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id365\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fieremans E, Jensen JH, Helpern JA, 2011. White matter\ncharacterization with diffusional kurtosis imaging.\nNeuroimage 58(1):177-88. doi: 10.1016/j.neuroimage.2011.06.006</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"dkimicro-prediction\">\n<h3>dkimicro_prediction<a class=\"headerlink\" href=\"#dkimicro-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.dkimicro_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki_micro.</span></span><span class=\"sig-name descname\"><span class=\"pre\">dkimicro_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.dkimicro_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Signal prediction given the DKI microstructure model parameters.\n\nParameters\n\u2014\u2014\u2014-\nparams : ndarray (x, y, z, 40) or (n, 40)\nAll parameters estimated from the diffusion kurtosis microstructure model.\n    Parameters are ordered as follows:\n        1) Three diffusion tensor\u2019s eigenvalues\n        2) Three lines of the eigenvector matrix each containing the\n           first, second and third coordinates of the eigenvector\n        3) Fifteen elements of the kurtosis tensor\n        4) Six elements of the hindered diffusion tensor\n        5) Six elements of the restricted diffusion tensor\n        6) Axonal water fraction\ngtab : a GradientTable class instance\n    The gradient table for this prediction\nS0 : float or ndarray\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nReturns\n\u2014\u2014-\nS : (\u2026, N) ndarray\n    Simulated signal based on the DKI microstructure model\n\nNotes\n\u2014\u2013\n1) The predicted signal is given by:\n<span class=\"math notranslate nohighlight\">\\(S(\\theta, b) = S_0 * [f * e^{-b ADC_{r}} + (1-f) * e^{-b ADC_{h}]\\)</span>, where\n:math:` ADC_{r} and ADC_{h} are the apparent diffusion coefficients of the\ndiffusion hindered and restricted compartment for a given direction\n<cite>theta:math:</cite>, <cite>b:math:</cite> is the b value provided in the GradientTable input for that\ndirection, <a href=\"#id366\"><span class=\"problematic\" id=\"id367\">`</span></a>f$ is the volume fraction of the restricted diffusion\ncompartment (also known as the axonal water fraction).\n\n2) In the original article of DKI microstructural model <a href=\"#id1446\"><span class=\"problematic\" id=\"id368\">[1]_</span></a>, the hindered\nand restricted tensors were defined as the intra-cellular and\nextra-cellular diffusion compartments respectively.</p>\n</dd></dl>\n\n</section>\n<section id=\"tortuosity\">\n<h3>tortuosity<a class=\"headerlink\" href=\"#tortuosity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dki_micro.tortuosity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dki_micro.</span></span><span class=\"sig-name descname\"><span class=\"pre\">tortuosity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">hindered_ad</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">hindered_rd</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dki_micro.tortuosity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the tortuosity of the hindered diffusion compartment given\nits axial and radial diffusivities</p>\n<section id=\"id369\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id369\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>hindered_ad: ndarray</dt><dd><p>Array containing the values of the hindered axial diffusivity.</p>\n</dd>\n<dt>hindered_rd: ndarray</dt><dd><p>Array containing the values of the hindered radial diffusivity.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id370\">\n<h4>Returns<a class=\"headerlink\" href=\"#id370\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Tortuosity of the hindered diffusion compartment</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"diffusionspectrummodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel\" title=\"dipy.reconst.dsi.DiffusionSpectrumModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel</span></code></a><a class=\"headerlink\" href=\"#diffusionspectrummodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffusionSpectrumModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qgrid_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">17</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filter_width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">32</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalize_peaks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a>, <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qgrid_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">17</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filter_width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">32</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalize_peaks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion Spectrum Imaging\n\nThe theoretical idea underlying this method is that the diffusion\npropagator <span class=\"math notranslate nohighlight\">\\(P(\\mathbf{r})\\)</span> (probability density function of the average\nspin displacements) can be estimated by applying 3D FFT to the signal\nvalues <span class=\"math notranslate nohighlight\">\\(S(\\mathbf{q})\\)</span>\n\n..math::\n    :nowrap:\n        begin{eqnarray}\n            P(mathbf{r}) &amp; = &amp; S_{0}^{-1}int S(mathbf{q})exp(-i2pimathbf{q}cdotmathbf{r})dmathbf{r}\n        end{eqnarray}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\mathbf{r}\\)</span> is the displacement vector and <span class=\"math notranslate nohighlight\">\\(\\mathbf{q}\\)</span> is the\nwave vector which corresponds to different gradient directions. Method\nused to calculate the ODFs. Here we implement the method proposed by\nWedeen et al. <a href=\"#id1447\"><span class=\"problematic\" id=\"id371\">[1]_</span></a>.\n\nThe main assumption for this model is fast gradient switching and that\nthe acquisition gradients will sit on a keyhole Cartesian grid in\nq_space <a href=\"#id1448\"><span class=\"problematic\" id=\"id372\">[3]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\ngtab : GradientTable,\n    Gradient directions and bvalues container class\nqgrid_size : int,\n    has to be an odd number. Sets the size of the q_space grid.\n    For example if qgrid_size is 17 then the shape of the grid will be\n    <code class=\"docutils literal notranslate\"><span class=\"pre\">(17,</span> <span class=\"pre\">17,</span> <span class=\"pre\">17)</span></code>.\nr_start : float,\n    ODF is sampled radially in the PDF. This parameters shows where the\n    sampling should start.\nr_end : float,\n    Radial endpoint of ODF sampling\nr_step : float,\n    Step size of the ODf sampling from r_start to r_end\nfilter_width : float,\n    Strength of the hanning filter\n\nReferences\n\u2014\u2014\u2014-\n.. [1]  Wedeen V.J et al., \u201cMapping Complex Tissue Architecture With\nDiffusion Spectrum Magnetic Resonance Imaging\u201d, MRM 2005.\n\n.. [2] Canales-Rodriguez E.J et al., \u201cDeconvolution in Diffusion\nSpectrum Imaging\u201d, Neuroimage, 2010.\n\n.. [3] Garyfallidis E, \u201cTowards an accurate brain tractography\u201d, PhD\nthesis, University of Cambridge, 2012.\n\nExamples\n\u2014\u2014\u2013\nIn this example where we provide the data, a gradient table\nand a reconstruction sphere, we calculate generalized FA for the first\nvoxel in the data with the reconstruction performed using DSI.\n\n&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; from dipy.data import dsi_voxels, default_sphere\n&gt;&gt;&gt; data, gtab = dsi_voxels()\n&gt;&gt;&gt; from dipy.reconst.dsi import DiffusionSpectrumModel\n&gt;&gt;&gt; ds = DiffusionSpectrumModel(gtab)\n&gt;&gt;&gt; dsfit = ds.fit(data)\n&gt;&gt;&gt; from dipy.reconst.odf import gfa\n&gt;&gt;&gt; np.round(gfa(dsfit.odf(default_sphere))[0, 0, 0], 2)\n0.11\n\nNotes\n\u2014\u2013\nA. Have in mind that DSI expects gradients on both hemispheres. If your\ngradients span only one hemisphere you need to duplicate the data and\nproject them to the other hemisphere before calling this class. The\nfunction dipy.reconst.dsi.half_to_full_qspace can be used for this\npurpose.\n\nB. If you increase the size of the grid (parameter qgrid_size) you will\nmost likely also need to update the r_* parameters. This is because\nthe added zero padding from the increase of gqrid_size also introduces\na scaling of the PDF.\n\nC. We assume that data only one b0 volume is provided.\n\nSee Also\n\u2014\u2014\u2013\ndipy.reconst.gqi.GeneralizedQSampling</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"diffusionspectrumfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit\" title=\"dipy.reconst.dsi.DiffusionSpectrumFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit</span></code></a><a class=\"headerlink\" href=\"#diffusionspectrumfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffusionSpectrumFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates PDF and ODF and other properties for a single voxel</p>\n<section id=\"id373\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id373\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>DiffusionSpectrumModel</p>\n</dd>\n<dt>data<span class=\"classifier\">1d ndarray,</span></dt><dd><p>signal values</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit.msd_discrete\">\n<span class=\"sig-name descname\"><span class=\"pre\">msd_discrete</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalized</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.msd_discrete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the mean squared displacement on the discrete propagator\n\n..math::\n    :nowrap:\n        begin{equation}\n            MSD:{DSI}=int_{-infty}^{infty}int_{-infty}^{infty}int_{-infty}^{infty} P(hat{mathbf{r}}) cdot hat{mathbf{r}}^{2} dr_x dr_y dr_z\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\hat{\\mathbf{r}}\\)</span> is a point in the 3D Propagator space\n(see Wu et al. <a href=\"#id1449\"><span class=\"problematic\" id=\"id374\">[1]_</span></a>).\n\nParameters\n\u2014\u2014\u2014-\nnormalized : boolean, optional\n    Whether to normalize the propagator by its sum in order to obtain a\n    pdf. Default: True\n\nReturns\n\u2014\u2014-\nmsd : float\n    the mean square displacement\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Wu Y. et al., \u201cHybrid diffusion imaging\u201d, NeuroImage, vol 36,\np. 617-629, 2007.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the real discrete odf for a given discrete sphere\n\n..math::\n    :nowrap:\n        begin{equation}\n            psi_{DSI}(hat{mathbf{u}})=int_{0}^{infty}P(rhat{mathbf{u}})r^{2}dr\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\hat{\\mathbf{u}}\\)</span> is the unit vector which corresponds to a\nsphere point.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit.pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">pdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalized</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies the 3D FFT in the q-space grid to generate\nthe diffusion propagator</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit.rtop_pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtop_pdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalized</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.rtop_pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the return to origin probability from the propagator, which is\nthe propagator evaluated at zero (see Descoteaux et Al. <a href=\"#id1450\"><span class=\"problematic\" id=\"id375\">[1]_</span></a>,\nTuch <a href=\"#id1451\"><span class=\"problematic\" id=\"id376\">[2]_</span></a>, Wu et al. <a href=\"#id1452\"><span class=\"problematic\" id=\"id377\">[3]_</span></a>)\nrtop = P(0)</p>\n<section id=\"id378\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id378\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>normalized<span class=\"classifier\">boolean, optional</span></dt><dd><p>Whether to normalize the propagator by its sum in order to obtain a\npdf. Default: True.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id379\">\n<h4>Returns<a class=\"headerlink\" href=\"#id379\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rtop<span class=\"classifier\">float</span></dt><dd><p>the return to origin probability</p>\n</dd>\n</dl>\n</section>\n<section id=\"id380\">\n<h4>References<a class=\"headerlink\" href=\"#id380\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id381\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux M. et al., \u201cMultiple q-shell diffusion propagator</p>\n</aside>\n</aside>\n<p>imaging\u201d, Medical Image Analysis, vol 15, No. 4, p. 603-621, 2011.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id382\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tuch D.S., \u201cDiffusion MRI of Complex Tissue Structure\u201d,\nPhD Thesis, 2002.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id383\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Wu Y. et al., \u201cComputation of Diffusion Function Measures</p>\n</aside>\n</aside>\n<p>in q -Space Using Magnetic Resonance Hybrid Diffusion Imaging\u201d,\nIEEE TRANSACTIONS ON MEDICAL IMAGING, vol. 27, No. 6, p. 858-865, 2008</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumFit.rtop_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtop_signal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filtering</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.rtop_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the return to origin probability (rtop) from the signal\nrtop equals to the sum of all signal values</p>\n<section id=\"id384\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id384\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>filtering<span class=\"classifier\">boolean, optional</span></dt><dd><p>Whether to perform Hanning filtering. Default: True</p>\n</dd>\n</dl>\n</section>\n<section id=\"id385\">\n<h4>Returns<a class=\"headerlink\" href=\"#id385\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rtop<span class=\"classifier\">float</span></dt><dd><p>the return to origin probability</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"diffusionspectrumdeconvmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel\" title=\"dipy.reconst.dsi.DiffusionSpectrumDeconvModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvModel</span></code></a><a class=\"headerlink\" href=\"#diffusionspectrumdeconvmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumDeconvModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffusionSpectrumDeconvModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qgrid_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">35</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">13.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filter_width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">inf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalize_peaks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel\" title=\"dipy.reconst.dsi.DiffusionSpectrumModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumDeconvModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qgrid_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">35</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">13.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filter_width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">inf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalize_peaks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion Spectrum Deconvolution\n\nThe idea is to remove the convolution on the DSI propagator that is\ncaused by the truncation of the q-space in the DSI sampling.\n\n..math::\n    :nowrap:\n        begin{eqnarray*}\n            P_{dsi}(mathbf{r}) &amp; = &amp; S_{0}^{-1}iiintlimits_{| mathbf{q} | le mathbf{q_{max}}} S(mathbf{q})exp(-i2pimathbf{q}cdotmathbf{r})dmathbf{q} \\\n            &amp; = &amp; S_{0}^{-1}iiintlimits_{mathbf{q}} left( S(mathbf{q}) cdot M(mathbf{q}) right) exp(-i2pimathbf{q}cdotmathbf{r})dmathbf{q} \\\n            &amp; = &amp; P(mathbf{r}) otimes left( S_{0}^{-1}iiintlimits_{mathbf{q}}  M(mathbf{q}) exp(-i2pimathbf{q}cdotmathbf{r})dmathbf{q} right) \\\n        end{eqnarray*}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\mathbf{r}\\)</span> is the displacement vector and <span class=\"math notranslate nohighlight\">\\(\\mathbf{q}\\)</span> is the\nwave vector which corresponds to different gradient directions,\n<span class=\"math notranslate nohighlight\">\\(M(\\mathbf{q})\\)</span> is a mask corresponding to your q-space sampling and\n<span class=\"math notranslate nohighlight\">\\(\\otimes\\)</span> is the convolution operator <a href=\"#id1453\"><span class=\"problematic\" id=\"id386\">[1]_</span></a>.\n\n\nParameters\n\u2014\u2014\u2014-\ngtab : GradientTable,\n    Gradient directions and bvalues container class\nqgrid_size : int,\n    has to be an odd number. Sets the size of the q_space grid.\n    For example if qgrid_size is 35 then the shape of the grid will be\n    <code class=\"docutils literal notranslate\"><span class=\"pre\">(35,</span> <span class=\"pre\">35,</span> <span class=\"pre\">35)</span></code>.\nr_start : float,\n    ODF is sampled radially in the PDF. This parameters shows where the\n    sampling should start.\nr_end : float,\n    Radial endpoint of ODF sampling\nr_step : float,\n    Step size of the ODf sampling from r_start to r_end\nfilter_width : float,\n    Strength of the hanning filter\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Canales-Rodriguez E.J et al., \u201cDeconvolution in Diffusion\nSpectrum Imaging\u201d, Neuroimage, 2010.\n\n.. [2] Biggs David S.C. et al., \u201cAcceleration of Iterative Image\nRestoration Algorithms\u201d, Applied Optics, vol. 36, No. 8, p. 1766-1775,\n1997.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumDeconvModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"diffusionspectrumdeconvfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit\" title=\"dipy.reconst.dsi.DiffusionSpectrumDeconvFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvFit</span></code></a><a class=\"headerlink\" href=\"#diffusionspectrumdeconvfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumDeconvFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DiffusionSpectrumDeconvFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit\" title=\"dipy.reconst.dsi.DiffusionSpectrumFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumDeconvFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates PDF and ODF and other properties for a single voxel</p>\n<section id=\"id387\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id387\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>DiffusionSpectrumModel</p>\n</dd>\n<dt>data<span class=\"classifier\">1d ndarray,</span></dt><dd><p>signal values</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.DiffusionSpectrumDeconvFit.pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">pdf</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit.pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies the 3D FFT in the q-space grid to generate\nthe DSI diffusion propagator, remove the background noise with a\nhard threshold and then deconvolve the propagator with the\nLucy-Richardson deconvolution algorithm</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"create-qspace\">\n<h3>create_qspace<a class=\"headerlink\" href=\"#create-qspace\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.create_qspace\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">create_qspace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">origin</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.create_qspace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>create the 3D grid which holds the signal values (q-space)</p>\n<section id=\"id388\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id388\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\norigin : (3,) ndarray</p>\n<blockquote>\n<div><p>center of qspace</p>\n</div></blockquote>\n</section>\n<section id=\"id389\">\n<h4>Returns<a class=\"headerlink\" href=\"#id389\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>qgrid<span class=\"classifier\">ndarray</span></dt><dd><p>qspace coordinates</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"create-qtable\">\n<h3>create_qtable<a class=\"headerlink\" href=\"#create-qtable\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.create_qtable\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">create_qtable</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">origin</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.create_qtable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>create a normalized version of gradients</p>\n<section id=\"id390\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id390\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\norigin : (3,) ndarray</p>\n<blockquote>\n<div><p>center of qspace</p>\n</div></blockquote>\n</section>\n<section id=\"id391\">\n<h4>Returns<a class=\"headerlink\" href=\"#id391\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>qtable : ndarray</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"hanning-filter\">\n<h3>hanning_filter<a class=\"headerlink\" href=\"#hanning-filter\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.hanning_filter\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">hanning_filter</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filter_width</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">origin</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.hanning_filter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>create a hanning window</p>\n<p>The signal is premultiplied by a Hanning window before\nFourier transform in order to ensure a smooth attenuation\nof the signal at high q values.</p>\n<section id=\"id392\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id392\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nfilter_width : int\norigin : (3,) ndarray</p>\n<blockquote>\n<div><p>center of qspace</p>\n</div></blockquote>\n</section>\n<section id=\"id393\">\n<h4>Returns<a class=\"headerlink\" href=\"#id393\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>filter<span class=\"classifier\">(N,) ndarray</span></dt><dd><p>where N is the number of non-b0 gradient directions</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"pdf-interp-coords\">\n<h3>pdf_interp_coords<a class=\"headerlink\" href=\"#pdf-interp-coords\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.pdf_interp_coords\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">pdf_interp_coords</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rradius</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">origin</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.pdf_interp_coords\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Precompute coordinates for ODF calculation from the PDF</p>\n<section id=\"id394\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id394\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">object,</span></dt><dd><p>Sphere</p>\n</dd>\n<dt>rradius<span class=\"classifier\">array, shape (N,)</span></dt><dd><p>line interpolation points</p>\n</dd>\n<dt>origin<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>center of the grid</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"pdf-odf\">\n<h3>pdf_odf<a class=\"headerlink\" href=\"#pdf-odf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.pdf_odf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">pdf_odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Pr</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rradius</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">interp_coords</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.pdf_odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the real ODF from the diffusion propagator(PDF) Pr</p>\n<section id=\"id395\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id395\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>Pr<span class=\"classifier\">array, shape (X, X, X)</span></dt><dd><p>probability density function</p>\n</dd>\n<dt>rradius<span class=\"classifier\">array, shape (N,)</span></dt><dd><p>interpolation range on the radius</p>\n</dd>\n<dt>interp_coords<span class=\"classifier\">array, shape (3, M, N)</span></dt><dd><p>coordinates in the pdf for interpolating the odf</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"half-to-full-qspace\">\n<h3>half_to_full_qspace<a class=\"headerlink\" href=\"#half-to-full-qspace\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.half_to_full_qspace\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">half_to_full_qspace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.half_to_full_qspace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Half to full Cartesian grid mapping</p>\n<p>Useful when dMRI data are provided in one qspace hemisphere as\nDiffusionSpectrum expects data to be in full qspace.</p>\n<section id=\"id396\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id396\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array, shape (X, Y, Z, W)</span></dt><dd><p>where (X, Y, Z) volume size and W number of gradient directions</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>container for b-values and b-vectors (gradient directions)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id397\">\n<h4>Returns<a class=\"headerlink\" href=\"#id397\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>new_data : array, shape (X, Y, Z, 2 * W -1)\nnew_gtab : GradientTable</p>\n</section>\n<section id=\"id398\">\n<h4>Notes<a class=\"headerlink\" href=\"#id398\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>We assume here that only on b0 is provided with the initial data. If that\nis not the case then you will need to write your own preparation function\nbefore providing the gradients and the data to the DiffusionSpectrumModel\nclass.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"project-hemisph-bvecs\">\n<h3>project_hemisph_bvecs<a class=\"headerlink\" href=\"#project-hemisph-bvecs\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.project_hemisph_bvecs\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">project_hemisph_bvecs</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.project_hemisph_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Project any near identical bvecs to the other hemisphere</p>\n<section id=\"id399\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id399\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">object,</span></dt><dd><p>GradientTable</p>\n</dd>\n</dl>\n</section>\n<section id=\"id400\">\n<h4>Notes<a class=\"headerlink\" href=\"#id400\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Useful only when working with some types of dsi data.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"threshold-propagator\">\n<h3>threshold_propagator<a class=\"headerlink\" href=\"#threshold-propagator\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.threshold_propagator\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">threshold_propagator</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">estimated_snr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">15.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.threshold_propagator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies hard threshold on the propagator to remove background noise for the\ndeconvolution.</p>\n</dd></dl>\n\n</section>\n<section id=\"gen-psf\">\n<h3>gen_PSF<a class=\"headerlink\" href=\"#gen-psf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.gen_PSF\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">gen_PSF</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qgrid_sampling</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">siz_x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">siz_y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">siz_z</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.gen_PSF\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate a PSF for DSI Deconvolution by taking the ifft of the binary\nq-space sampling mask and truncating it to keep only the center.</p>\n</dd></dl>\n\n</section>\n<section id=\"lr-deconv\">\n<h3>LR_deconv<a class=\"headerlink\" href=\"#lr-deconv\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dsi.LR_deconv\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dsi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">LR_deconv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prop</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">psf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">numit</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">acc_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dsi.LR_deconv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Perform Lucy-Richardson deconvolution algorithm on a 3D array.</p>\n<section id=\"id401\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id401\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>prop<span class=\"classifier\">3-D ndarray of dtype float</span></dt><dd><p>The 3D volume to be deconvolve</p>\n</dd>\n<dt>psf<span class=\"classifier\">3-D ndarray of dtype float</span></dt><dd><p>The filter that will be used for the deconvolution.</p>\n</dd>\n<dt>numit<span class=\"classifier\">int</span></dt><dd><p>Number of Lucy-Richardson iteration to perform.</p>\n</dd>\n<dt>acc_factor<span class=\"classifier\">float</span></dt><dd><p>Exponential acceleration factor as in <a href=\"#id1454\"><span class=\"problematic\" id=\"id402\">[1]_</span></a>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id403\">\n<h4>References<a class=\"headerlink\" href=\"#id403\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id404\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Biggs David S.C. et al., \u201cAcceleration of Iterative Image\nRestoration Algorithms\u201d, Applied Optics, vol. 36, No. 8, p. 1766-1775,\n1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"tensormodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorModel\" title=\"dipy.reconst.dti.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#tensormodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TensorModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a href=\"#id1455\"><span class=\"problematic\" id=\"id405\">[1]_</span></a>, <a href=\"#id1456\"><span class=\"problematic\" id=\"id406\">[2]_</span></a>.</p>\n<section id=\"id407\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id407\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance</p>\n<dl>\n<dt>fit_method<span class=\"classifier\">str or callable</span></dt><dd><p>str can be one of the following:</p>\n<dl class=\"simple\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt><dd><p>fitting <a href=\"#id1457\"><span class=\"problematic\" id=\"id408\">[3]_</span></a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id409\"><span class=\"problematic\" id=\"id410\">*</span></a>args, <a href=\"#id411\"><span class=\"problematic\" id=\"id412\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt>return_S0_hat<span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt>args, kwargs<span class=\"classifier\">arguments and key-word arguments passed to the</span></dt><dd><p>fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float</span></dt><dd><p>The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id413\">\n<h4>Notes<a class=\"headerlink\" href=\"#id413\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>E.g., in <a class=\"reference internal\" href=\"#dipy.reconst.dti.iter_fit_tensor\" title=\"dipy.reconst.dti.iter_fit_tensor\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code></a> we have a default step value of\n1e4</p>\n</section>\n<section id=\"id414\">\n<h4>References<a class=\"headerlink\" href=\"#id414\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id415\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id416\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id417\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<section id=\"id418\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id418\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array</span></dt><dd><p>The measured signal from one voxel.</p>\n</dd>\n<dt>mask<span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dti_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<section id=\"id419\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id419\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dti_params<span class=\"classifier\">ndarray</span></dt><dd><p>The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt>S0<span class=\"classifier\">float or ndarray</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"tensorfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit\" title=\"dipy.reconst.dti.TensorFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code></a><a class=\"headerlink\" href=\"#tensorfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TensorFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a TensorFit class instance.</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.S0_hat\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">S0_hat</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.S0_hat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.ad\">\n<span class=\"sig-name descname\"><span class=\"pre\">ad</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.ad\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Axial diffusivity (AD) calculated from cached eigenvalues.</p>\n<section id=\"id420\">\n<h4>Returns<a class=\"headerlink\" href=\"#id420\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ad<span class=\"classifier\">array (V, 1)</span></dt><dd><p>Calculated AD.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id421\">\n<h4>Notes<a class=\"headerlink\" href=\"#id421\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>RD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[AD = \\lambda_1\\]</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.adc\">\n<span class=\"sig-name descname\"><span class=\"pre\">adc</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.adc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><blockquote>\n<div><p>Calculate the apparent diffusion coefficient (ADC) in each direction on\nthe sphere for each voxel in the data</p>\n<p>sphere : Sphere class instance</p>\n<dl class=\"simple\">\n<dt>adc<span class=\"classifier\">ndarray</span></dt><dd><p>The estimates of the apparent diffusion coefficient in every\ndirection on the input sphere</p>\n</dd>\n</dl>\n<p>The calculation of ADC, relies on the following relationship:</p>\n<div class=\"math notranslate nohighlight\">\n\\[ADC = \\]</div>\n</div></blockquote>\n<p>ec{b} Q \nec{b}^T</p>\n<blockquote>\n<div><p>Where Q is the quadratic form of the tensor.</p>\n</div></blockquote>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.color_fa\">\n<span class=\"sig-name descname\"><span class=\"pre\">color_fa</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.color_fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Color fractional anisotropy of diffusion tensor</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.directions\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">directions</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.directions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>For tracking - return the primary direction in each voxel</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.evals\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">evals</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.evals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the eigenvalues of the tensor as an array</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.evecs\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">evecs</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.evecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the eigenvectors of the tensor as an array, columnwise</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.fa\">\n<span class=\"sig-name descname\"><span class=\"pre\">fa</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fractional anisotropy (FA) calculated from cached eigenvalues.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.ga\">\n<span class=\"sig-name descname\"><span class=\"pre\">ga</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.ga\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Geodesic anisotropy (GA) calculated from cached eigenvalues.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.linearity\">\n<span class=\"sig-name descname\"><span class=\"pre\">linearity</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.linearity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><section id=\"id422\">\n<h4>Returns<a class=\"headerlink\" href=\"#id422\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>linearity<span class=\"classifier\">array</span></dt><dd><p>Calculated linearity of the diffusion tensor <a href=\"#id1458\"><span class=\"problematic\" id=\"id423\">[1]_</span></a>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id424\">\n<h4>Notes<a class=\"headerlink\" href=\"#id424\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Linearity is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Linearity =\n\\frac{\\lambda_1-\\lambda_2}{\\lambda_1+\\lambda_2+\\lambda_3}\\]</div>\n</section>\n<section id=\"id425\">\n<h4>References<a class=\"headerlink\" href=\"#id425\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id426\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin C.-F., Peled S., Gubjartsson H., Kikinis R., Jolesz\nF., \u201cGeometrical diffusion measures for MRI from tensor basis\nanalysis\u201d in Proc. 5th Annual ISMRM, 1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.lower_triangular\">\n<span class=\"sig-name descname\"><span class=\"pre\">lower_triangular</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.md\">\n<span class=\"sig-name descname\"><span class=\"pre\">md</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.md\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean diffusivity (MD) calculated from cached eigenvalues.</p>\n<section id=\"id427\">\n<h4>Returns<a class=\"headerlink\" href=\"#id427\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>md<span class=\"classifier\">array (V, 1)</span></dt><dd><p>Calculated MD.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id428\">\n<h4>Notes<a class=\"headerlink\" href=\"#id428\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>MD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[MD = \\frac{\\lambda_1+\\lambda_2+\\lambda_3}{3}\\]</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.mode\">\n<span class=\"sig-name descname\"><span class=\"pre\">mode</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.mode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tensor mode calculated from cached eigenvalues.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The diffusion orientation distribution function (dODF). This is an\nestimate of the diffusion distance in each direction\n\nParameters\n\u2014\u2014\u2014-\nsphere : Sphere class instance.\n    The dODF is calculated in the vertices of this input.\n\nReturns\n\u2014\u2014-\nodf : ndarray\n    The diffusion distance in every direction of the sphere in every\n    voxel in the input data.\n\nNotes\n\u2014\u2013\nThis is based on equation 3 in <a href=\"#id1459\"><span class=\"problematic\" id=\"id429\">[1]_</span></a>. To re-derive it from\nscratch, follow steps in <a href=\"#id1460\"><span class=\"problematic\" id=\"id430\">[2]_</span></a>, Section 7.9 Equation\n7.24 but with an <span class=\"math notranslate nohighlight\">\\(r^2\\)</span> term in the integral.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Aganj, I., Lenglet, C., Sapiro, G., Yacoub, E., Ugurbil,\n    K., &amp; Harel, N. (2010). Reconstruction of the orientation\n    distribution function in single- and multiple-shell q-ball imaging\n    within constant solid angle. Magnetic Resonance in Medicine, 64(2),\n    554-566. doi:DOI: 10.1002/mrm.22365\n\n.. [2] Descoteaux, M. (2008). PhD Thesis: High Angular\n   Resolution Diffusion MRI: from Local Estimation to Segmentation and\n   Tractography.\n   ftp://ftp-sop.inria.fr/athena/Publications/PhDs/descoteaux_thesis.pdf</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.planarity\">\n<span class=\"sig-name descname\"><span class=\"pre\">planarity</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.planarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><section id=\"id431\">\n<h4>Returns<a class=\"headerlink\" href=\"#id431\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphericity<span class=\"classifier\">array</span></dt><dd><p>Calculated sphericity of the diffusion tensor <a href=\"#id1461\"><span class=\"problematic\" id=\"id432\">[1]_</span></a>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id433\">\n<h4>Notes<a class=\"headerlink\" href=\"#id433\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Sphericity is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Sphericity =\n\\frac{2 (\\lambda_2 - \\lambda_3)}{\\lambda_1+\\lambda_2+\\lambda_3}\\]</div>\n</section>\n<section id=\"id434\">\n<h4>References<a class=\"headerlink\" href=\"#id434\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id435\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin C.-F., Peled S., Gubjartsson H., Kikinis R., Jolesz\nF., \u201cGeometrical diffusion measures for MRI from tensor basis\nanalysis\u201d in Proc. 5th Annual ISMRM, 1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a model fit, predict the signal on the vertices of a sphere\n\nParameters\n\u2014\u2014\u2014-\ngtab : a GradientTable class instance\n    This encodes the directions for which a prediction is made\n\nS0 : float array\n   The mean non-diffusion weighted signal in each voxel. Default:\n   The fitted S0 value in all voxels if it was fitted. Otherwise 1 in\n   all voxels.\n\nstep : int\n    The chunk size as a number of voxels. Optional parameter with\n    default value 10,000.\n\n    In order to increase speed of processing, tensor fitting is done\n    simultaneously over many voxels. This parameter sets the number of\n    voxels that will be fit at once in each iteration. A larger step\n    value should speed things up, but it will also take up more memory.\n    It is advisable to keep an eye on memory consumption as this value\n    is increased.\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n\n.. math ::\n\n    S(  heta, b) = S_0 * e^{-b ADC}\n\nWhere:\n.. math ::\n    ADC =       heta Q  heta^T\n\n:math:`       heta` is a unit vector pointing at any direction on the sphere for\nwhich a signal is to be predicted and <span class=\"math notranslate nohighlight\">\\(b\\)</span> is the b value provided in\nthe GradientTable input for that direction</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.quadratic_form\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">quadratic_form</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.quadratic_form\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the 3x3 diffusion tensor for each voxel</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.rd\">\n<span class=\"sig-name descname\"><span class=\"pre\">rd</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.rd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Radial diffusivity (RD) calculated from cached eigenvalues.</p>\n<section id=\"id436\">\n<h4>Returns<a class=\"headerlink\" href=\"#id436\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rd<span class=\"classifier\">array (V, 1)</span></dt><dd><p>Calculated RD.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id437\">\n<h4>Notes<a class=\"headerlink\" href=\"#id437\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>RD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[RD = \\frac{\\lambda_2 + \\lambda_3}{2}\\]</div>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.shape\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shape</span></span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.sphericity\">\n<span class=\"sig-name descname\"><span class=\"pre\">sphericity</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.sphericity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><section id=\"id438\">\n<h4>Returns<a class=\"headerlink\" href=\"#id438\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphericity<span class=\"classifier\">array</span></dt><dd><p>Calculated sphericity of the diffusion tensor <a href=\"#id1462\"><span class=\"problematic\" id=\"id439\">[1]_</span></a>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id440\">\n<h4>Notes<a class=\"headerlink\" href=\"#id440\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Sphericity is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Sphericity = \\frac{3 \\lambda_3}{\\lambda_1+\\lambda_2+\\lambda_3}\\]</div>\n</section>\n<section id=\"id441\">\n<h4>References<a class=\"headerlink\" href=\"#id441\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id442\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin C.-F., Peled S., Gubjartsson H., Kikinis R., Jolesz\nF., \u201cGeometrical diffusion measures for MRI from tensor basis\nanalysis\u201d in Proc. 5th Annual ISMRM, 1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.TensorFit.trace\">\n<span class=\"sig-name descname\"><span class=\"pre\">trace</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.TensorFit.trace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Trace of the tensor calculated from cached eigenvalues.</p>\n<section id=\"id443\">\n<h4>Returns<a class=\"headerlink\" href=\"#id443\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>trace<span class=\"classifier\">array (V, 1)</span></dt><dd><p>Calculated trace.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id444\">\n<h4>Notes<a class=\"headerlink\" href=\"#id444\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The trace is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[trace = \\lambda_1 + \\lambda_2 + \\lambda_3\\]</div>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"fractional-anisotropy\">\n<h3>fractional_anisotropy<a class=\"headerlink\" href=\"#fractional-anisotropy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.fractional_anisotropy\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">fractional_anisotropy</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return Fractional anisotropy (FA) of a diffusion tensor.</p>\n<section id=\"id445\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id445\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id446\">\n<h4>Returns<a class=\"headerlink\" href=\"#id446\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>fa<span class=\"classifier\">array</span></dt><dd><p>Calculated FA. Range is 0 &lt;= FA &lt;= 1.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id447\">\n<h4>Notes<a class=\"headerlink\" href=\"#id447\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>FA is calculated using the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[FA = \\sqrt{\\frac{1}{2}\\frac{(\\lambda_1-\\lambda_2)^2+(\\lambda_1-\n            \\lambda_3)^2+(\\lambda_2-\\lambda_3)^2}{\\lambda_1^2+\n            \\lambda_2^2+\\lambda_3^2}}\\]</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"geodesic-anisotropy\">\n<h3>geodesic_anisotropy<a class=\"headerlink\" href=\"#geodesic-anisotropy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.geodesic_anisotropy\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">geodesic_anisotropy</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.geodesic_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Geodesic anisotropy (GA) of a diffusion tensor.\n\nParameters\n\u2014\u2014\u2014-\nevals : array-like\n    Eigenvalues of a diffusion tensor.\naxis : int\n    Axis of <cite>evals</cite> which contains 3 eigenvalues.\n\nReturns\n\u2014\u2014-\nga : array\n    Calculated GA. In the range 0 to +infinity\n\nNotes\n\u2014\u2013\nGA is calculated using the following equation given in <a href=\"#id1463\"><span class=\"problematic\" id=\"id448\">[1]_</span></a>:\n\n.. math::\n\n    GA = sqrt{sum_{i=1}^3\n    log^2{left ( lambda_i/&lt;mathbf{D}&gt; right )}},\n    quad textrm{where} quad &lt;mathbf{D}&gt; =\n    (lambda_1lambda_2lambda_3)^{1/3}\n\nNote that the notation, <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span>, is often used as the mean diffusivity (MD)\nof the diffusion tensor and can lead to confusions in the literature\n(see <a href=\"#id1464\"><span class=\"problematic\" id=\"id449\">[1]_</span></a> versus <a href=\"#id1465\"><span class=\"problematic\" id=\"id450\">[2]_</span></a> versus <a href=\"#id1466\"><span class=\"problematic\" id=\"id451\">[3]_</span></a> for example). Reference <a href=\"#id1467\"><span class=\"problematic\" id=\"id452\">[2]_</span></a> defines\ngeodesic anisotropy (GA) with <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span> as the MD in the denominator of the\nsum. This is wrong. The original paper <a href=\"#id1468\"><span class=\"problematic\" id=\"id453\">[1]_</span></a> defines GA with\n<span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span>, as the isotropic part of the distance. This might be\nan explanation for the confusion. The isotropic part of the diffusion\ntensor in Euclidean space is the MD whereas the isotropic part of the\ntensor in log-Euclidean space is <span class=\"math notranslate nohighlight\">\\(det(D)^{1/3}\\)</span>. The Appendix of <a href=\"#id1469\"><span class=\"problematic\" id=\"id454\">[1]_</span></a> and\nlog-Euclidean derivations from <a href=\"#id1470\"><span class=\"problematic\" id=\"id455\">[3]_</span></a> are clear on this. Hence, all that to\nsay that <span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span> here for the GA definition and not MD.\n\nReferences\n\u2014\u2014\u2014-\n\n.. [1] P. G. Batchelor, M. Moakher, D. Atkinson, F. Calamante,\n    A. Connelly, \u201cA rigorous framework for diffusion tensor calculus\u201d,\n    Magnetic Resonance in Medicine, vol. 53, pp. 221-225, 2005.\n\n.. [2] M. M. Correia, V. F. Newcombe, G.B. Williams.\n    \u201cContrast-to-noise ratios for indices of anisotropy obtained from\n    diffusion MRI: a study with standard clinical b-values at 3T\u201d.\n    NeuroImage, vol. 57, pp. 1103-1115, 2011.\n\n.. [3] A. D. Lee, etal, P. M. Thompson.\n    \u201cComparison of fractional and geodesic anisotropy in diffusion tensor\n    images of 90 monozygotic and dizygotic twins\u201d. 5th IEEE International\n    Symposium on Biomedical Imaging (ISBI), pp. 943-946, May 2008.\n\n.. [4] V. Arsigny, P. Fillard, X. Pennec, N. Ayache.\n    \u201cLog-Euclidean metrics for fast and simple calculus on diffusion\n    tensors.\u201d Magnetic Resonance in Medecine, vol 56, pp. 411-421, 2006.</p>\n</dd></dl>\n\n</section>\n<section id=\"mean-diffusivity\">\n<h3>mean_diffusivity<a class=\"headerlink\" href=\"#mean-diffusivity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.mean_diffusivity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mean_diffusivity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.mean_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean Diffusivity (MD) of a diffusion tensor.</p>\n<section id=\"id456\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id456\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id457\">\n<h4>Returns<a class=\"headerlink\" href=\"#id457\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>md<span class=\"classifier\">array</span></dt><dd><p>Calculated MD.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id458\">\n<h4>Notes<a class=\"headerlink\" href=\"#id458\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>MD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[MD = \\frac{\\lambda_1 + \\lambda_2 + \\lambda_3}{3}\\]</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"axial-diffusivity\">\n<h3>axial_diffusivity<a class=\"headerlink\" href=\"#axial-diffusivity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.axial_diffusivity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">axial_diffusivity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.axial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Axial Diffusivity (AD) of a diffusion tensor.\nAlso called parallel diffusivity.</p>\n<section id=\"id459\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id459\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id460\">\n<h4>Returns<a class=\"headerlink\" href=\"#id460\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ad<span class=\"classifier\">array</span></dt><dd><p>Calculated AD.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id461\">\n<h4>Notes<a class=\"headerlink\" href=\"#id461\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>AD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[AD = \\lambda_1\\]</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"radial-diffusivity\">\n<h3>radial_diffusivity<a class=\"headerlink\" href=\"#radial-diffusivity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.radial_diffusivity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">radial_diffusivity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.radial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Radial Diffusivity (RD) of a diffusion tensor.\nAlso called perpendicular diffusivity.</p>\n<section id=\"id462\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id462\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id463\">\n<h4>Returns<a class=\"headerlink\" href=\"#id463\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rd<span class=\"classifier\">array</span></dt><dd><p>Calculated RD.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id464\">\n<h4>Notes<a class=\"headerlink\" href=\"#id464\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>RD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[RD = \\frac{\\lambda_2 + \\lambda_3}{2}\\]</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"trace\">\n<h3>trace<a class=\"headerlink\" href=\"#trace\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.trace\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">trace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.trace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Trace of a diffusion tensor.</p>\n<section id=\"id465\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id465\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id466\">\n<h4>Returns<a class=\"headerlink\" href=\"#id466\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>trace<span class=\"classifier\">array</span></dt><dd><p>Calculated trace of the diffusion tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id467\">\n<h4>Notes<a class=\"headerlink\" href=\"#id467\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Trace is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Trace = \\lambda_1 + \\lambda_2 + \\lambda_3\\]</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"color-fa\">\n<h3>color_fa<a class=\"headerlink\" href=\"#color-fa\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.color_fa\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">color_fa</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evecs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.color_fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Color fractional anisotropy of diffusion tensor</p>\n<section id=\"id468\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id468\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>fa<span class=\"classifier\">array-like</span></dt><dd><p>Array of the fractional anisotropy (can be 1D, 2D or 3D)</p>\n</dd>\n<dt>evecs<span class=\"classifier\">array-like</span></dt><dd><p>eigen vectors from the tensor model</p>\n</dd>\n</dl>\n</section>\n<section id=\"id469\">\n<h4>Returns<a class=\"headerlink\" href=\"#id469\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>rgb<span class=\"classifier\">Array with 3 channels for each color as the last dimension.</span></dt><dd><p>Colormap of the FA with red for the x value, y for the green\nvalue and z for the blue value.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id470\">\n<h4>Notes<a class=\"headerlink\" href=\"#id470\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>It is computed from the clipped FA between 0 and 1 using the following\nformula</p>\n<div class=\"math notranslate nohighlight\">\n\\[rgb = abs(max(\\vec{e})) \\times fa\\]</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"determinant\">\n<h3>determinant<a class=\"headerlink\" href=\"#determinant\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.determinant\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">determinant</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_form</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.determinant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The determinant of a tensor, given in quadratic form</p>\n<section id=\"id471\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id471\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>q_form<span class=\"classifier\">ndarray</span></dt><dd><p>The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (x, y, z, 3, 3) or (n, 3, 3) or (3, 3).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id472\">\n<h4>Returns<a class=\"headerlink\" href=\"#id472\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>det<span class=\"classifier\">array</span></dt><dd><p>The determinant of the tensor in each spatial coordinate</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"isotropic\">\n<h3>isotropic<a class=\"headerlink\" href=\"#isotropic\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.isotropic\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">isotropic</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_form</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.isotropic\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the isotropic part of the tensor <a href=\"#id1471\"><span class=\"problematic\" id=\"id473\">[1]_</span></a>.</p>\n<section id=\"id474\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id474\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>q_form<span class=\"classifier\">ndarray</span></dt><dd><p>The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (x,y,z,3,3) or (n, 3, 3) or (3,3).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id475\">\n<h4>Returns<a class=\"headerlink\" href=\"#id475\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>A_hat: ndarray</dt><dd><p>The isotropic part of the tensor in each spatial coordinate</p>\n</dd>\n</dl>\n</section>\n<section id=\"id476\">\n<h4>Notes<a class=\"headerlink\" href=\"#id476\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The isotropic part of a tensor is defined as (equations 3-5 of <a href=\"#id1472\"><span class=\"problematic\" id=\"id477\">[1]_</span></a>):</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\bar{A} = \\frac{1}{2} tr(A) I\\]</div>\n</section>\n<section id=\"id478\">\n<h4>References<a class=\"headerlink\" href=\"#id478\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id479\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Daniel B. Ennis and G. Kindlmann, \u201cOrthogonal Tensor\nInvariants and the Analysis of Diffusion Tensor Magnetic Resonance\nImages\u201d, Magnetic Resonance in Medicine, vol. 55, no. 1, pp. 136-146,\n2006.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"deviatoric\">\n<h3>deviatoric<a class=\"headerlink\" href=\"#deviatoric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.deviatoric\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">deviatoric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_form</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.deviatoric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the deviatoric (anisotropic) part of the tensor <a href=\"#id1473\"><span class=\"problematic\" id=\"id480\">[1]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\nq_form : ndarray\n    The quadratic form of a tensor, or an array with quadratic forms of\n    tensors. Should be of shape (x,y,z,3,3) or (n, 3, 3) or (3,3).\n\nReturns\n\u2014\u2014-\nA_squiggle : ndarray\n    The deviatoric part of the tensor in each spatial coordinate.\n\nNotes\n\u2014\u2013\nThe deviatoric part of the tensor is defined as (equations 3-5 in <a href=\"#id1474\"><span class=\"problematic\" id=\"id481\">[1]_</span></a>):\n\n.. math ::\n     widetilde{A} = A - bar{A}\n\nWhere <span class=\"math notranslate nohighlight\">\\(A\\)</span> is the tensor quadratic form and <span class=\"math notranslate nohighlight\">\\(\\bar{A}\\)</span> is the anisotropic\npart of the tensor.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Daniel B. Ennis and G. Kindlmann, \u201cOrthogonal Tensor\n    Invariants and the Analysis of Diffusion Tensor Magnetic Resonance\n    Images\u201d, Magnetic Resonance in Medicine, vol. 55, no. 1, pp. 136-146,\n    2006.</p>\n</dd></dl>\n\n</section>\n<section id=\"norm\">\n<h3>norm<a class=\"headerlink\" href=\"#norm\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.norm\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">norm</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_form</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.norm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the Frobenius norm of a tensor quadratic form</p>\n<section id=\"id482\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id482\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>q_form: ndarray</dt><dd><p>The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (x,y,z,3,3) or (n, 3, 3) or (3,3).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id483\">\n<h4>Returns<a class=\"headerlink\" href=\"#id483\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>norm<span class=\"classifier\">ndarray</span></dt><dd><p>The Frobenius norm of the 3,3 tensor q_form in each spatial\ncoordinate.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id484\">\n<h4>Notes<a class=\"headerlink\" href=\"#id484\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The Frobenius norm is defined as:</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">math<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>||A||_F = [sum_{i,j} abs(a_{i,j})^2]^{1/2}</p>\n</dd>\n</dl>\n</section>\n<section id=\"see-also\">\n<h4>See Also<a class=\"headerlink\" href=\"#see-also\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>np.linalg.norm</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mode\">\n<h3>mode<a class=\"headerlink\" href=\"#mode\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.mode\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mode</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_form</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.mode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mode (MO) of a diffusion tensor <a href=\"#id1475\"><span class=\"problematic\" id=\"id485\">[1]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\nq_form : ndarray\n    The quadratic form of a tensor, or an array with quadratic forms of\n    tensors. Should be of shape (x, y, z, 3, 3) or (n, 3, 3) or (3, 3).\n\nReturns\n\u2014\u2014-\nmode : array\n    Calculated tensor mode in each spatial coordinate.\n\nNotes\n\u2014\u2013\nMode ranges between -1 (planar anisotropy) and +1 (linear anisotropy)\nwith 0 representing orthotropy. Mode is calculated with the\nfollowing equation (equation 9 in <a href=\"#id1476\"><span class=\"problematic\" id=\"id486\">[1]_</span></a>):\n\n.. math::\n\n    Mode = 3*sqrt{6}*det(widetilde{A}/norm(widetilde{A}))\n\nWhere <span class=\"math notranslate nohighlight\">\\(\\widetilde{A}\\)</span> is the deviatoric part of the tensor quadratic form.\n\nReferences\n\u2014\u2014\u2014-\n\n.. [1] Daniel B. Ennis and G. Kindlmann, \u201cOrthogonal Tensor\n    Invariants and the Analysis of Diffusion Tensor Magnetic Resonance\n    Images\u201d, Magnetic Resonance in Medicine, vol. 55, no. 1, pp. 136-146,\n    2006.</p>\n</dd></dl>\n\n</section>\n<section id=\"linearity\">\n<h3>linearity<a class=\"headerlink\" href=\"#linearity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.linearity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">linearity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.linearity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The linearity of the tensor <a href=\"#id1477\"><span class=\"problematic\" id=\"id487\">[1]_</span></a></p>\n<section id=\"id488\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id488\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id489\">\n<h4>Returns<a class=\"headerlink\" href=\"#id489\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>linearity<span class=\"classifier\">array</span></dt><dd><p>Calculated linearity of the diffusion tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id490\">\n<h4>Notes<a class=\"headerlink\" href=\"#id490\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Linearity is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Linearity = \\frac{\\lambda_1-\\lambda_2}{\\lambda_1+\\lambda_2+\\lambda_3}\\]</div>\n</section>\n<section id=\"id491\">\n<h4>References<a class=\"headerlink\" href=\"#id491\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id492\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin C.-F., Peled S., Gubjartsson H., Kikinis R., Jolesz F.,\n\u201cGeometrical diffusion measures for MRI from tensor basis analysis\u201d in\nProc. 5th Annual ISMRM, 1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"planarity\">\n<h3>planarity<a class=\"headerlink\" href=\"#planarity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.planarity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">planarity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.planarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The planarity of the tensor <a href=\"#id1478\"><span class=\"problematic\" id=\"id493\">[1]_</span></a></p>\n<section id=\"id494\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id494\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id495\">\n<h4>Returns<a class=\"headerlink\" href=\"#id495\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>linearity<span class=\"classifier\">array</span></dt><dd><p>Calculated linearity of the diffusion tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id496\">\n<h4>Notes<a class=\"headerlink\" href=\"#id496\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Planarity is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Planarity =\n\\frac{2 (\\lambda_2-\\lambda_3)}{\\lambda_1+\\lambda_2+\\lambda_3}\\]</div>\n</section>\n<section id=\"id497\">\n<h4>References<a class=\"headerlink\" href=\"#id497\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id498\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin C.-F., Peled S., Gubjartsson H., Kikinis R., Jolesz F.,\n\u201cGeometrical diffusion measures for MRI from tensor basis analysis\u201d in\nProc. 5th Annual ISMRM, 1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"sphericity\">\n<h3>sphericity<a class=\"headerlink\" href=\"#sphericity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.sphericity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sphericity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.sphericity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The sphericity of the tensor <a href=\"#id1479\"><span class=\"problematic\" id=\"id499\">[1]_</span></a></p>\n<section id=\"id500\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id500\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>evals<span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt>axis<span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id501\">\n<h4>Returns<a class=\"headerlink\" href=\"#id501\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphericity<span class=\"classifier\">array</span></dt><dd><p>Calculated sphericity of the diffusion tensor.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id502\">\n<h4>Notes<a class=\"headerlink\" href=\"#id502\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Sphericity is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[Sphericity = \\frac{3 \\lambda_3)}{\\lambda_1+\\lambda_2+\\lambda_3}\\]</div>\n</section>\n<section id=\"id503\">\n<h4>References<a class=\"headerlink\" href=\"#id503\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id504\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin C.-F., Peled S., Gubjartsson H., Kikinis R., Jolesz F.,\n\u201cGeometrical diffusion measures for MRI from tensor basis analysis\u201d in\nProc. 5th Annual ISMRM, 1997.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"apparent-diffusion-coef\">\n<h3>apparent_diffusion_coef<a class=\"headerlink\" href=\"#apparent-diffusion-coef\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.apparent_diffusion_coef\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">apparent_diffusion_coef</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_form</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.apparent_diffusion_coef\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the apparent diffusion coefficient (ADC) in each direction of a\nsphere.</p>\n<section id=\"id505\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id505\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>q_form<span class=\"classifier\">ndarray</span></dt><dd><p>The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (\u2026, 3, 3)</p>\n</dd>\n<dt>sphere<span class=\"classifier\">a Sphere class instance</span></dt><dd><p>The ADC will be calculated for each of the vertices in the sphere</p>\n</dd>\n</dl>\n</section>\n<section id=\"id506\">\n<h4>Notes<a class=\"headerlink\" href=\"#id506\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The calculation of ADC, relies on the following relationship:</p>\n<div class=\"math notranslate nohighlight\">\n\\[ADC = \\vec{b} Q \\vec{b}^T\\]</div>\n<p>Where Q is the quadratic form of the tensor.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"tensor-prediction\">\n<h3>tensor_prediction<a class=\"headerlink\" href=\"#tensor-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.tensor_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">tensor_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dti_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.tensor_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal given tensor parameters.\n\nParameters\n\u2014\u2014\u2014-\ndti_params : ndarray\n    Tensor parameters. The last dimension should have 12 tensor\n    parameters: 3 eigenvalues, followed by the 3 corresponding\n    eigenvectors.\n\ngtab : a GradientTable class instance\n    The gradient table for this prediction\n\nS0 : float or ndarray\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nNotes\n\u2014\u2013\nThe predicted signal is given by: <span class=\"math notranslate nohighlight\">\\(S(       heta, b) = S_0 * e^{-b ADC}\\)</span>, where\n<span class=\"math notranslate nohighlight\">\\(ADC =      heta Q  heta^T\\)</span>, :math:`      heta` is a unit vector pointing at any\ndirection on the sphere for which a signal is to be predicted, <span class=\"math notranslate nohighlight\">\\(b\\)</span> is the b\nvalue provided in the GradientTable input for that direction, <span class=\"math notranslate nohighlight\">\\(Q\\)</span> is the\nquadratic form of the tensor determined by the input parameters.</p>\n</dd></dl>\n\n</section>\n<section id=\"iter-fit-tensor\">\n<h3>iter_fit_tensor<a class=\"headerlink\" href=\"#iter-fit-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.iter_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">iter_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">step</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10000.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.iter_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wrap a fit_tensor func and iterate over chunks of data with given length</p>\n<p>Splits data into a number of chunks of specified size and iterates the\ndecorated fit_tensor function over them. This is useful to counteract the\ntemporary but significant memory usage increase in fit_tensor functions\nthat use vectorized operations and need to store large temporary arrays for\ntheir vectorized operations.</p>\n<section id=\"id507\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id507\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>step<span class=\"classifier\">int</span></dt><dd><p>The chunk size as a number of voxels. Optional parameter with default\nvalue 10,000.</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. This parameter sets the number of\nvoxels that will be fit at once in each iteration. A larger step value\nshould speed things up, but it will also take up more memory. It is\nadvisable to keep an eye on memory consumption as this value is\nincreased.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"wls-fit-tensor\">\n<h3>wls_fit_tensor<a class=\"headerlink\" href=\"#wls-fit-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.wls_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">wls_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.wls_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes weighted least squares (WLS) fit to calculate self-diffusion\ntensor using a linear regression model <a href=\"#id1480\"><span class=\"problematic\" id=\"id508\">[1]_</span></a>.</p>\n<section id=\"id509\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id509\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g, 7)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients.</p>\n</dd>\n<dt>data<span class=\"classifier\">array ([X, Y, Z, \u2026], g)</span></dt><dd><p>Data or response variables holding the data. Note that the last\ndimension should contain the data. It makes no copies of data.</p>\n</dd>\n<dt>return_S0_hat<span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id510\">\n<h4>Returns<a class=\"headerlink\" href=\"#id510\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>eigvals<span class=\"classifier\">array (\u2026, 3)</span></dt><dd><p>Eigenvalues from eigen decomposition of the tensor.</p>\n</dd>\n<dt>eigvecs<span class=\"classifier\">array (\u2026, 3, 3)</span></dt><dd><p>Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[:,j] is associated with\neigvals[j])</p>\n</dd>\n</dl>\n</section>\n<section id=\"id511\">\n<h4>See Also<a class=\"headerlink\" href=\"#id511\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>decompose_tensor</p>\n</section>\n<section id=\"id512\">\n<h4>Notes<a class=\"headerlink\" href=\"#id512\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In Chung, et al. 2006, the regression of the WLS fit needed an unbiased\npreliminary estimate of the weights and therefore the ordinary least\nsquares (OLS) estimates were used. A \u201ctwo pass\u201d method was implemented:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>calculate OLS estimates of the data</p></li>\n<li><p>apply the OLS estimates as weights to the WLS fit of the data</p></li>\n</ol>\n</div></blockquote>\n<p>This ensured heteroscedasticity could be properly modeled for various\ntypes of bootstrap resampling (namely residual bootstrap).</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\begin{split}y = \\mathrm{data} \\\\\nX = \\mathrm{design matrix} \\\\\n\\hat{\\beta}_\\mathrm{WLS} =\n\\mathrm{desired regression coefficients (e.g. tensor)}\\\\\n\\\\\n\\hat{\\beta}_\\mathrm{WLS} = (X^T W X)^{-1} X^T W y \\\\\n\\\\\nW = \\mathrm{diag}((X \\hat{\\beta}_\\mathrm{OLS})^2),\n\\mathrm{where} \\hat{\\beta}_\\mathrm{OLS} = (X^T X)^{-1} X^T y\\end{split}\\]</div>\n</section>\n<section id=\"id513\">\n<h4>References<a class=\"headerlink\" href=\"#id513\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id514\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Chung, SW., Lu, Y., Henry, R.G., 2006. Comparison of bootstrap\napproaches for estimation of uncertainties of DTI parameters.\nNeuroImage 33, 531-541.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"ols-fit-tensor\">\n<h3>ols_fit_tensor<a class=\"headerlink\" href=\"#ols-fit-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.ols_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ols_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_lower_triangular</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.ols_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes ordinary least squares (OLS) fit to calculate self-diffusion\ntensor using a linear regression model <a href=\"#id1481\"><span class=\"problematic\" id=\"id515\">[1]_</span></a>.</p>\n<section id=\"id516\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id516\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g, 7)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients.</p>\n</dd>\n<dt>data<span class=\"classifier\">array ([X, Y, Z, \u2026], g)</span></dt><dd><p>Data or response variables holding the data. Note that the last\ndimension should contain the data. It makes no copies of data.</p>\n</dd>\n<dt>return_S0_hat<span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt>return_lower_triangular<span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the coefficients of the fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id517\">\n<h4>Returns<a class=\"headerlink\" href=\"#id517\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>eigvals<span class=\"classifier\">array (\u2026, 3)</span></dt><dd><p>Eigenvalues from eigen decomposition of the tensor.</p>\n</dd>\n<dt>eigvecs<span class=\"classifier\">array (\u2026, 3, 3)</span></dt><dd><p>Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[:,j] is associated with\neigvals[j])</p>\n</dd>\n</dl>\n</section>\n<section id=\"id518\">\n<h4>See Also<a class=\"headerlink\" href=\"#id518\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>WLS_fit_tensor, decompose_tensor, design_matrix</p>\n</section>\n<section id=\"id519\">\n<h4>Notes<a class=\"headerlink\" href=\"#id519\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div class=\"math notranslate nohighlight\">\n\\[ \\begin{align}\\begin{aligned}\\begin{split}y = \\mathrm{data} \\\\\nX = \\mathrm{design matrix} \\\\\\end{split}\\\\\\hat{\\beta}_\\mathrm{OLS} = (X^T X)^{-1} X^T y\\end{aligned}\\end{align} \\]</div>\n</section>\n<section id=\"id520\">\n<h4>References<a class=\"headerlink\" href=\"#id520\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id521\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Chung, SW., Lu, Y., Henry, R.G., 2006. Comparison of bootstrap\napproaches for estimation of uncertainties of DTI parameters.\nNeuroImage 33, 531-541.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"nlls-fit-tensor\">\n<h3>nlls_fit_tensor<a class=\"headerlink\" href=\"#nlls-fit-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.nlls_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">nlls_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">jac</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fail_is_nan</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.nlls_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the cumulant expansion params (e.g. DTI, DKI) using non-linear\nleast-squares.</p>\n<section id=\"id522\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id522\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g, Npar)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients. First six parameters of design matrix should correspond\nto the six unique diffusion tensor elements in the lower triangular\norder (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz), while last parameter to -log(S0)</p>\n</dd>\n<dt>data<span class=\"classifier\">array ([X, Y, Z, \u2026], g)</span></dt><dd><p>Data or response variables holding the data. Note that the last\ndimension should contain the data. It makes no copies of data.</p>\n</dd>\n<dt>weighting: str</dt><dd><p>the weighting scheme to use in considering the\nsquared-error. Default behavior is to use uniform weighting. Other\noptions: \u2018sigma\u2019 \u2018gmm\u2019</p>\n</dd>\n<dt>sigma: float</dt><dd><p>If the \u2018sigma\u2019 weighting scheme is used, a value of sigma needs to be\nprovided here. According to <a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/restore_dti/#chang2005\" id=\"id523\"><span>[Chang2005]</span></a>, a good value to use is\n1.5267 * std(background_noise), where background_noise is estimated\nfrom some part of the image known to contain no signal (only noise).</p>\n</dd>\n<dt>jac<span class=\"classifier\">bool</span></dt><dd><p>Use the Jacobian? Default: True</p>\n</dd>\n<dt>return_S0_hat<span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt>fail_is_nan<span class=\"classifier\">bool</span></dt><dd><p>Boolean to set failed NL fitting to NaN (True) or LS (False, default).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id524\">\n<h4>Returns<a class=\"headerlink\" href=\"#id524\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>nlls_params: the eigen-values and eigen-vectors of the tensor in each</dt><dd><p>voxel.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"restore-fit-tensor\">\n<h3>restore_fit_tensor<a class=\"headerlink\" href=\"#restore-fit-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.restore_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">restore_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">jac</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fail_is_nan</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.restore_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use the RESTORE algorithm <a href=\"#id1482\"><span class=\"problematic\" id=\"id525\">[1]_</span></a> to calculate a robust tensor fit</p>\n<section id=\"id526\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id526\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array of shape (g, 7)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients.</p>\n</dd>\n<dt>data<span class=\"classifier\">array of shape ([X, Y, Z, n_directions], g)</span></dt><dd><p>Data or response variables holding the data. Note that the last\ndimension should contain the data. It makes no copies of data.</p>\n</dd>\n<dt>sigma<span class=\"classifier\">float, array of shape [n_directions], array of shape [X, Y, Z]</span></dt><dd><p>An estimate of the variance. <a href=\"#id1483\"><span class=\"problematic\" id=\"id527\">[1]_</span></a> recommend to use\n1.5267 * std(background_noise), where background_noise is estimated\nfrom some part of the image known to contain no signal (only noise).\nArray with ndim &gt; 1 corresponds to spatially varying sigma, so if\nproviding spatially-flattened data and spatially-varying sigma,\nprovide array with shape [num_vox, 1].</p>\n</dd>\n<dt>jac<span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to use the Jacobian of the tensor to speed the non-linear\noptimization procedure used to fit the tensor parameters (see also\n<a class=\"reference internal\" href=\"#dipy.reconst.dti.nlls_fit_tensor\" title=\"dipy.reconst.dti.nlls_fit_tensor\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">nlls_fit_tensor()</span></code></a>). Default: True</p>\n</dd>\n<dt>return_S0_hat<span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt>fail_is_nan<span class=\"classifier\">bool</span></dt><dd><p>Boolean to set failed NL fitting to NaN (True) or LS (False, default).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id528\">\n<h4>Returns<a class=\"headerlink\" href=\"#id528\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>restore_params : an estimate of the tensor parameters in each voxel.</p>\n</section>\n<section id=\"id529\">\n<h4>References<a class=\"headerlink\" href=\"#id529\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id530\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Chang, L-C, Jones, DK and Pierpaoli, C (2005). RESTORE: robust</p>\n</aside>\n</aside>\n<p>estimation of tensors by outlier rejection. MRM, 53: 1088-95.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"lt-indices\">\n<h3>_lt_indices<a class=\"headerlink\" href=\"#lt-indices\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti._lt_indices\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">_lt_indices</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti._lt_indices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>ndarray(shape, dtype=float, buffer=None, offset=0,</dt><dd><p>strides=None, order=None)</p>\n</dd>\n</dl>\n<p>An array object represents a multidimensional, homogeneous array\nof fixed-size items.  An associated data-type object describes the\nformat of each element in the array (its byte-order, how many bytes it\noccupies in memory, whether it is an integer, a floating point number,\nor something else, etc.)</p>\n<p>Arrays should be constructed using <cite>array</cite>, <cite>zeros</cite> or <cite>empty</cite> (refer\nto the See Also section below).  The parameters given here refer to\na low-level method (<cite>ndarray(\u2026)</cite>) for instantiating an array.</p>\n<p>For more information, refer to the <cite>numpy</cite> module and examine the\nmethods and attributes of an array.</p>\n<section id=\"id531\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id531\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>(for the __new__ method; see Notes below)</p>\n<dl class=\"simple\">\n<dt>shape<span class=\"classifier\">tuple of ints</span></dt><dd><p>Shape of created array.</p>\n</dd>\n<dt>dtype<span class=\"classifier\">data-type, optional</span></dt><dd><p>Any object that can be interpreted as a numpy data type.</p>\n</dd>\n<dt>buffer<span class=\"classifier\">object exposing buffer interface, optional</span></dt><dd><p>Used to fill the array with data.</p>\n</dd>\n<dt>offset<span class=\"classifier\">int, optional</span></dt><dd><p>Offset of array data in buffer.</p>\n</dd>\n<dt>strides<span class=\"classifier\">tuple of ints, optional</span></dt><dd><p>Strides of data in memory.</p>\n</dd>\n<dt>order<span class=\"classifier\">{\u2018C\u2019, \u2018F\u2019}, optional</span></dt><dd><p>Row-major (C-style) or column-major (Fortran-style) order.</p>\n</dd>\n</dl>\n</section>\n<section id=\"attributes\">\n<h4>Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">ndarray</span></dt><dd><p>Transpose of the array.</p>\n</dd>\n<dt>data<span class=\"classifier\">buffer</span></dt><dd><p>The array\u2019s elements, in memory.</p>\n</dd>\n<dt>dtype<span class=\"classifier\">dtype object</span></dt><dd><p>Describes the format of the elements in the array.</p>\n</dd>\n<dt>flags<span class=\"classifier\">dict</span></dt><dd><p>Dictionary containing information related to memory use, e.g.,\n\u2018C_CONTIGUOUS\u2019, \u2018OWNDATA\u2019, \u2018WRITEABLE\u2019, etc.</p>\n</dd>\n<dt>flat<span class=\"classifier\">numpy.flatiter object</span></dt><dd><p>Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">x.flat</span> <span class=\"pre\">=</span> <span class=\"pre\">3</span></code> (See <cite>ndarray.flat</cite> for\nassignment examples; TODO).</p>\n</dd>\n<dt>imag<span class=\"classifier\">ndarray</span></dt><dd><p>Imaginary part of the array.</p>\n</dd>\n<dt>real<span class=\"classifier\">ndarray</span></dt><dd><p>Real part of the array.</p>\n</dd>\n<dt>size<span class=\"classifier\">int</span></dt><dd><p>Number of elements in the array.</p>\n</dd>\n<dt>itemsize<span class=\"classifier\">int</span></dt><dd><p>The memory use of each array element in bytes.</p>\n</dd>\n<dt>nbytes<span class=\"classifier\">int</span></dt><dd><p>The total number of bytes required to store the array data,\ni.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">itemsize</span> <span class=\"pre\">*</span> <span class=\"pre\">size</span></code>.</p>\n</dd>\n<dt>ndim<span class=\"classifier\">int</span></dt><dd><p>The array\u2019s number of dimensions.</p>\n</dd>\n<dt>shape<span class=\"classifier\">tuple of ints</span></dt><dd><p>Shape of the array.</p>\n</dd>\n<dt>strides<span class=\"classifier\">tuple of ints</span></dt><dd><p>The step-size required to move from one element to the next in\nmemory. For example, a contiguous <code class=\"docutils literal notranslate\"><span class=\"pre\">(3,</span> <span class=\"pre\">4)</span></code> array of type\n<code class=\"docutils literal notranslate\"><span class=\"pre\">int16</span></code> in C-order has strides <code class=\"docutils literal notranslate\"><span class=\"pre\">(8,</span> <span class=\"pre\">2)</span></code>.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">*</span> <span class=\"pre\">4</span></code>).</p>\n</dd>\n<dt>ctypes<span class=\"classifier\">ctypes object</span></dt><dd><p>Class containing properties of the array needed for interaction\nwith ctypes.</p>\n</dd>\n<dt>base<span class=\"classifier\">ndarray</span></dt><dd><p>If the array is a view into another array, that array is its <cite>base</cite>\n(unless that array is also a view).  The <cite>base</cite> array is where the\narray data is actually stored.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id532\">\n<h4>See Also<a class=\"headerlink\" href=\"#id532\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>array : Construct an array.\nzeros : Create an array, each element of which is zero.\nempty : Create an array, but leave its allocated memory unchanged (i.e.,</p>\n<blockquote>\n<div><p>it contains \u201cgarbage\u201d).</p>\n</div></blockquote>\n<p>dtype : Create a data-type.\nnumpy.typing.NDArray : An ndarray alias <a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-generic-type\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">generic</span></a></p>\n<blockquote>\n<div><p>w.r.t. its <cite>dtype.type &lt;numpy.dtype.type&gt;</cite>.</p>\n</div></blockquote>\n</section>\n<section id=\"id533\">\n<h4>Notes<a class=\"headerlink\" href=\"#id533\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>There are two modes of creating an array using <code class=\"docutils literal notranslate\"><span class=\"pre\">__new__</span></code>:</p>\n<ol class=\"arabic simple\">\n<li><p>If <cite>buffer</cite> is None, then only <cite>shape</cite>, <cite>dtype</cite>, and <cite>order</cite>\nare used.</p></li>\n<li><p>If <cite>buffer</cite> is an object exposing the buffer interface, then\nall keywords are interpreted.</p></li>\n</ol>\n<p>No <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method is needed because the array is fully initialized\nafter the <code class=\"docutils literal notranslate\"><span class=\"pre\">__new__</span></code> method.</p>\n</section>\n<section id=\"id534\">\n<h4>Examples<a class=\"headerlink\" href=\"#id534\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>These examples illustrate the low-level <cite>ndarray</cite> constructor.  Refer\nto the <cite>See Also</cite> section above for easier ways of constructing an\nndarray.</p>\n<p>First mode, <cite>buffer</cite> is None:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[0.0e+000, 0.0e+000], # random</span>\n<span class=\"go\">       [     nan, 2.5e-323]])</span>\n</pre></div>\n</div>\n<p>Second mode:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>           <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">itemsize</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"c1\"># offset = 1*itemsize, i.e. skip first element</span>\n<span class=\"go\">array([2, 3])</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"from-lower-triangular\">\n<h3>from_lower_triangular<a class=\"headerlink\" href=\"#from-lower-triangular\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.from_lower_triangular\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">from_lower_triangular</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">D</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.from_lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a tensor given the six unique tensor elements</p>\n<p>Given the six unique tensor elements (in the order: Dxx, Dxy, Dyy, Dxz,\nDyz, Dzz) returns a 3 by 3 tensor. All elements after the sixth are\nignored.</p>\n<section id=\"id535\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id535\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>D<span class=\"classifier\">array_like, (\u2026, &gt;6)</span></dt><dd><p>Unique elements of the tensors</p>\n</dd>\n</dl>\n</section>\n<section id=\"id536\">\n<h4>Returns<a class=\"headerlink\" href=\"#id536\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tensor<span class=\"classifier\">ndarray (\u2026, 3, 3)</span></dt><dd><p>3 by 3 tensors</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"lt-rows\">\n<h3>_lt_rows<a class=\"headerlink\" href=\"#lt-rows\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti._lt_rows\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">_lt_rows</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti._lt_rows\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>ndarray(shape, dtype=float, buffer=None, offset=0,</dt><dd><p>strides=None, order=None)</p>\n</dd>\n</dl>\n<p>An array object represents a multidimensional, homogeneous array\nof fixed-size items.  An associated data-type object describes the\nformat of each element in the array (its byte-order, how many bytes it\noccupies in memory, whether it is an integer, a floating point number,\nor something else, etc.)</p>\n<p>Arrays should be constructed using <cite>array</cite>, <cite>zeros</cite> or <cite>empty</cite> (refer\nto the See Also section below).  The parameters given here refer to\na low-level method (<cite>ndarray(\u2026)</cite>) for instantiating an array.</p>\n<p>For more information, refer to the <cite>numpy</cite> module and examine the\nmethods and attributes of an array.</p>\n<section id=\"id537\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id537\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>(for the __new__ method; see Notes below)</p>\n<dl class=\"simple\">\n<dt>shape<span class=\"classifier\">tuple of ints</span></dt><dd><p>Shape of created array.</p>\n</dd>\n<dt>dtype<span class=\"classifier\">data-type, optional</span></dt><dd><p>Any object that can be interpreted as a numpy data type.</p>\n</dd>\n<dt>buffer<span class=\"classifier\">object exposing buffer interface, optional</span></dt><dd><p>Used to fill the array with data.</p>\n</dd>\n<dt>offset<span class=\"classifier\">int, optional</span></dt><dd><p>Offset of array data in buffer.</p>\n</dd>\n<dt>strides<span class=\"classifier\">tuple of ints, optional</span></dt><dd><p>Strides of data in memory.</p>\n</dd>\n<dt>order<span class=\"classifier\">{\u2018C\u2019, \u2018F\u2019}, optional</span></dt><dd><p>Row-major (C-style) or column-major (Fortran-style) order.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id538\">\n<h4>Attributes<a class=\"headerlink\" href=\"#id538\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">ndarray</span></dt><dd><p>Transpose of the array.</p>\n</dd>\n<dt>data<span class=\"classifier\">buffer</span></dt><dd><p>The array\u2019s elements, in memory.</p>\n</dd>\n<dt>dtype<span class=\"classifier\">dtype object</span></dt><dd><p>Describes the format of the elements in the array.</p>\n</dd>\n<dt>flags<span class=\"classifier\">dict</span></dt><dd><p>Dictionary containing information related to memory use, e.g.,\n\u2018C_CONTIGUOUS\u2019, \u2018OWNDATA\u2019, \u2018WRITEABLE\u2019, etc.</p>\n</dd>\n<dt>flat<span class=\"classifier\">numpy.flatiter object</span></dt><dd><p>Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">x.flat</span> <span class=\"pre\">=</span> <span class=\"pre\">3</span></code> (See <cite>ndarray.flat</cite> for\nassignment examples; TODO).</p>\n</dd>\n<dt>imag<span class=\"classifier\">ndarray</span></dt><dd><p>Imaginary part of the array.</p>\n</dd>\n<dt>real<span class=\"classifier\">ndarray</span></dt><dd><p>Real part of the array.</p>\n</dd>\n<dt>size<span class=\"classifier\">int</span></dt><dd><p>Number of elements in the array.</p>\n</dd>\n<dt>itemsize<span class=\"classifier\">int</span></dt><dd><p>The memory use of each array element in bytes.</p>\n</dd>\n<dt>nbytes<span class=\"classifier\">int</span></dt><dd><p>The total number of bytes required to store the array data,\ni.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">itemsize</span> <span class=\"pre\">*</span> <span class=\"pre\">size</span></code>.</p>\n</dd>\n<dt>ndim<span class=\"classifier\">int</span></dt><dd><p>The array\u2019s number of dimensions.</p>\n</dd>\n<dt>shape<span class=\"classifier\">tuple of ints</span></dt><dd><p>Shape of the array.</p>\n</dd>\n<dt>strides<span class=\"classifier\">tuple of ints</span></dt><dd><p>The step-size required to move from one element to the next in\nmemory. For example, a contiguous <code class=\"docutils literal notranslate\"><span class=\"pre\">(3,</span> <span class=\"pre\">4)</span></code> array of type\n<code class=\"docutils literal notranslate\"><span class=\"pre\">int16</span></code> in C-order has strides <code class=\"docutils literal notranslate\"><span class=\"pre\">(8,</span> <span class=\"pre\">2)</span></code>.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">*</span> <span class=\"pre\">4</span></code>).</p>\n</dd>\n<dt>ctypes<span class=\"classifier\">ctypes object</span></dt><dd><p>Class containing properties of the array needed for interaction\nwith ctypes.</p>\n</dd>\n<dt>base<span class=\"classifier\">ndarray</span></dt><dd><p>If the array is a view into another array, that array is its <cite>base</cite>\n(unless that array is also a view).  The <cite>base</cite> array is where the\narray data is actually stored.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id539\">\n<h4>See Also<a class=\"headerlink\" href=\"#id539\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>array : Construct an array.\nzeros : Create an array, each element of which is zero.\nempty : Create an array, but leave its allocated memory unchanged (i.e.,</p>\n<blockquote>\n<div><p>it contains \u201cgarbage\u201d).</p>\n</div></blockquote>\n<p>dtype : Create a data-type.\nnumpy.typing.NDArray : An ndarray alias <a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-generic-type\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">generic</span></a></p>\n<blockquote>\n<div><p>w.r.t. its <cite>dtype.type &lt;numpy.dtype.type&gt;</cite>.</p>\n</div></blockquote>\n</section>\n<section id=\"id540\">\n<h4>Notes<a class=\"headerlink\" href=\"#id540\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>There are two modes of creating an array using <code class=\"docutils literal notranslate\"><span class=\"pre\">__new__</span></code>:</p>\n<ol class=\"arabic simple\">\n<li><p>If <cite>buffer</cite> is None, then only <cite>shape</cite>, <cite>dtype</cite>, and <cite>order</cite>\nare used.</p></li>\n<li><p>If <cite>buffer</cite> is an object exposing the buffer interface, then\nall keywords are interpreted.</p></li>\n</ol>\n<p>No <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method is needed because the array is fully initialized\nafter the <code class=\"docutils literal notranslate\"><span class=\"pre\">__new__</span></code> method.</p>\n</section>\n<section id=\"id541\">\n<h4>Examples<a class=\"headerlink\" href=\"#id541\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>These examples illustrate the low-level <cite>ndarray</cite> constructor.  Refer\nto the <cite>See Also</cite> section above for easier ways of constructing an\nndarray.</p>\n<p>First mode, <cite>buffer</cite> is None:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[0.0e+000, 0.0e+000], # random</span>\n<span class=\"go\">       [     nan, 2.5e-323]])</span>\n</pre></div>\n</div>\n<p>Second mode:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>           <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">itemsize</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"c1\"># offset = 1*itemsize, i.e. skip first element</span>\n<span class=\"go\">array([2, 3])</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"lt-cols\">\n<h3>_lt_cols<a class=\"headerlink\" href=\"#lt-cols\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti._lt_cols\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">_lt_cols</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti._lt_cols\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>ndarray(shape, dtype=float, buffer=None, offset=0,</dt><dd><p>strides=None, order=None)</p>\n</dd>\n</dl>\n<p>An array object represents a multidimensional, homogeneous array\nof fixed-size items.  An associated data-type object describes the\nformat of each element in the array (its byte-order, how many bytes it\noccupies in memory, whether it is an integer, a floating point number,\nor something else, etc.)</p>\n<p>Arrays should be constructed using <cite>array</cite>, <cite>zeros</cite> or <cite>empty</cite> (refer\nto the See Also section below).  The parameters given here refer to\na low-level method (<cite>ndarray(\u2026)</cite>) for instantiating an array.</p>\n<p>For more information, refer to the <cite>numpy</cite> module and examine the\nmethods and attributes of an array.</p>\n<section id=\"id542\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id542\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>(for the __new__ method; see Notes below)</p>\n<dl class=\"simple\">\n<dt>shape<span class=\"classifier\">tuple of ints</span></dt><dd><p>Shape of created array.</p>\n</dd>\n<dt>dtype<span class=\"classifier\">data-type, optional</span></dt><dd><p>Any object that can be interpreted as a numpy data type.</p>\n</dd>\n<dt>buffer<span class=\"classifier\">object exposing buffer interface, optional</span></dt><dd><p>Used to fill the array with data.</p>\n</dd>\n<dt>offset<span class=\"classifier\">int, optional</span></dt><dd><p>Offset of array data in buffer.</p>\n</dd>\n<dt>strides<span class=\"classifier\">tuple of ints, optional</span></dt><dd><p>Strides of data in memory.</p>\n</dd>\n<dt>order<span class=\"classifier\">{\u2018C\u2019, \u2018F\u2019}, optional</span></dt><dd><p>Row-major (C-style) or column-major (Fortran-style) order.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id543\">\n<h4>Attributes<a class=\"headerlink\" href=\"#id543\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">ndarray</span></dt><dd><p>Transpose of the array.</p>\n</dd>\n<dt>data<span class=\"classifier\">buffer</span></dt><dd><p>The array\u2019s elements, in memory.</p>\n</dd>\n<dt>dtype<span class=\"classifier\">dtype object</span></dt><dd><p>Describes the format of the elements in the array.</p>\n</dd>\n<dt>flags<span class=\"classifier\">dict</span></dt><dd><p>Dictionary containing information related to memory use, e.g.,\n\u2018C_CONTIGUOUS\u2019, \u2018OWNDATA\u2019, \u2018WRITEABLE\u2019, etc.</p>\n</dd>\n<dt>flat<span class=\"classifier\">numpy.flatiter object</span></dt><dd><p>Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">x.flat</span> <span class=\"pre\">=</span> <span class=\"pre\">3</span></code> (See <cite>ndarray.flat</cite> for\nassignment examples; TODO).</p>\n</dd>\n<dt>imag<span class=\"classifier\">ndarray</span></dt><dd><p>Imaginary part of the array.</p>\n</dd>\n<dt>real<span class=\"classifier\">ndarray</span></dt><dd><p>Real part of the array.</p>\n</dd>\n<dt>size<span class=\"classifier\">int</span></dt><dd><p>Number of elements in the array.</p>\n</dd>\n<dt>itemsize<span class=\"classifier\">int</span></dt><dd><p>The memory use of each array element in bytes.</p>\n</dd>\n<dt>nbytes<span class=\"classifier\">int</span></dt><dd><p>The total number of bytes required to store the array data,\ni.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">itemsize</span> <span class=\"pre\">*</span> <span class=\"pre\">size</span></code>.</p>\n</dd>\n<dt>ndim<span class=\"classifier\">int</span></dt><dd><p>The array\u2019s number of dimensions.</p>\n</dd>\n<dt>shape<span class=\"classifier\">tuple of ints</span></dt><dd><p>Shape of the array.</p>\n</dd>\n<dt>strides<span class=\"classifier\">tuple of ints</span></dt><dd><p>The step-size required to move from one element to the next in\nmemory. For example, a contiguous <code class=\"docutils literal notranslate\"><span class=\"pre\">(3,</span> <span class=\"pre\">4)</span></code> array of type\n<code class=\"docutils literal notranslate\"><span class=\"pre\">int16</span></code> in C-order has strides <code class=\"docutils literal notranslate\"><span class=\"pre\">(8,</span> <span class=\"pre\">2)</span></code>.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">*</span> <span class=\"pre\">4</span></code>).</p>\n</dd>\n<dt>ctypes<span class=\"classifier\">ctypes object</span></dt><dd><p>Class containing properties of the array needed for interaction\nwith ctypes.</p>\n</dd>\n<dt>base<span class=\"classifier\">ndarray</span></dt><dd><p>If the array is a view into another array, that array is its <cite>base</cite>\n(unless that array is also a view).  The <cite>base</cite> array is where the\narray data is actually stored.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id544\">\n<h4>See Also<a class=\"headerlink\" href=\"#id544\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>array : Construct an array.\nzeros : Create an array, each element of which is zero.\nempty : Create an array, but leave its allocated memory unchanged (i.e.,</p>\n<blockquote>\n<div><p>it contains \u201cgarbage\u201d).</p>\n</div></blockquote>\n<p>dtype : Create a data-type.\nnumpy.typing.NDArray : An ndarray alias <a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-generic-type\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">generic</span></a></p>\n<blockquote>\n<div><p>w.r.t. its <cite>dtype.type &lt;numpy.dtype.type&gt;</cite>.</p>\n</div></blockquote>\n</section>\n<section id=\"id545\">\n<h4>Notes<a class=\"headerlink\" href=\"#id545\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>There are two modes of creating an array using <code class=\"docutils literal notranslate\"><span class=\"pre\">__new__</span></code>:</p>\n<ol class=\"arabic simple\">\n<li><p>If <cite>buffer</cite> is None, then only <cite>shape</cite>, <cite>dtype</cite>, and <cite>order</cite>\nare used.</p></li>\n<li><p>If <cite>buffer</cite> is an object exposing the buffer interface, then\nall keywords are interpreted.</p></li>\n</ol>\n<p>No <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method is needed because the array is fully initialized\nafter the <code class=\"docutils literal notranslate\"><span class=\"pre\">__new__</span></code> method.</p>\n</section>\n<section id=\"id546\">\n<h4>Examples<a class=\"headerlink\" href=\"#id546\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>These examples illustrate the low-level <cite>ndarray</cite> constructor.  Refer\nto the <cite>See Also</cite> section above for easier ways of constructing an\nndarray.</p>\n<p>First mode, <cite>buffer</cite> is None:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[0.0e+000, 0.0e+000], # random</span>\n<span class=\"go\">       [     nan, 2.5e-323]])</span>\n</pre></div>\n</div>\n<p>Second mode:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>           <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">itemsize</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"c1\"># offset = 1*itemsize, i.e. skip first element</span>\n<span class=\"go\">array([2, 3])</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"lower-triangular\">\n<h3>lower_triangular<a class=\"headerlink\" href=\"#lower-triangular\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.lower_triangular\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">lower_triangular</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tensor</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the six lower triangular values of the tensor ordered as\n(Dxx, Dxy, Dyy, Dxz, Dyz, Dzz) and a dummy variable if b0 is not None.</p>\n<section id=\"id547\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id547\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tensor<span class=\"classifier\">array_like (\u2026, 3, 3)</span></dt><dd><p>a collection of 3, 3 diffusion tensors</p>\n</dd>\n<dt>b0<span class=\"classifier\">float</span></dt><dd><p>if b0 is not none log(b0) is returned as the dummy variable</p>\n</dd>\n</dl>\n</section>\n<section id=\"id548\">\n<h4>Returns<a class=\"headerlink\" href=\"#id548\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>D<span class=\"classifier\">ndarray</span></dt><dd><p>If b0 is none, then the shape will be (\u2026, 6) otherwise (\u2026, 7)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"decompose-tensor\">\n<h3>decompose_tensor<a class=\"headerlink\" href=\"#decompose-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.decompose_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">decompose_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tensor</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.decompose_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns eigenvalues and eigenvectors given a diffusion tensor</p>\n<p>Computes tensor eigen decomposition to calculate eigenvalues and\neigenvectors (Basser et al., 1994a).</p>\n<section id=\"id549\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id549\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tensor<span class=\"classifier\">array (\u2026, 3, 3)</span></dt><dd><p>Hermitian matrix representing a diffusion tensor.</p>\n</dd>\n<dt>min_diffusivity<span class=\"classifier\">float</span></dt><dd><p>Because negative eigenvalues are not physical and small eigenvalues,\nmuch smaller than the diffusion weighting, cause quite a lot of noise\nin metrics such as fa, diffusivity values smaller than\n<cite>min_diffusivity</cite> are replaced with <cite>min_diffusivity</cite>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id550\">\n<h4>Returns<a class=\"headerlink\" href=\"#id550\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>eigvals<span class=\"classifier\">array (\u2026, 3)</span></dt><dd><p>Eigenvalues from eigen decomposition of the tensor. Negative\neigenvalues are replaced by zero. Sorted from largest to smallest.</p>\n</dd>\n<dt>eigvecs<span class=\"classifier\">array (\u2026, 3, 3)</span></dt><dd><p>Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[\u2026, :, j] is associated with\neigvals[\u2026, j])</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"design-matrix\">\n<h3>design_matrix<a class=\"headerlink\" href=\"#design-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.design_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">design_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dtype</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.design_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs design matrix for DTI weighted least squares or\nleast squares fitting. (Basser et al., 1994a)</p>\n<section id=\"id551\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id551\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : A GradientTable class instance</p>\n<dl class=\"simple\">\n<dt>dtype<span class=\"classifier\">string</span></dt><dd><p>Parameter to control the dtype of returned designed matrix</p>\n</dd>\n</dl>\n</section>\n<section id=\"id552\">\n<h4>Returns<a class=\"headerlink\" href=\"#id552\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g,7)</span></dt><dd><p>Design matrix or B matrix assuming Gaussian distributed tensor model\ndesign_matrix[j, :] = (Bxx, Byy, Bzz, Bxy, Bxz, Byz, dummy)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"quantize-evecs\">\n<h3>quantize_evecs<a class=\"headerlink\" href=\"#quantize-evecs\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.quantize_evecs\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">quantize_evecs</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evecs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf_vertices</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.quantize_evecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the closest orientation of an evenly distributed sphere</p>\n<section id=\"id553\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id553\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>evecs : ndarray\nodf_vertices : None or ndarray</p>\n<blockquote>\n<div><p>If None, then set vertices from symmetric362 sphere.  Otherwise use\npassed ndarray as vertices</p>\n</div></blockquote>\n</section>\n<section id=\"id554\">\n<h4>Returns<a class=\"headerlink\" href=\"#id554\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>IN : ndarray</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"eig-from-lo-tri\">\n<h3>eig_from_lo_tri<a class=\"headerlink\" href=\"#eig-from-lo-tri\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.dti.eig_from_lo_tri\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.dti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">eig_from_lo_tri</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.dti.eig_from_lo_tri\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates tensor eigenvalues/eigenvectors from an array containing the\nlower diagonal form of the six unique tensor elements.</p>\n<section id=\"id555\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id555\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array_like (\u2026, 6)</span></dt><dd><p>diffusion tensors elements stored in lower triangular order</p>\n</dd>\n<dt>min_diffusivity<span class=\"classifier\">float</span></dt><dd><p>See decompose_tensor()</p>\n</dd>\n</dl>\n</section>\n<section id=\"id556\">\n<h4>Returns<a class=\"headerlink\" href=\"#id556\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dti_params<span class=\"classifier\">array (\u2026, 12)</span></dt><dd><p>Eigen-values and eigen-vectors of the same array.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"forecastmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastModel\" title=\"dipy.reconst.forecast.ForecastModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForecastModel</span></code></a><a class=\"headerlink\" href=\"#forecastmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ForecastModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_lb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dec_alg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'CSD'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_csd</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a>, <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<p>Fiber ORientation Estimated using Continuous Axially Symmetric Tensors\n(FORECAST) [1,2,3]_. FORECAST is a Spherical Deconvolution reconstruction\nmodel for multi-shell diffusion data which enables the calculation of a\nvoxel adaptive response function using the Spherical Mean Technique (SMT)\n[2,3]_.</p>\n<p>With FORECAST it is possible to calculate crossing invariant parallel\ndiffusivity, perpendicular diffusivity, mean diffusivity, and fractional\nanisotropy <a href=\"#id1484\"><span class=\"problematic\" id=\"id557\">[2]_</span></a></p>\n<section id=\"id558\">\n<h4>References<a class=\"headerlink\" href=\"#id558\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id559\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Anderson A. W., \u201cMeasurement of Fiber Orientation Distributions\nUsing High Angular Resolution Diffusion Imaging\u201d, Magnetic\nResonance in Medicine, 2005.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id560\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Kaden E. et al., \u201cQuantitative Mapping of the Per-Axon Diffusion\nCoefficients in Brain White Matter\u201d, Magnetic Resonance in\nMedicine, 2016.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id561\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Zucchelli E. et al., \u201cA generalized SMT-based framework for\nDiffusion MRI microstructural model estimation\u201d, MICCAI Workshop\non Computational DIFFUSION MRI (CDMRI), 2017.</p>\n</aside>\n</aside>\n</section>\n<section id=\"id562\">\n<h4>Notes<a class=\"headerlink\" href=\"#id562\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The implementation of FORECAST may require CVXPY (<a class=\"reference external\" href=\"http://www.cvxpy.org/\">http://www.cvxpy.org/</a>).</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_lb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dec_alg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'CSD'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambda_csd</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Analytical and continuous modeling of the diffusion signal with\nrespect to the FORECAST basis [1,2,3]_.\nThis implementation is a modification of the original FORECAST\nmodel presented in <a href=\"#id1485\"><span class=\"problematic\" id=\"id563\">[1]_</span></a> adapted for multi-shell data as in [2,3]_ .\n\nThe main idea is to model the diffusion signal as the combination of a\nsingle fiber response function <span class=\"math notranslate nohighlight\">\\(F(\\mathbf{b})\\)</span> times the fODF\n<span class=\"math notranslate nohighlight\">\\(\\rho(\\mathbf{v})\\)</span>\n\n..math::\n    :nowrap:\n        begin{equation}\n            E(mathbf{b}) = int_{mathbf{v} in mathcal{S}^2} rho(mathbf{v}) F({mathbf{b}} | mathbf{v}) d mathbf{v}\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\mathbf{b}\\)</span> is the b-vector (b-value times gradient direction)\nand <span class=\"math notranslate nohighlight\">\\(\\mathbf{v}\\)</span> is an unit vector representing a fiber direction.\n\nIn FORECAST <span class=\"math notranslate nohighlight\">\\(\\rho\\)</span> is modeled using real symmetric Spherical Harmonics\n(SH) and <span class=\"math notranslate nohighlight\">\\(F(\\mathbf(b))\\)</span> is an axially symmetric tensor.\n\n\nParameters\n\u2014\u2014\u2014-\ngtab : GradientTable,\n    gradient directions and bvalues container class.\nsh_order : unsigned int,\n    an even integer that represent the SH order of the basis (max 12)\nlambda_lb: float,\n    Laplace-Beltrami regularization weight.\ndec_alg : str,\n    Spherical deconvolution algorithm. The possible values are Weighted Least Squares (\u2018WLS\u2019),\n    Positivity Constraints using CVXPY (\u2018POS\u2019) and the Constraint\n    Spherical Deconvolution algorithm (\u2018CSD\u2019). Default is \u2018CSD\u2019.\nsphere : array, shape (N,3),\n    sphere points where to enforce positivity when \u2018POS\u2019 or \u2018CSD\u2019\n    dec_alg are selected.\nlambda_csd : float,\n    CSD regularization weight.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Anderson A. W., \u201cMeasurement of Fiber Orientation Distributions\n       Using High Angular Resolution Diffusion Imaging\u201d, Magnetic\n       Resonance in Medicine, 2005.\n\n.. [2] Kaden E. et al., \u201cQuantitative Mapping of the Per-Axon Diffusion\n       Coefficients in Brain White Matter\u201d, Magnetic Resonance in\n       Medicine, 2016.\n\n.. [3] Zucchelli M. et al., \u201cA generalized SMT-based framework for\n       Diffusion MRI microstructural model estimation\u201d, MICCAI Workshop\n       on Computational DIFFUSION MRI (CDMRI), 2017.\n\nExamples\n\u2014\u2014\u2013\nIn this example, where the data, gradient table and sphere tessellation\nused for reconstruction are provided, we model the diffusion signal\nwith respect to the FORECAST and compute the fODF, parallel and\nperpendicular diffusivity.\n\n&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; from dipy.data import default_sphere, get_3shell_gtab\n&gt;&gt;&gt; gtab = get_3shell_gtab()\n&gt;&gt;&gt; from dipy.sims.voxel import multi_tensor\n&gt;&gt;&gt; mevals = np.array(([0.0017, 0.0003, 0.0003],\n\u2026                    [0.0017, 0.0003, 0.0003]))\n&gt;&gt;&gt; angl = [(0, 0), (60, 0)]\n&gt;&gt;&gt; data, sticks = multi_tensor(gtab,\n\u2026                             mevals,\n\u2026                             S0=100.0,\n\u2026                             angles=angl,\n\u2026                             fractions=[50, 50],\n\u2026                             snr=None)\n&gt;&gt;&gt; from dipy.reconst.forecast import ForecastModel\n&gt;&gt;&gt; from dipy.reconst.shm import descoteaux07_legacy_msg\n&gt;&gt;&gt; with warnings.catch_warnings():\n\u2026     warnings.filterwarnings(\n\u2026         \u201cignore\u201d, message=descoteaux07_legacy_msg,\n\u2026         category=PendingDeprecationWarning)\n\u2026     fm = ForecastModel(gtab, sh_order=6)\n&gt;&gt;&gt; f_fit = fm.fit(data)\n&gt;&gt;&gt; d_par = f_fit.dpar\n&gt;&gt;&gt; d_perp = f_fit.dperp\n&gt;&gt;&gt; with warnings.catch_warnings():\n\u2026     warnings.filterwarnings(\n\u2026         \u201cignore\u201d, message=descoteaux07_legacy_msg,\n\u2026         category=PendingDeprecationWarning)\n\u2026     fodf = f_fit.odf(default_sphere)</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"forecastfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit\" title=\"dipy.reconst.forecast.ForecastFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForecastFit</span></code></a><a class=\"headerlink\" href=\"#forecastfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ForecastFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d_par</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d_perp</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d_par</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d_perp</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates diffusion properties for a single voxel</p>\n<section id=\"id564\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id564\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>AnalyticalModel</p>\n</dd>\n<dt>data<span class=\"classifier\">1d ndarray,</span></dt><dd><p>fitted data</p>\n</dd>\n<dt>sh_coef<span class=\"classifier\">1d ndarray,</span></dt><dd><p>forecast sh coefficients</p>\n</dd>\n<dt>d_par<span class=\"classifier\">float,</span></dt><dd><p>parallel diffusivity</p>\n</dd>\n<dt>d_perp<span class=\"classifier\">float,</span></dt><dd><p>perpendicular diffusivity</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.dpar\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">dpar</span></span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.dpar\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The parallel diffusivity</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.dperp\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">dperp</span></span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.dperp\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The perpendicular diffusivity</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.fractional_anisotropy\">\n<span class=\"sig-name descname\"><span class=\"pre\">fractional_anisotropy</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the fractional anisotropy.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.mean_diffusivity\">\n<span class=\"sig-name descname\"><span class=\"pre\">mean_diffusivity</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.mean_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the mean diffusivity.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">clip_negative</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the fODF for a given discrete sphere.</p>\n<section id=\"id565\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id565\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere,</span></dt><dd><p>the odf sphere</p>\n</dd>\n<dt>clip_negative<span class=\"classifier\">boolean, optional</span></dt><dd><p>if True clip the negative odf values to 0, default True</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the fODF for a given discrete sphere.</p>\n<section id=\"id566\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id566\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable, optional</span></dt><dd><p>gradient directions and bvalues container class.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float, optional</span></dt><dd><p>the signal at b-value=0</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.ForecastFit.sh_coeff\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">sh_coeff</span></span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.ForecastFit.sh_coeff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The FORECAST SH coefficients</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"find-signal-means\">\n<h3>find_signal_means<a class=\"headerlink\" href=\"#find-signal-means\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.find_signal_means\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">find_signal_means</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b_unique</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data_norm</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rho</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lb_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">w</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.find_signal_means\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the mean signal for each shell.</p>\n<section id=\"id567\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id567\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>b_unique<span class=\"classifier\">1d ndarray,</span></dt><dd><p>unique b-values in a vector excluding zero</p>\n</dd>\n<dt>data_norm<span class=\"classifier\">1d ndarray,</span></dt><dd><p>normalized diffusion signal</p>\n</dd>\n<dt>bvals<span class=\"classifier\">1d ndarray,</span></dt><dd><p>the b-values</p>\n</dd>\n<dt>rho<span class=\"classifier\">2d ndarray,</span></dt><dd><p>SH basis matrix for fitting the signal on each shell</p>\n</dd>\n<dt>lb_matrix<span class=\"classifier\">2d ndarray,</span></dt><dd><p>Laplace-Beltrami regularization matrix</p>\n</dd>\n<dt>w<span class=\"classifier\">float,</span></dt><dd><p>weight for the Laplace-Beltrami regularization</p>\n</dd>\n</dl>\n</section>\n<section id=\"id568\">\n<h4>Returns<a class=\"headerlink\" href=\"#id568\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>means<span class=\"classifier\">1d ndarray</span></dt><dd><p>the average of the signal for each b-values</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"forecast-error-func\">\n<h3>forecast_error_func<a class=\"headerlink\" href=\"#forecast-error-func\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.forecast_error_func\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">forecast_error_func</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b_unique</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">E</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.forecast_error_func\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the difference between the mean signal calculated using\nthe parameter vector x and the average signal E using FORECAST and SMT</p>\n</dd></dl>\n\n</section>\n<section id=\"psi-l\">\n<h3>psi_l<a class=\"headerlink\" href=\"#psi-l\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.psi_l\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">psi_l</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.psi_l\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"forecast-matrix\">\n<h3>forecast_matrix<a class=\"headerlink\" href=\"#forecast-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.forecast_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">forecast_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d_par</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d_perp</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvals</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.forecast_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the FORECAST radial matrix</p>\n</dd></dl>\n\n</section>\n<section id=\"rho-matrix\">\n<h3>rho_matrix<a class=\"headerlink\" href=\"#rho-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.rho_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">rho_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vecs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.rho_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the SH matrix <span class=\"math notranslate nohighlight\">\\(\\rho\\)</span></p>\n</dd></dl>\n\n</section>\n<section id=\"lb-forecast\">\n<h3>lb_forecast<a class=\"headerlink\" href=\"#lb-forecast\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.forecast.lb_forecast\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.forecast.</span></span><span class=\"sig-name descname\"><span class=\"pre\">lb_forecast</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.forecast.lb_forecast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the Laplace-Beltrami regularization matrix for FORECAST</p>\n</dd></dl>\n\n</section>\n<section id=\"freewatertensormodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel\" title=\"dipy.reconst.fwdti.FreeWaterTensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel</span></code></a><a class=\"headerlink\" href=\"#freewatertensormodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">FreeWaterTensorModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'NLS'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>Class for the Free Water Elimination Diffusion Tensor Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'NLS'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Free Water Diffusion Tensor Model <a href=\"#id1486\"><span class=\"problematic\" id=\"id569\">[1]_</span></a>.</p>\n<section id=\"id570\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id570\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance\nfit_method : str or callable</p>\n<blockquote>\n<div><p>str can be one of the following:</p>\n<dl class=\"simple\">\n<dt>\u2018WLS\u2019 for weighted linear least square fit according to <a href=\"#id1487\"><span class=\"problematic\" id=\"id571\">[1]_</span></a></dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">fwdti.wls_iter()</span></code></p>\n</dd>\n<dt>\u2018NLS\u2019 for non-linear least square fit according to <a href=\"#id1488\"><span class=\"problematic\" id=\"id572\">[1]_</span></a></dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">fwdti.nls_iter()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id573\"><span class=\"problematic\" id=\"id574\">*</span></a>args, <a href=\"#id575\"><span class=\"problematic\" id=\"id576\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>args, kwargs<span class=\"classifier\">arguments and key-word arguments passed to the</span></dt><dd><p>fit_method. See fwdti.wls_iter, fwdti.nls_iter for\ndetails</p>\n</dd>\n</dl>\n</section>\n<section id=\"id577\">\n<h4>References<a class=\"headerlink\" href=\"#id577\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id578\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Henriques, R.N., Rokem, A., Garyfallidis, E., St-Jean, S.,\nPeterson E.T., Correia, M.M., 2017. [Re] Optimization of a free\nwater elimination two-compartment model for diffusion tensor\nimaging. ReScience volume 3, issue 1, article number 2</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fwdti_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given\nparameters.</p>\n<section id=\"id579\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id579\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>fwdti_params<span class=\"classifier\">(\u2026, 13) ndarray</span></dt><dd><p>The last dimension should have 13 parameters: the 12 tensor\nparameters (3 eigenvalues, followed by the 3 corresponding\neigenvectors) and the free water volume fraction.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float or ndarray</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</section>\n<section id=\"id580\">\n<h4>Returns<a class=\"headerlink\" href=\"#id580\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">(\u2026, N) ndarray</span></dt><dd><p>Simulated signal based on the free water DTI model</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"freewatertensorfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit\" title=\"dipy.reconst.fwdti.FreeWaterTensorFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit</span></code></a><a class=\"headerlink\" href=\"#freewatertensorfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">FreeWaterTensorFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit\" title=\"dipy.reconst.dti.TensorFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code></a></p>\n<p>Class for fitting the Free Water Tensor Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a FreeWaterTensorFit class instance.\nSince the free water tensor model is an extension of DTI, class\ninstance is defined as subclass of the TensorFit from dti.py</p>\n<section id=\"id581\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id581\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>model<span class=\"classifier\">FreeWaterTensorModel Class instance</span></dt><dd><p>Class instance containing the free water tensor model for the fit</p>\n</dd>\n<dt>model_params<span class=\"classifier\">ndarray (x, y, z, 13) or (n, 13)</span></dt><dd><p>All parameters estimated from the free water tensor model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</p></li>\n<li><p>The volume fraction of the free water compartment</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n<section id=\"id582\">\n<h4>References<a class=\"headerlink\" href=\"#id582\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id583\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Henriques, R.N., Rokem, A., Garyfallidis, E., St-Jean, S.,\nPeterson E.T., Correia, M.M., 2017. [Re] Optimization of a free\nwater elimination two-compartment model for diffusion tensor\nimaging. ReScience volume 3, issue 1, article number 2</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorFit.f\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">f</span></span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit.f\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the free water diffusion volume fraction f</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.FreeWaterTensorFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a free water tensor model fit, predict the signal on the\nvertices of a gradient table</p>\n<section id=\"id584\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id584\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">a GradientTable class instance</span></dt><dd><p>The gradient table for this prediction</p>\n</dd>\n<dt>S0<span class=\"classifier\">float array</span></dt><dd><p>The mean non-diffusion weighted signal in each voxel. Default: 1 in\nall voxels.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id585\">\n<h4>Returns<a class=\"headerlink\" href=\"#id585\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">(\u2026, N) ndarray</span></dt><dd><p>Simulated signal based on the free water DTI model</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"fwdti-prediction\">\n<h3>fwdti_prediction<a class=\"headerlink\" href=\"#fwdti-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.fwdti_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">fwdti_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Diso</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.fwdti_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Signal prediction given the free water DTI model parameters.\n\nParameters\n\u2014\u2014\u2014-\nparams : (\u2026, 13) ndarray\n    Model parameters. The last dimension should have the 12 tensor\n    parameters (3 eigenvalues, followed by the 3 corresponding\n    eigenvectors) and the volume fraction of the free water compartment.\ngtab : a GradientTable class instance\n    The gradient table for this prediction\nS0 : float or ndarray\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\nDiso : float, optional\n    Value of the free water isotropic diffusion. Default is set to 3e-3\n    <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>. Please adjust this value if you are assuming different\n    units of diffusion.\n\nReturns\n\u2014\u2014-\nS : (\u2026, N) ndarray\n    Simulated signal based on the free water DTI model\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n<span class=\"math notranslate nohighlight\">\\(S(\\theta, b) = S_0 * [(1-f) * e^{-b ADC} + f * e^{-b D_{iso}]\\)</span>, where\n<span class=\"math notranslate nohighlight\">\\(ADC = \\theta Q \\theta^T\\)</span>, <span class=\"math notranslate nohighlight\">\\(\\theta\\)</span> is a unit vector pointing at any\ndirection on the sphere for which a signal is to be predicted, <span class=\"math notranslate nohighlight\">\\(b\\)</span> is the b\nvalue provided in the GradientTable input for that direction, <span class=\"math notranslate nohighlight\">\\(Q\\)</span> is the\nquadratic form of the tensor determined by the input parameters, <span class=\"math notranslate nohighlight\">\\(f\\)</span> is the\nfree water diffusion compartment, <span class=\"math notranslate nohighlight\">\\(D_{iso}\\)</span> is the free water diffusivity\nwhich is equal to $3 * 10^{-3} mm^{2}s^{-1} <a href=\"#id1489\"><span class=\"problematic\" id=\"id586\">[1]_</span></a>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Henriques, R.N., Rokem, A., Garyfallidis, E., St-Jean, S.,\n       Peterson E.T., Correia, M.M., 2017. [Re] Optimization of a free\n       water elimination two-compartment model for diffusion tensor\n       imaging. ReScience volume 3, issue 1, article number 2</p>\n</dd></dl>\n\n</section>\n<section id=\"wls-iter\">\n<h3>wls_iter<a class=\"headerlink\" href=\"#wls-iter\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.wls_iter\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">wls_iter</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sig</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Diso</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mdreg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0027</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-06</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">piterations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">3</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.wls_iter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies weighted linear least squares fit of the water free elimination\nmodel to single voxel signals.\n\nParameters\n\u2014\u2014\u2014-\ndesign_matrix : array (g, 7)\n    Design matrix holding the covariants used to solve for the regression\n    coefficients.\nsig : array (g, )\n    Diffusion-weighted signal for a single voxel data.\nS0 : float\n    Non diffusion weighted signal (i.e. signal for b-value=0).\nDiso : float, optional\n    Value of the free water isotropic diffusion. Default is set to 3e-3\n    <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>. Please adjust this value if you are assuming different\n    units of diffusion.\n mdreg : float, optimal\n    DTI\u2019s mean diffusivity regularization threshold. If standard DTI\n    diffusion tensor\u2019s mean diffusivity is almost near the free water\n    diffusion value, the diffusion signal is assumed to be only free water\n    diffusion (i.e. volume fraction will be set to 1 and tissue\u2019s diffusion\n    parameters are set to zero). Default md_reg is 2.7e-3 <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>\n    (corresponding to 90% of the free water diffusion value).\nmin_signal : float\n    The minimum signal value. Needs to be a strictly positive\n    number. Default: minimal signal in the data provided to <cite>fit</cite>.\npiterations : inter, optional\n    Number of iterations used to refine the precision of f. Default is set\n    to 3 corresponding to a precision of 0.01.\n\nReturns\n\u2014\u2014-\nAll parameters estimated from the free water tensor model.\nParameters are ordered as follows:\n    1) Three diffusion tensor\u2019s eigenvalues\n    2) Three lines of the eigenvector matrix each containing the\n       first, second and third coordinates of the eigenvector\n    3) The volume fraction of the free water compartment</p>\n</dd></dl>\n\n</section>\n<section id=\"id587\">\n<h3>wls_fit_tensor<a class=\"headerlink\" href=\"#id587\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.wls_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">wls_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Diso</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-06</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">piterations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">3</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mdreg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0027</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.wls_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes weighted least squares (WLS) fit to calculate self-diffusion\ntensor using a linear regression model <a href=\"#id1490\"><span class=\"problematic\" id=\"id588\">[1]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\ngtab : a GradientTable class instance\n    The gradient table containing diffusion acquisition parameters.\ndata : ndarray ([X, Y, Z, \u2026], g)\n    Data or response variables holding the data. Note that the last\n    dimension should contain the data. It makes no copies of data.\nDiso : float, optional\n    Value of the free water isotropic diffusion. Default is set to 3e-3\n    <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>. Please adjust this value if you are assuming different\n    units of diffusion.\nmask : array, optional\n    A boolean array used to mark the coordinates in the data that should\n    be analyzed that has the shape data.shape[:-1]\nmin_signal : float\n    The minimum signal value. Needs to be a strictly positive\n    number. Default: 1.0e-6.\npiterations : inter, optional\n    Number of iterations used to refine the precision of f. Default is set\n    to 3 corresponding to a precision of 0.01.\nmdreg : float, optimal\n    DTI\u2019s mean diffusivity regularization threshold. If standard DTI\n    diffusion tensor\u2019s mean diffusivity is almost near the free water\n    diffusion value, the diffusion signal is assumed to be only free water\n    diffusion (i.e. volume fraction will be set to 1 and tissue\u2019s diffusion\n    parameters are set to zero). Default md_reg is 2.7e-3 <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>\n    (corresponding to 90% of the free water diffusion value).\n\nReturns\n\u2014\u2014-\nfw_params : ndarray (x, y, z, 13)\n    Matrix containing in the last dimension the free water model parameters\n    in the following order:\n        1) Three diffusion tensor\u2019s eigenvalues\n        2) Three lines of the eigenvector matrix each containing the\n           first, second and third coordinates of the eigenvector\n        3) The volume fraction of the free water compartment.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Henriques, R.N., Rokem, A., Garyfallidis, E., St-Jean, S.,\n       Peterson E.T., Correia, M.M., 2017. [Re] Optimization of a free\n       water elimination two-compartment model for diffusion tensor\n       imaging. ReScience volume 3, issue 1, article number 2</p>\n</dd></dl>\n\n</section>\n<section id=\"nls-iter\">\n<h3>nls_iter<a class=\"headerlink\" href=\"#nls-iter\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.nls_iter\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">nls_iter</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sig</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Diso</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mdreg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0027</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-06</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cholesky</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">f_transform</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">jac</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.nls_iter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies non linear least squares fit of the water free elimination\nmodel to single voxel signals.\n\nParameters\n\u2014\u2014\u2014-\ndesign_matrix : array (g, 7)\n    Design matrix holding the covariants used to solve for the regression\n    coefficients.\nsig : array (g, )\n    Diffusion-weighted signal for a single voxel data.\nS0 : float\n    Non diffusion weighted signal (i.e. signal for b-value=0).\nDiso : float, optional\n    Value of the free water isotropic diffusion. Default is set to 3e-3\n    <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>. Please adjust this value if you are assuming different\n    units of diffusion.\nmdreg : float, optimal\n    DTI\u2019s mean diffusivity regularization threshold. If standard DTI\n    diffusion tensor\u2019s mean diffusivity is almost near the free water\n    diffusion value, the diffusion signal is assumed to be only free water\n    diffusion (i.e. volume fraction will be set to 1 and tissue\u2019s diffusion\n    parameters are set to zero). Default md_reg is 2.7e-3 <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>\n    (corresponding to 90% of the free water diffusion value).\nmin_signal : float\n    The minimum signal value. Needs to be a strictly positive\n    number.\ncholesky : bool, optional\n    If true it uses Cholesky decomposition to insure that diffusion tensor\n    is positive define.\n    Default: False\nf_transform : bool, optional\n    If true, the water volume fractions is converted during the convergence\n    procedure to ft = arcsin(2*f - 1) + pi/2, insuring f estimates between\n    0 and 1.\n    Default: True\njac : bool\n    Use the Jacobian? Default: False\nweighting: str, optional\n    the weighting scheme to use in considering the\n    squared-error. Default behavior is to use uniform weighting. Other\n    options: \u2018sigma\u2019 \u2018gmm\u2019\nsigma: float, optional\n    If the \u2018sigma\u2019 weighting scheme is used, a value of sigma needs to be\n    provided here. According to <a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/restore_dti/#chang2005\" id=\"id589\"><span>[Chang2005]</span></a>, a good value to use is\n    1.5267 * std(background_noise), where background_noise is estimated\n    from some part of the image known to contain no signal (only noise).\n\nReturns\n\u2014\u2014-\nAll parameters estimated from the free water tensor model.\nParameters are ordered as follows:\n    1) Three diffusion tensor\u2019s eigenvalues\n    2) Three lines of the eigenvector matrix each containing the\n       first, second and third coordinates of the eigenvector\n    3) The volume fraction of the free water compartment.</p>\n</dd></dl>\n\n</section>\n<section id=\"nls-fit-tensor\">\n<h3>nls_fit_tensor<a class=\"headerlink\" href=\"#nls-fit-tensor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.nls_fit_tensor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">nls_fit_tensor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Diso</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mdreg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0027</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-06</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">f_transform</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cholesky</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">jac</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigma</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.nls_fit_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the water elimination tensor model using the non-linear least-squares.\n\nParameters\n\u2014\u2014\u2014-\ngtab : a GradientTable class instance\n    The gradient table containing diffusion acquisition parameters.\ndata : ndarray ([X, Y, Z, \u2026], g)\n    Data or response variables holding the data. Note that the last\n    dimension should contain the data. It makes no copies of data.\nmask : array, optional\n    A boolean array used to mark the coordinates in the data that should\n    be analyzed that has the shape data.shape[:-1]\nDiso : float, optional\n    Value of the free water isotropic diffusion. Default is set to 3e-3\n    <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>. Please adjust this value if you are assuming different\n    units of diffusion.\nmdreg : float, optimal\n    DTI\u2019s mean diffusivity regularization threshold. If standard DTI\n    diffusion tensor\u2019s mean diffusivity is almost near the free water\n    diffusion value, the diffusion signal is assumed to be only free water\n    diffusion (i.e. volume fraction will be set to 1 and tissue\u2019s diffusion\n    parameters are set to zero). Default md_reg is 2.7e-3 <span class=\"math notranslate nohighlight\">\\(mm^{2}.s^{-1}\\)</span>\n    (corresponding to 90% of the free water diffusion value).\nmin_signal : float\n    The minimum signal value. Needs to be a strictly positive\n    number. Default: 1.0e-6.\nf_transform : bool, optional\n    If true, the water volume fractions is converted during the convergence\n    procedure to ft = arcsin(2*f - 1) + pi/2, insuring f estimates between\n    0 and 1.\n    Default: True\ncholesky : bool, optional\n    If true it uses Cholesky decomposition to insure that diffusion tensor\n    is positive define.\n    Default: False\njac : bool\n    Use the Jacobian? Default: False\nweighting: str, optional\n    the weighting scheme to use in considering the\n    squared-error. Default behavior is to use uniform weighting. Other\n    options: \u2018sigma\u2019 \u2018gmm\u2019\nsigma: float, optional\n    If the \u2018sigma\u2019 weighting scheme is used, a value of sigma needs to be\n    provided here. According to <a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/restore_dti/#chang2005\" id=\"id590\"><span>[Chang2005]</span></a>, a good value to use is\n    1.5267 * std(background_noise), where background_noise is estimated\n    from some part of the image known to contain no signal (only noise).\n\nReturns\n\u2014\u2014-\nfw_params : ndarray (x, y, z, 13)\n    Matrix containing in the dimension the free water model parameters in\n    the following order:\n        1) Three diffusion tensor\u2019s eigenvalues\n        2) Three lines of the eigenvector matrix each containing the\n           first, second and third coordinates of the eigenvector\n        3) The volume fraction of the free water compartment</p>\n</dd></dl>\n\n</section>\n<section id=\"lower-triangular-to-cholesky\">\n<h3>lower_triangular_to_cholesky<a class=\"headerlink\" href=\"#lower-triangular-to-cholesky\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.lower_triangular_to_cholesky\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">lower_triangular_to_cholesky</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tensor_elements</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.lower_triangular_to_cholesky\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs Cholesky decomposition of the diffusion tensor</p>\n<section id=\"id591\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id591\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tensor_elements<span class=\"classifier\">array (6,)</span></dt><dd><p>Array containing the six elements of diffusion tensor\u2019s lower\ntriangular.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id592\">\n<h4>Returns<a class=\"headerlink\" href=\"#id592\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>cholesky_elements<span class=\"classifier\">array (6,)</span></dt><dd><p>Array containing the six Cholesky\u2019s decomposition elements\n(R0, R1, R2, R3, R4, R5) <a href=\"#id1491\"><span class=\"problematic\" id=\"id593\">[1]_</span></a>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id594\">\n<h4>References<a class=\"headerlink\" href=\"#id594\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id595\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Koay, C.G., Carew, J.D., Alexander, A.L., Basser, P.J.,\nMeyerand, M.E., 2006. Investigation of anomalous estimates of\ntensor-derived quantities in diffusion tensor imaging. Magnetic\nResonance in Medicine, 55(4), 930-936. doi:10.1002/mrm.20832</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"cholesky-to-lower-triangular\">\n<h3>cholesky_to_lower_triangular<a class=\"headerlink\" href=\"#cholesky-to-lower-triangular\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.fwdti.cholesky_to_lower_triangular\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.fwdti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">cholesky_to_lower_triangular</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.fwdti.cholesky_to_lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert Cholesky decomposition elements to the diffusion tensor elements</p>\n<section id=\"id596\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id596\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>R<span class=\"classifier\">array (6,)</span></dt><dd><p>Array containing the six Cholesky\u2019s decomposition elements\n(R0, R1, R2, R3, R4, R5) <a href=\"#id1492\"><span class=\"problematic\" id=\"id597\">[1]_</span></a>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id598\">\n<h4>Returns<a class=\"headerlink\" href=\"#id598\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tensor_elements<span class=\"classifier\">array (6,)</span></dt><dd><p>Array containing the six elements of diffusion tensor\u2019s lower\ntriangular.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id599\">\n<h4>References<a class=\"headerlink\" href=\"#id599\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id600\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Koay, C.G., Carew, J.D., Alexander, A.L., Basser, P.J.,\nMeyerand, M.E., 2006. Investigation of anomalous estimates of\ntensor-derived quantities in diffusion tensor imaging. Magnetic\nResonance in Medicine, 55(4), 930-936. doi:10.1002/mrm.20832</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"generalizedqsamplingmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel\" title=\"dipy.reconst.gqi.GeneralizedQSamplingModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingModel</span></code></a><a class=\"headerlink\" href=\"#generalizedqsamplingmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.GeneralizedQSamplingModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">GeneralizedQSamplingModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'gqi2'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalize_peaks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a>, <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.GeneralizedQSamplingModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'gqi2'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sampling_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalize_peaks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generalized Q-Sampling Imaging <a href=\"#id1493\"><span class=\"problematic\" id=\"id601\">[1]_</span></a></p>\n<p>This model has the same assumptions as the DSI method i.e. Cartesian\ngrid sampling in q-space and fast gradient switching.</p>\n<p>Implements equations 2.14 from <a href=\"#id1494\"><span class=\"problematic\" id=\"id602\">[2]_</span></a> for standard GQI and equation 2.16\nfrom <a href=\"#id1495\"><span class=\"problematic\" id=\"id603\">[2]_</span></a> for GQI2. You can think of GQI2 as an analytical solution of\nthe DSI ODF.</p>\n<section id=\"id604\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id604\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">object,</span></dt><dd><p>GradientTable</p>\n</dd>\n<dt>method<span class=\"classifier\">str,</span></dt><dd><p>\u2018standard\u2019 or \u2018gqi2\u2019</p>\n</dd>\n<dt>sampling_length<span class=\"classifier\">float,</span></dt><dd><p>diffusion sampling length (lambda in eq. 2.14 and 2.16)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id605\">\n<h4>References<a class=\"headerlink\" href=\"#id605\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id606\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Yeh F-C et al., \u201cGeneralized Q-Sampling Imaging\u201d, IEEE TMI, 2010</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id607\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E, \u201cTowards an accurate brain tractography\u201d, PhD</p>\n</aside>\n</aside>\n<p>thesis, University of Cambridge, 2012.</p>\n</section>\n<section id=\"id608\">\n<h4>Notes<a class=\"headerlink\" href=\"#id608\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>As of version 0.9, range of the sampling length in GQI2 has changed\nto match the same scale used in the \u2018standard\u2019 method <a href=\"#id1496\"><span class=\"problematic\" id=\"id609\">[1]_</span></a>. This\nmeans that the value of <cite>sampling_length</cite> should be approximately\n1 - 1.3 (see <a href=\"#id1497\"><span class=\"problematic\" id=\"id610\">[1]_</span></a>, pg. 1628).</p>\n</section>\n<section id=\"id611\">\n<h4>Examples<a class=\"headerlink\" href=\"#id611\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Here we create an example where we provide the data, a gradient table\nand a reconstruction sphere and calculate the ODF for the first\nvoxel in the data.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">dsi_voxels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">dsi_voxels</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.subdivide_octahedron</span> <span class=\"kn\">import</span> <span class=\"n\">create_unit_sphere</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">create_unit_sphere</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.gqi</span> <span class=\"kn\">import</span> <span class=\"n\">GeneralizedQSamplingModel</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gq</span> <span class=\"o\">=</span> <span class=\"n\">GeneralizedQSamplingModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gqi2&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">voxel_signal</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odf</span> <span class=\"o\">=</span> <span class=\"n\">gq</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">voxel_signal</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"id612\">\n<h4>See Also<a class=\"headerlink\" href=\"#id612\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>dipy.reconst.dsi.DiffusionSpectrumModel</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.GeneralizedQSamplingModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"generalizedqsamplingfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit\" title=\"dipy.reconst.gqi.GeneralizedQSamplingFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingFit</span></code></a><a class=\"headerlink\" href=\"#generalizedqsamplingfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.GeneralizedQSamplingFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">GeneralizedQSamplingFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.GeneralizedQSamplingFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates PDF and ODF for a single voxel</p>\n<section id=\"id613\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id613\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>DiffusionSpectrumModel</p>\n</dd>\n<dt>data<span class=\"classifier\">1d ndarray,</span></dt><dd><p>signal values</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.GeneralizedQSamplingFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the discrete ODF for a given discrete sphere.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"normalize-qa\">\n<h3>normalize_qa<a class=\"headerlink\" href=\"#normalize-qa\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.normalize_qa\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">normalize_qa</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qa</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_qa</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.normalize_qa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalize quantitative anisotropy.</p>\n<p>Used mostly with GQI rather than GQI2.</p>\n<section id=\"id614\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id614\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>qa<span class=\"classifier\">array, shape (X, Y, Z, N)</span></dt><dd><p>where N is the maximum number of peaks stored</p>\n</dd>\n<dt>max_qa<span class=\"classifier\">float,</span></dt><dd><p>maximum qa value. Usually found in the CSF (corticospinal fluid).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id615\">\n<h4>Returns<a class=\"headerlink\" href=\"#id615\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>nqa<span class=\"classifier\">array, shape (x, Y, Z, N)</span></dt><dd><p>normalized quantitative anisotropy</p>\n</dd>\n</dl>\n</section>\n<section id=\"id616\">\n<h4>Notes<a class=\"headerlink\" href=\"#id616\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Normalized quantitative anisotropy has the very useful property\nto be very small near gray matter and background areas. Therefore,\nit can be used to mask out white matter areas.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"squared-radial-component\">\n<h3>squared_radial_component<a class=\"headerlink\" href=\"#squared-radial-component\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.squared_radial_component\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">squared_radial_component</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.01</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.squared_radial_component\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Part of the GQI2 integral</p>\n<p>Eq.8 in the referenced paper by Yeh et al. 2010</p>\n</dd></dl>\n\n</section>\n<section id=\"npa\">\n<h3>npa<a class=\"headerlink\" href=\"#npa\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.npa\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">npa</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">self</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.npa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>non-parametric anisotropy</p>\n<p>Nimmo-Smith et al.  ISMRM 2011</p>\n</dd></dl>\n\n</section>\n<section id=\"equatorial-zone-vertices\">\n<h3>equatorial_zone_vertices<a class=\"headerlink\" href=\"#equatorial-zone-vertices\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.equatorial_zone_vertices\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">equatorial_zone_vertices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pole</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.equatorial_zone_vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>finds the \u2018vertices\u2019 in the equatorial zone conjugate\nto \u2018pole\u2019 with width half \u2018width\u2019 degrees</p>\n</dd></dl>\n\n</section>\n<section id=\"polar-zone-vertices\">\n<h3>polar_zone_vertices<a class=\"headerlink\" href=\"#polar-zone-vertices\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.polar_zone_vertices\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">polar_zone_vertices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pole</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.polar_zone_vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>finds the \u2018vertices\u2019 in the equatorial band around\nthe \u2018pole\u2019 of radius \u2018width\u2019 degrees</p>\n</dd></dl>\n\n</section>\n<section id=\"upper-hemi-map\">\n<h3>upper_hemi_map<a class=\"headerlink\" href=\"#upper-hemi-map\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.upper_hemi_map\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">upper_hemi_map</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">v</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.upper_hemi_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>maps a 3-vector into the z-upper hemisphere</p>\n</dd></dl>\n\n</section>\n<section id=\"equatorial-maximum\">\n<h3>equatorial_maximum<a class=\"headerlink\" href=\"#equatorial-maximum\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.equatorial_maximum\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">equatorial_maximum</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pole</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.equatorial_maximum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"patch-vertices\">\n<h3>patch_vertices<a class=\"headerlink\" href=\"#patch-vertices\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.patch_vertices\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">patch_vertices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pole</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.patch_vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>find \u2018vertices\u2019 within the cone of \u2018width\u2019 degrees around \u2018pole\u2019</p>\n</dd></dl>\n\n</section>\n<section id=\"patch-maximum\">\n<h3>patch_maximum<a class=\"headerlink\" href=\"#patch-maximum\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.patch_maximum\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">patch_maximum</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pole</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.patch_maximum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"odf-sum\">\n<h3>odf_sum<a class=\"headerlink\" href=\"#odf-sum\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.odf_sum\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">odf_sum</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.odf_sum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"patch-sum\">\n<h3>patch_sum<a class=\"headerlink\" href=\"#patch-sum\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.patch_sum\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">patch_sum</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pole</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.patch_sum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"triple-odf-maxima\">\n<h3>triple_odf_maxima<a class=\"headerlink\" href=\"#triple-odf-maxima\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.gqi.triple_odf_maxima\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.gqi.</span></span><span class=\"sig-name descname\"><span class=\"pre\">triple_odf_maxima</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">odf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">width</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.gqi.triple_odf_maxima\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"ivimmodeltrr\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR\" title=\"dipy.reconst.ivim.IvimModelTRR\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IvimModelTRR</span></code></a><a class=\"headerlink\" href=\"#ivimmodeltrr\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelTRR\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IvimModelTRR</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">split_b_D</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">400.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">split_b_S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">200.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">two_stage</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x_scale</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(1000.0,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">0.001,</span> <span class=\"pre\">0.0001)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ftol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eps</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">maxiter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1000</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelTRR\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>Ivim model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelTRR.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">split_b_D</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">400.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">split_b_S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">200.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">two_stage</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x_scale</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(1000.0,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">0.001,</span> <span class=\"pre\">0.0001)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ftol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eps</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">maxiter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1000</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelTRR.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an IVIM model.</p>\n<p>The IVIM model assumes that biological tissue includes a volume\nfraction \u2018f\u2019 of water flowing with a pseudo-diffusion coefficient\nD* and a fraction (1-f) of static (diffusion only), intra and\nextracellular water, with a diffusion coefficient D. In this model\nthe echo attenuation of a signal in a single voxel can be written as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<p>S(b) = S_0[f*e^{(-b*D*)} + (1-f)e^{(-b*D)}]</p>\n<p>Where:\n.. math:</p>\n<p>S_0, f, D* and D are the IVIM parameters.</p>\n</div></blockquote>\n<section id=\"id617\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id617\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable class instance</span></dt><dd><p>Gradient directions and bvalues</p>\n</dd>\n<dt>split_b_D<span class=\"classifier\">float, optional</span></dt><dd><p>The b-value to split the data on for two-stage fit. This will be\nused while estimating the value of D. The assumption is that at\nhigher b values the effects of perfusion is less and hence the\nsignal can be approximated as a mono-exponential decay.\ndefault : 400.</p>\n</dd>\n<dt>split_b_S0<span class=\"classifier\">float, optional</span></dt><dd><p>The b-value to split the data on for two-stage fit for estimation\nof S0 and initial guess for D_star. The assumption here is that\nat low bvalues the effects of perfusion are more.\ndefault : 200.</p>\n</dd>\n<dt>bounds<span class=\"classifier\">tuple of arrays with 4 elements, optional</span></dt><dd><p>Bounds to constrain the fitted model parameters. This is only\nsupported for Scipy version &gt; 0.17. When using a older Scipy\nversion, this function will raise an error if bounds are different\nfrom None. This parameter is also used to fill nan values for out\nof bounds parameters in the <cite>IvimFit</cite> class using the method\nfill_na. default : ([0., 0., 0., 0.], [np.inf, .3, 1., 1.])</p>\n</dd>\n<dt>two_stage<span class=\"classifier\">bool</span></dt><dd><p>Argument to specify whether to perform a non-linear fitting of all\nparameters after the linear fitting by splitting the data based on\nbvalues. This gives more accurate parameters but takes more time.\nThe linear fit can be used to get a quick estimation of the\nparameters. default : False</p>\n</dd>\n<dt>tol<span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for convergence of minimization.\ndefault : 1e-15</p>\n</dd>\n<dt>x_scale<span class=\"classifier\">array-like, optional</span></dt><dd><p>Scaling for the parameters. This is passed to <cite>least_squares</cite> which\nis only available for Scipy version &gt; 0.17.\ndefault: [1000, 0.01, 0.001, 0.0001]</p>\n</dd>\n<dt>gtol<span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for termination by the norm of the gradient.\ndefault : 1e-15</p>\n</dd>\n<dt>ftol<span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for termination by the change of the cost function.\ndefault : 1e-15</p>\n</dd>\n<dt>eps<span class=\"classifier\">float, optional</span></dt><dd><p>Step size used for numerical approximation of the jacobian.\ndefault : 1e-15</p>\n</dd>\n<dt>maxiter<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum number of iterations to perform.\ndefault : 1000</p>\n</dd>\n</dl>\n</section>\n<section id=\"id618\">\n<h4>References<a class=\"headerlink\" href=\"#id618\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id619\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Le Bihan, Denis, et al. \u201cSeparation of diffusion and perfusion\nin intravoxel incoherent motion MR imaging.\u201d Radiology 168.2\n(1988): 497-505.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id620\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Federau, Christian, et al. \u201cQuantitative measurement of brain\nperfusion with intravoxel incoherent motion MR imaging.\u201d\nRadiology 265.3 (2012): 874-881.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelTRR.estimate_f_D_star\">\n<span class=\"sig-name descname\"><span class=\"pre\">estimate_f_D_star</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params_f_D_star</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">D</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelTRR.estimate_f_D_star\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Estimate f and D_star using the values of all the other parameters\nobtained from a linear fit.</p>\n<section id=\"id621\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id621\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params_f_D_star: array</dt><dd><p>An array containing the value of f and D_star.</p>\n</dd>\n<dt>data<span class=\"classifier\">array</span></dt><dd><p>Array containing the actual signal values.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float</span></dt><dd><p>The parameters S0 obtained from a linear fit.</p>\n</dd>\n<dt>D<span class=\"classifier\">float</span></dt><dd><p>The parameters D obtained from a linear fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id622\">\n<h4>Returns<a class=\"headerlink\" href=\"#id622\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>f<span class=\"classifier\">float</span></dt><dd><p>Perfusion fraction estimated from the fit.</p>\n</dd>\n<dt>D_star :</dt><dd><p>The value of D_star estimated from the fit.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelTRR.estimate_linear_fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">estimate_linear_fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">split_b</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">less_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelTRR.estimate_linear_fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Estimate a linear fit by taking log of data.</p>\n<section id=\"id623\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id623\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array</span></dt><dd><p>An array containing the data to be fit</p>\n</dd>\n<dt>split_b<span class=\"classifier\">float</span></dt><dd><p>The b value to split the data</p>\n</dd>\n<dt>less_than<span class=\"classifier\">bool</span></dt><dd><p>If True, splitting occurs for bvalues less than split_b</p>\n</dd>\n</dl>\n</section>\n<section id=\"id624\">\n<h4>Returns<a class=\"headerlink\" href=\"#id624\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S0<span class=\"classifier\">float</span></dt><dd><p>The estimated S0 value. (intercept)</p>\n</dd>\n<dt>D<span class=\"classifier\">float</span></dt><dd><p>The estimated value of D.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelTRR.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelTRR.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelTRR.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ivim_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelTRR.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this IvimModel class instance given parameters.</p>\n<section id=\"id625\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id625\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ivim_params<span class=\"classifier\">array</span></dt><dd><p>The ivim parameters as an array [S0, f, D_star and D]</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable class instance</span></dt><dd><p>Gradient directions and bvalues.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float, optional</span></dt><dd><p>This has been added just for consistency with the existing\nAPI. Unlike other models, IVIM predicts S0 and this is over written\nby the S0 value in params.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id626\">\n<h4>Returns<a class=\"headerlink\" href=\"#id626\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ivim_signal<span class=\"classifier\">array</span></dt><dd><p>The predicted IVIM signal using given parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"ivimmodelvp\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP\" title=\"dipy.reconst.ivim.IvimModelVP\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IvimModelVP</span></code></a><a class=\"headerlink\" href=\"#ivimmodelvp\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IvimModelVP</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">maxiter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-08</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">maxiter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xtol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-08</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an IvimModelVP class.</p>\n<p>The IVIM model assumes that biological tissue includes a volume\nfraction \u2018f\u2019 of water flowing with a pseudo-diffusion coefficient\nD* and a fraction (1-f: treated as a separate fraction in the variable\nprojection method) of static (diffusion only), intra and\nextracellular water, with a diffusion coefficient D. In this model\nthe echo attenuation of a signal in a single voxel can be written as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\]</div>\n<p>S(b) = S_0*[f*e^{(-b*D*)} + (1-f)e^{(-b*D)}]</p>\n<p>Where:\n.. math:</p>\n<p>S_0, f, D* and D are the IVIM parameters.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>maxiter: int, optional</dt><dd><p>Maximum number of iterations for the Differential Evolution in\nSciPy.\ndefault : 10</p>\n</dd>\n<dt>xtol<span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for convergence of minimization.\ndefault : 1e-8</p>\n</dd>\n</dl>\n<section id=\"id627\">\n<h4>References<a class=\"headerlink\" href=\"#id627\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id628\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Le Bihan, Denis, et al. \u201cSeparation of diffusion and perfusion\nin intravoxel incoherent motion MR imaging.\u201d Radiology 168.2\n(1988): 497-505.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id629\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Federau, Christian, et al. \u201cQuantitative measurement of brain\nperfusion with intravoxel incoherent motion MR imaging.\u201d\nRadiology 265.3 (2012): 874-881.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id630\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fadnavis, Shreyas et.al. \u201cMicroLearn: Framework for machine\nlearning, reconstruction, optimization and microstructure\nmodeling, Proceedings of: International Society of Magnetic\nResonance in Medicine (ISMRM), Montreal, Canada, 2019.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.cvx_fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">cvx_fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.cvx_fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs the constrained search for the linear parameters <cite>f</cite> after\nthe estimation of <cite>x</cite> is done. Estimation of the linear parameters <cite>f</cite>\nis a constrained linear least-squares optimization problem solved by\nusing a convex optimizer from cvxpy. The IVIM equation contains two\nparameters that depend on the same volume fraction. Both are estimated\nas separately in the convex optimizer.</p>\n<section id=\"id631\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id631\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>phi<span class=\"classifier\">array</span></dt><dd><p>Returns an array calculated from :func: <cite>phi</cite>.</p>\n</dd>\n<dt>signal<span class=\"classifier\">array</span></dt><dd><p>The signal values measured for this model.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id632\">\n<h4>Returns<a class=\"headerlink\" href=\"#id632\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>f1, f2 (volume fractions)</p>\n</section>\n<section id=\"id633\">\n<h4>Notes<a class=\"headerlink\" href=\"#id633\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>cost function for differential evolution algorithm:</p>\n<div class=\"math notranslate nohighlight\">\n\\[minimize(norm((signal)- (phi*f)))\\]</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.ivim_mix_cost_one\">\n<span class=\"sig-name descname\"><span class=\"pre\">ivim_mix_cost_one</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.ivim_mix_cost_one\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs the objective for the :func: <cite>stoc_search_cost</cite>.</p>\n<p>First calculates the Moore-Penrose inverse of the input <cite>phi</cite> and takes\na dot product with the measured signal. The result obtained is again\nmultiplied with <cite>phi</cite> to complete the projection of the variable into\na transformed space. (see <a href=\"#id1498\"><span class=\"problematic\" id=\"id634\">[1]_</span></a> and <a href=\"#id1499\"><span class=\"problematic\" id=\"id635\">[2]_</span></a> for thorough discussion on\nVariable Projections and relevant cost functions).</p>\n<section id=\"id636\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id636\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>phi<span class=\"classifier\">array</span></dt><dd><p>Returns an array calculated from :func: <cite>Phi</cite>.</p>\n</dd>\n<dt>signal<span class=\"classifier\">array</span></dt><dd><p>The signal values measured for this model.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id637\">\n<h4>Returns<a class=\"headerlink\" href=\"#id637\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>(signal -  S)^T(signal -  S)</p>\n</section>\n<section id=\"id638\">\n<h4>Notes<a class=\"headerlink\" href=\"#id638\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>to make cost function for Differential Evolution algorithm:\n.. math:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">signal</span> <span class=\"o\">-</span>  <span class=\"n\">S</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">signal</span> <span class=\"o\">-</span>  <span class=\"n\">S</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"id639\">\n<h4>References<a class=\"headerlink\" href=\"#id639\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id640\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fadnavis, Shreyas et.al. \u201cMicroLearn: Framework for machine\nlearning, reconstruction, optimization and microstructure\nmodeling, Proceedings of: International Society of Magnetic\nResonance in Medicine (ISMRM), Montreal, Canada, 2019.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id641\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Farooq, Hamza, et al. \u201cMicrostructure Imaging of Crossing (MIX)\nWhite Matter Fibers from diffusion MRI.\u201d Scientific reports 6\n(2016).</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.nlls_cost\">\n<span class=\"sig-name descname\"><span class=\"pre\">nlls_cost</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x_f</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.nlls_cost\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Cost function for the least square problem. The cost function is used\nin the Least Squares function of SciPy in :func: <cite>fit</cite>. It guarantees\nthat stopping point of the algorithm is at least a stationary point\nwith reduction in the the number of iterations required by the\ndifferential evolution optimizer.</p>\n<section id=\"id642\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id642\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x_f<span class=\"classifier\">array</span></dt><dd><p>Contains the parameters \u2018x\u2019 and \u2018f\u2019 combines in the same array.</p>\n</dd>\n<dt>signal<span class=\"classifier\">array</span></dt><dd><p>The signal values measured for this model.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id643\">\n<h4>Returns<a class=\"headerlink\" href=\"#id643\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>sum{(signal -  phi*f)^2}</p>\n</section>\n<section id=\"id644\">\n<h4>Notes<a class=\"headerlink\" href=\"#id644\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>cost function for the least square problem.</p>\n<div class=\"math notranslate nohighlight\">\n\\[sum{(signal -  phi*f)^2}\\]</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.phi\">\n<span class=\"sig-name descname\"><span class=\"pre\">phi</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.phi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a structure for the combining the diffusion and pseudo-\ndiffusion by multiplying with the bvals and then exponentiating each of\nthe two components for fitting as per the IVIM- two compartment model.</p>\n<section id=\"id645\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id645\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>x<span class=\"classifier\">array</span></dt><dd><p>input from the Differential Evolution optimizer.</p>\n</dd>\n</dl>\n</div></blockquote>\n</section>\n<section id=\"id646\">\n<h4>Returns<a class=\"headerlink\" href=\"#id646\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>exp_phi1<span class=\"classifier\">array</span></dt><dd><p>Combined array of parameters perfusion/pseudo-diffusion\nand diffusion parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.stoc_search_cost\">\n<span class=\"sig-name descname\"><span class=\"pre\">stoc_search_cost</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.stoc_search_cost\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Cost function for differential evolution algorithm. Performs a\nstochastic search for the non-linear parameters \u2018x\u2019. The objective\nfunction is calculated in the :func: <cite>ivim_mix_cost_one</cite>. The function\nconstructs the parameters using :func: <cite>phi</cite>.</p>\n<section id=\"id647\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id647\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x<span class=\"classifier\">array</span></dt><dd><p>input from the Differential Evolution optimizer.</p>\n</dd>\n<dt>signal<span class=\"classifier\">array</span></dt><dd><p>The signal values measured for this model.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id648\">\n<h4>Returns<a class=\"headerlink\" href=\"#id648\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">func<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><cite>ivim_mix_cost_one</cite></p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.x_and_f_to_x_f\">\n<span class=\"sig-name descname\"><span class=\"pre\">x_and_f_to_x_f</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">f</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.x_and_f_to_x_f\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Combines the array of parameters \u2018x\u2019 and \u2018f\u2019 into x_f for performing\nNLLS on the final stage of optimization.</p>\n<section id=\"id649\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id649\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>x, f<span class=\"classifier\">array</span></dt><dd><p>Split parameters into two separate arrays</p>\n</dd>\n</dl>\n</div></blockquote>\n</section>\n<section id=\"id650\">\n<h4>Returns<a class=\"headerlink\" href=\"#id650\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x_f<span class=\"classifier\">array</span></dt><dd><p>Combined array of parameters \u2018x\u2019 and \u2018f\u2019 parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimModelVP.x_f_to_x_and_f\">\n<span class=\"sig-name descname\"><span class=\"pre\">x_f_to_x_and_f</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x_f</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimModelVP.x_f_to_x_and_f\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Splits the array of parameters in x_f to \u2018x\u2019 and \u2018f\u2019 for performing\na search on the both of them independently using the Trust Region\nMethod.</p>\n<section id=\"id651\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id651\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x_f<span class=\"classifier\">array</span></dt><dd><p>Combined array of parameters \u2018x\u2019 and \u2018f\u2019 parameters.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id652\">\n<h4>Returns<a class=\"headerlink\" href=\"#id652\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x, f<span class=\"classifier\">array</span></dt><dd><p>Split parameters into two separate arrays</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"ivimfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit\" title=\"dipy.reconst.ivim.IvimFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IvimFit</span></code></a><a class=\"headerlink\" href=\"#ivimfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IvimFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a IvimFit class instance.</p>\n<section id=\"id653\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id653\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>model : Model class</p>\n<dl class=\"simple\">\n<dt>model_params<span class=\"classifier\">array</span></dt><dd><p>The parameters of the model. In this case it is an\narray of ivim parameters. If the fitting is done\nfor multi_voxel data, the multi_voxel decorator will\nrun the fitting on all the voxels and model_params\nwill be an array of the dimensions (data[:-1], 4),\ni.e., there will be 4 parameters for each of the voxels.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.D\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">D</span></span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.D_star\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">D_star</span></span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.D_star\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.S0_predicted\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">S0_predicted</span></span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.S0_predicted\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.perfusion_fraction\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">perfusion_fraction</span></span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.perfusion_fraction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a model fit, predict the signal.</p>\n<section id=\"id654\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id654\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable class instance</span></dt><dd><p>Gradient directions and bvalues</p>\n</dd>\n<dt>S0<span class=\"classifier\">float</span></dt><dd><p>S0 value here is not necessary and will not be used to predict the\nsignal. It has been added to conform to the structure of the\npredict method in multi_voxel which requires a keyword argument S0.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id655\">\n<h4>Returns<a class=\"headerlink\" href=\"#id655\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>signal<span class=\"classifier\">array</span></dt><dd><p>The signal values predicted for this model using its parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.IvimFit.shape\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shape</span></span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.IvimFit.shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"ivim-prediction\">\n<h3>ivim_prediction<a class=\"headerlink\" href=\"#ivim-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.ivim_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ivim_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.ivim_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The Intravoxel incoherent motion (IVIM) model function.</p>\n<section id=\"id656\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id656\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array</span></dt><dd><p>An array of IVIM parameters - [S0, f, D_star, D].</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable class instance</span></dt><dd><p>Gradient directions and bvalues.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float, optional</span></dt><dd><p>This has been added just for consistency with the existing\nAPI. Unlike other models, IVIM predicts S0 and this is over written\nby the S0 value in params.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id657\">\n<h4>Returns<a class=\"headerlink\" href=\"#id657\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">array</span></dt><dd><p>An array containing the IVIM signal estimated using given parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"f-d-star-prediction\">\n<h3>f_D_star_prediction<a class=\"headerlink\" href=\"#f-d-star-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.f_D_star_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">f_D_star_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">D</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.f_D_star_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function used to predict IVIM signal when S0 and D are known\nby considering f and D_star as the unknown parameters.</p>\n<section id=\"id658\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id658\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array</span></dt><dd><p>The value of f and D_star.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable class instance</span></dt><dd><p>Gradient directions and bvalues.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float</span></dt><dd><p>The parameters S0 obtained from a linear fit.</p>\n</dd>\n<dt>D<span class=\"classifier\">float</span></dt><dd><p>The parameters D obtained from a linear fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id659\">\n<h4>Returns<a class=\"headerlink\" href=\"#id659\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">array</span></dt><dd><p>An array containing the IVIM signal estimated using given parameters.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"f-d-star-error\">\n<h3>f_D_star_error<a class=\"headerlink\" href=\"#f-d-star-error\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.f_D_star_error\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">f_D_star_error</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">D</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.f_D_star_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Error function used to fit f and D_star keeping S0 and D fixed</p>\n<section id=\"id660\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id660\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array</span></dt><dd><p>The value of f and D_star.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable class instance</span></dt><dd><p>Gradient directions and bvalues.</p>\n</dd>\n<dt>signal<span class=\"classifier\">array</span></dt><dd><p>Array containing the actual signal values.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float</span></dt><dd><p>The parameters S0 obtained from a linear fit.</p>\n</dd>\n<dt>D<span class=\"classifier\">float</span></dt><dd><p>The parameters D obtained from a linear fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id661\">\n<h4>Returns<a class=\"headerlink\" href=\"#id661\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>residual<span class=\"classifier\">array</span></dt><dd><p>An array containing the difference of actual and estimated signal.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"ivim-model-selector\">\n<h3>ivim_model_selector<a class=\"headerlink\" href=\"#ivim-model-selector\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.ivim.ivim_model_selector\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.ivim.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ivim_model_selector</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'trr'</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.ivim.ivim_model_selector\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Selector function to switch between the 2-stage Trust-Region Reflective\nbased NLLS fitting method (also containing the linear fit): <cite>trr</cite> and the\nVariable Projections based fitting method: <cite>varpro</cite>.</p>\n<section id=\"id662\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id662\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>fit_method<span class=\"classifier\">string, optional</span></dt><dd><p>The value fit_method can either be \u2018trr\u2019 or \u2018varpro\u2019.\ndefault : trr</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmrimodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriModel\" title=\"dipy.reconst.mapmri.MapmriModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MapmriModel</span></code></a><a class=\"headerlink\" href=\"#mapmrimodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MapmriModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_regularization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">positivity_constraint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">global_constraints</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_grid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'adaptive'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">anisotropic_scaling</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eigenvalue_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bval_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">inf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dti_scale_estimation</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0007</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a>, <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<p>Mean Apparent Propagator MRI (MAPMRI) <a href=\"#id1500\"><span class=\"problematic\" id=\"id663\">[1]_</span></a> of the diffusion signal.</p>\n<p>The main idea is to model the diffusion signal as a linear combination of\nthe continuous functions presented in <a href=\"#id1501\"><span class=\"problematic\" id=\"id664\">[2]_</span></a> but extending it in three\ndimensions.\nThe main difference with the SHORE proposed in <a href=\"#id1502\"><span class=\"problematic\" id=\"id665\">[3]_</span></a> is that MAPMRI 3D\nextension is provided using a set of three basis functions for the radial\npart, one for the signal along x, one for y and one for z, while <a href=\"#id1503\"><span class=\"problematic\" id=\"id666\">[3]_</span></a>\nuses one basis function to model the radial part and real Spherical\nHarmonics to model the angular part.\nFrom the MAPMRI coefficients is possible to use the analytical formulae\nto estimate the ODF.</p>\n<section id=\"id667\">\n<h4>References<a class=\"headerlink\" href=\"#id667\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id668\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id669\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cSimple harmonic oscillator based reconstruction\nand estimation for one-dimensional q-space magnetic resonance\n1D-SHORE)\u201d, eapoc Intl Soc Mag Reson Med, vol. 16, p. 35., 2008.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id670\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Merlet S. et al., \u201cContinuous diffusion signal, EAP and ODF\nestimation via Compressive Sensing in diffusion MRI\u201d, Medical\nImage Analysis, 2013.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id671\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>4<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation\nusing Laplacian-regularized MAP-MRI and its application to HCP\ndata.\u201d NeuroImage (2016).</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id672\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>5<span class=\"fn-bracket\">]</span></span>\n<p>Cheng, J., 2014. Estimation and Processing of Ensemble Average\nPropagator and Its Features in Diffusion MRI. Ph.D. Thesis.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id673\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>6<span class=\"fn-bracket\">]</span></span>\n<p>Hosseinbor et al. \u201cBessel fourier orientation reconstruction\n(bfor): An analytical diffusion propagator reconstruction for hybrid\ndiffusion imaging and computation of q-space indices\u201d. NeuroImage\n64, 2013, 650-670.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id674\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>7<span class=\"fn-bracket\">]</span></span>\n<p>Craven et al. \u201cSmoothing Noisy Data with Spline Functions.\u201d\nNUMER MATH 31.4 (1978): 377-403.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id675\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>8<span class=\"fn-bracket\">]</span></span>\n<p>Avram et al. \u201cClinical feasibility of using mean apparent\npropagator (MAP) MRI to characterize brain tissue microstructure\u201d.\nNeuroImage 2015, in press.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id676\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>9<span class=\"fn-bracket\">]</span></span>\n<p>Dela Haije et al. \u201cEnforcing necessary non-negativity constraints\nfor common diffusion MRI models using sum of squares programming\u201d.\nNeuroImage 209, 2020, 116405.</p>\n</aside>\n</aside>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_regularization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">positivity_constraint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">global_constraints</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_grid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'adaptive'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">anisotropic_scaling</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eigenvalue_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bval_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">inf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dti_scale_estimation</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static_diffusivity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0007</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Analytical and continuous modeling of the diffusion signal with\nrespect to the MAPMRI basis <a href=\"#id1504\"><span class=\"problematic\" id=\"id677\">[1]_</span></a>.</p>\n<p>The main idea is to model the diffusion signal as a linear combination\nof the continuous functions presented in <a href=\"#id1505\"><span class=\"problematic\" id=\"id678\">[2]_</span></a> but extending it in three\ndimensions.</p>\n<p>The main difference with the SHORE proposed in <a href=\"#id1506\"><span class=\"problematic\" id=\"id679\">[3]_</span></a> is that MAPMRI 3D\nextension is provided using a set of three basis functions for the\nradial part, one for the signal along x, one for y and one for z, while\n<a href=\"#id1507\"><span class=\"problematic\" id=\"id680\">[3]_</span></a> uses one basis function to model the radial part and real\nSpherical Harmonics to model the angular part.</p>\n<p>From the MAPMRI coefficients it is possible to estimate various\nq-space indices, the PDF and the ODF.</p>\n<p>The fitting procedure can be constrained using the positivity\nconstraint proposed in <a href=\"#id1508\"><span class=\"problematic\" id=\"id681\">[1]_</span></a> or <a href=\"#id1509\"><span class=\"problematic\" id=\"id682\">[4]_</span></a> and/or the laplacian regularization\nproposed in <a href=\"#id1510\"><span class=\"problematic\" id=\"id683\">[5]_</span></a>.</p>\n<p>For the estimation of q-space indices we recommend using the \u2018regular\u2019\nanisotropic implementation of MAPMRI. However, it has been shown that\nthe ODF estimation in this implementation has a bias which\n\u2018squeezes together\u2019 the ODF peaks when there is a crossing at an angle\nsmaller than 90 degrees <a href=\"#id1511\"><span class=\"problematic\" id=\"id684\">[5]_</span></a>. When you want to estimate ODFs for\ntractography we therefore recommend using the isotropic implementation\n(which is equivalent to <a href=\"#id1512\"><span class=\"problematic\" id=\"id685\">[3]_</span></a>).</p>\n<p>The switch between isotropic and anisotropic can be easily made through\nthe anisotropic_scaling option.</p>\n<section id=\"id686\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id686\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable,</span></dt><dd><p>gradient directions and bvalues container class.\nthe gradient table has to include b0-images.</p>\n</dd>\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>laplacian_regularization: bool,</dt><dd><p>Regularize using the Laplacian of the MAP-MRI basis.</p>\n</dd>\n<dt>laplacian_weighting: string or scalar,</dt><dd><p>The string \u2018GCV\u2019 makes it use generalized cross-validation to find\nthe regularization weight [4]. A scalar sets the regularization\nweight to that value and an array will make it selected the\noptimal weight from the values in the array.</p>\n</dd>\n<dt>positivity_constraint<span class=\"classifier\">bool,</span></dt><dd><p>Constrain the propagator to be positive.</p>\n</dd>\n<dt>global_constraints<span class=\"classifier\">bool, optional</span></dt><dd><p>If set to False, positivity is enforced on a grid determined by\npos_grid and pos_radius. If set to True, positivity is enforced\neverywhere using the constraints of <a href=\"#id1513\"><span class=\"problematic\" id=\"id687\">[6]_</span></a>. Global constraints are\ncurrently supported for anisotropic_scaling=True and for\nradial_order &lt;= 10. Default: False.</p>\n</dd>\n<dt>pos_grid<span class=\"classifier\">integer,</span></dt><dd><p>The number of points in the grid that is used in the local\npositivity constraint.</p>\n</dd>\n<dt>pos_radius<span class=\"classifier\">float or string,</span></dt><dd><p>If set to a float, the maximum distance the local positivity\nconstraint constrains to posivity is that value. If set to\n\u2018adaptive\u2019, the maximum distance is dependent on the estimated\ntissue diffusivity.</p>\n</dd>\n<dt>anisotropic_scaling<span class=\"classifier\">bool,</span></dt><dd><p>If True, uses the standard anisotropic MAP-MRI basis. If False,\nuses the isotropic MAP-MRI basis (equal to 3D-SHORE).</p>\n</dd>\n<dt>eigenvalue_threshold<span class=\"classifier\">float,</span></dt><dd><p>Sets the minimum of the tensor eigenvalues in order to avoid\nstability problem.</p>\n</dd>\n<dt>bval_threshold<span class=\"classifier\">float,</span></dt><dd><p>Sets the b-value threshold to be used in the scale factor\nestimation. In order for the estimated non-Gaussianity to have\nmeaning this value should set to a lower value (b&lt;2000 s/mm^2)\nsuch that the scale factors are estimated on signal points that\nreasonably represent the spins at Gaussian diffusion.</p>\n</dd>\n<dt>dti_scale_estimation<span class=\"classifier\">bool,</span></dt><dd><p>Whether or not DTI fitting is used to estimate the isotropic scale\nfactor for isotropic MAP-MRI.\nWhen set to False the algorithm presets the isotropic tissue\ndiffusivity to static_diffusivity. This vastly increases fitting\nspeed but at the cost of slightly reduced fitting quality. Can\nstill be used in combination with regularization and constraints.</p>\n</dd>\n<dt>static_diffusivity<span class=\"classifier\">float,</span></dt><dd><p>the tissue diffusivity that is used when dti_scale_estimation is\nset to False. The default is that of typical white matter\nD=0.7e-3 _[5].</p>\n</dd>\n<dt>cvxpy_solver<span class=\"classifier\">str, optional</span></dt><dd><p>cvxpy solver name. Optionally optimize the positivity constraint\nwith a particular cvxpy solver. See <a class=\"reference external\" href=\"http://www.cvxpy.org/\">http://www.cvxpy.org/</a> for\ndetails.\nDefault: None (cvxpy chooses its own solver)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id688\">\n<h5>References<a class=\"headerlink\" href=\"#id688\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id689\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id690\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cSimple harmonic oscillator based\nreconstruction and estimation for one-dimensional q-space\nmagnetic resonance 1D-SHORE)\u201d, Proc Intl Soc Mag Reson Med,\nvol. 16, p. 35., 2008.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id691\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cSimple harmonic oscillator based\nreconstruction and estimation for three-dimensional q-space\nmri\u201d, ISMRM 2009.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id692\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>4<span class=\"fn-bracket\">]</span></span>\n<p>Dela Haije et al. \u201cEnforcing necessary non-negativity\nconstraints for common diffusion MRI models using sum of squares\nprogramming\u201d. NeuroImage 209, 2020, 116405.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id693\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>5<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation\nusing Laplacian-regularized MAP-MRI and its application to HCP\ndata.\u201d NeuroImage (2016).</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id694\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>6<span class=\"fn-bracket\">]</span></span>\n<p>Merlet S. et al., \u201cContinuous diffusion signal, EAP and ODF\nestimation via Compressive Sensing in diffusion MRI\u201d, Medical\nImage Analysis, 2013.</p>\n</aside>\n</aside>\n</section>\n<section id=\"id695\">\n<h5>Examples<a class=\"headerlink\" href=\"#id695\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>In this example, where the data, gradient table and sphere tessellation\nused for reconstruction are provided, we model the diffusion signal\nwith respect to the SHORE basis and compute the real and analytical\nODF.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">dsi_voxels</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">gtab_</span> <span class=\"o\">=</span> <span class=\"n\">dsi_voxels</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">gtab_</span><span class=\"o\">.</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">gtab_</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                      <span class=\"n\">b0_threshold</span><span class=\"o\">=</span><span class=\"n\">gtab_</span><span class=\"o\">.</span><span class=\"n\">bvals</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"kn\">import</span> <span class=\"n\">sticks_and_ball</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">golden_directions</span> <span class=\"o\">=</span> <span class=\"n\">sticks_and_ball</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mf\">0.0015</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                          <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                                                  <span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>                                          <span class=\"n\">fractions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                          <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.mapmri</span> <span class=\"kn\">import</span> <span class=\"n\">MapmriModel</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">radial_order</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">map_model</span> <span class=\"o\">=</span> <span class=\"n\">MapmriModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">radial_order</span><span class=\"o\">=</span><span class=\"n\">radial_order</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mapfit</span> <span class=\"o\">=</span> <span class=\"n\">map_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odf</span> <span class=\"o\">=</span> <span class=\"n\">mapfit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">default_sphere</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmrifit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit\" title=\"dipy.reconst.mapmri.MapmriFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MapmriFit</span></code></a><a class=\"headerlink\" href=\"#mapmrifit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MapmriFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mapmri_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">errorcode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mapmri_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">errorcode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates diffusion properties for a single voxel</p>\n<section id=\"id696\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id696\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>AnalyticalModel</p>\n</dd>\n<dt>mapmri_coef<span class=\"classifier\">1d ndarray,</span></dt><dd><p>mapmri coefficients</p>\n</dd>\n<dt>mu<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>scale parameters vector for x, y and z</p>\n</dd>\n<dt>R<span class=\"classifier\">array, shape (3,3)</span></dt><dd><p>rotation matrix</p>\n</dd>\n<dt>lopt<span class=\"classifier\">float,</span></dt><dd><p>regularization weight used for laplacian regularization</p>\n</dd>\n<dt>errorcode<span class=\"classifier\">int</span></dt><dd><p>provides information on whether errors occurred in the fitting\nof each voxel. 0 means no problem, 1 means a LinAlgError\noccurred when trying to invert the design matrix. 2 means the\npositivity constraint was unable to solve the problem. 3 means\nthat after positivity constraint failed, also matrix inversion\nfailed.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.fitted_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">fitted_signal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.fitted_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recovers the fitted signal for the given gradient table. If no gradient\ntable is given it recovers the signal for the gtab of the model object.</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.mapmri_R\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">mapmri_R</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.mapmri_R\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The MAPMRI rotation matrix</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.mapmri_coeff\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">mapmri_coeff</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.mapmri_coeff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The MAPMRI coefficients</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.mapmri_mu\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">mapmri_mu</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.mapmri_mu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The MAPMRI scale factors</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.msd\">\n<span class=\"sig-name descname\"><span class=\"pre\">msd</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.msd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical Mean Squared Displacement (MSD).\nIt is defined as the Laplacian of the origin of the estimated signal\n<a href=\"#id1514\"><span class=\"problematic\" id=\"id697\">[1]_</span></a>. The analytical formula for the MAP-MRI basis was derived in <a href=\"#id1515\"><span class=\"problematic\" id=\"id698\">[2]_</span></a>\neq. (C13, D1).</p>\n<section id=\"id699\">\n<h4>References<a class=\"headerlink\" href=\"#id699\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id700\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Cheng, J., 2014. Estimation and Processing of Ensemble Average</p>\n</aside>\n</aside>\n<p>Propagator and Its Features in Diffusion MRI. Ph.D. Thesis.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id701\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.ng\">\n<span class=\"sig-name descname\"><span class=\"pre\">ng</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.ng\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical non-Gaussiannity (NG) <a href=\"#id1516\"><span class=\"problematic\" id=\"id702\">[1]_</span></a>.\nFor the NG to be meaningful the mapmri scale factors must be\nestimated only on data representing Gaussian diffusion of spins, i.e.,\nbvals smaller than about 2000 s/mm^2 <a href=\"#id1517\"><span class=\"problematic\" id=\"id703\">[2]_</span></a>.</p>\n<section id=\"id704\">\n<h4>References<a class=\"headerlink\" href=\"#id704\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id705\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id706\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Avram et al. \u201cClinical feasibility of using mean apparent</p>\n</aside>\n</aside>\n<p>propagator (MAP) MRI to characterize brain tissue microstructure\u201d.\nNeuroImage 2015, in press.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.ng_parallel\">\n<span class=\"sig-name descname\"><span class=\"pre\">ng_parallel</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.ng_parallel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical parallel non-Gaussiannity (NG) <a href=\"#id1518\"><span class=\"problematic\" id=\"id707\">[1]_</span></a>.\nFor the NG to be meaningful the mapmri scale factors must be\nestimated only on data representing Gaussian diffusion of spins, i.e.,\nbvals smaller than about 2000 s/mm^2 <a href=\"#id1519\"><span class=\"problematic\" id=\"id708\">[2]_</span></a>.</p>\n<section id=\"id709\">\n<h4>References<a class=\"headerlink\" href=\"#id709\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id710\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id711\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Avram et al. \u201cClinical feasibility of using mean apparent</p>\n</aside>\n</aside>\n<p>propagator (MAP) MRI to characterize brain tissue microstructure\u201d.\nNeuroImage 2015, in press.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.ng_perpendicular\">\n<span class=\"sig-name descname\"><span class=\"pre\">ng_perpendicular</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.ng_perpendicular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical perpendicular non-Gaussiannity (NG)\n<a href=\"#id1520\"><span class=\"problematic\" id=\"id712\">[1]_</span></a>. For the NG to be meaningful the mapmri scale factors must be\nestimated only on data representing Gaussian diffusion of spins, i.e.,\nbvals smaller than about 2000 s/mm^2 <a href=\"#id1521\"><span class=\"problematic\" id=\"id713\">[2]_</span></a>.</p>\n<section id=\"id714\">\n<h4>References<a class=\"headerlink\" href=\"#id714\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id715\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id716\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Avram et al. \u201cClinical feasibility of using mean apparent</p>\n</aside>\n</aside>\n<p>propagator (MAP) MRI to characterize brain tissue microstructure\u201d.\nNeuroImage 2015, in press.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.norm_of_laplacian_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">norm_of_laplacian_signal</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.norm_of_laplacian_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the norm of the laplacian of the fitted signal <a href=\"#id1522\"><span class=\"problematic\" id=\"id717\">[1]_</span></a>.\nThis information could be useful to assess if the extrapolation of the\nfitted signal contains spurious oscillations. A high laplacian may\nindicate that these are present, and any q-space indices that\nuse integrals of the signal may be corrupted (e.g. RTOP, RTAP, RTPP,\nQIV).</p>\n<section id=\"id718\">\n<h4>References<a class=\"headerlink\" href=\"#id718\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id719\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical Orientation Distribution Function (ODF)\nfrom the signal <a href=\"#id1523\"><span class=\"problematic\" id=\"id720\">[1]_</span></a> Eq. (32).</p>\n<section id=\"id721\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id721\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>A Sphere instance with vertices, edges and faces attributes.</p>\n</dd>\n<dt>s<span class=\"classifier\">unsigned int</span></dt><dd><p>radial moment of the ODF</p>\n</dd>\n</dl>\n</section>\n<section id=\"id722\">\n<h4>References<a class=\"headerlink\" href=\"#id722\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id723\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.odf_sh\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf_sh</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.odf_sh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the real analytical odf for a given discrete sphere.\nComputes the design matrix of the ODF for the given sphere vertices\nand radial moment <a href=\"#id1524\"><span class=\"problematic\" id=\"id724\">[1]_</span></a> eq. (32). The radial moment s acts as a\nsharpening method. The analytical equation for the spherical ODF basis\nis given in <a href=\"#id1525\"><span class=\"problematic\" id=\"id725\">[2]_</span></a> eq. (C8).</p>\n<section id=\"id726\">\n<h4>References<a class=\"headerlink\" href=\"#id726\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id727\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id728\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">pdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_points</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion propagator on a given set of real points.\nif the array r_points is non writeable, then intermediate\nresults are cached for faster recalculation</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qvals_or_gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">100.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recovers the reconstructed signal for any qvalue array or\ngradient table.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.qiv\">\n<span class=\"sig-name descname\"><span class=\"pre\">qiv</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.qiv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical Q-space Inverse Variance (QIV).\nIt is defined as the inverse of the Laplacian of the origin of the\nestimated propagator <a href=\"#id1526\"><span class=\"problematic\" id=\"id729\">[1]_</span></a> eq. (22). The analytical formula for the\nMAP-MRI basis was derived in <a href=\"#id1527\"><span class=\"problematic\" id=\"id730\">[2]_</span></a> eq. (C14, D2).</p>\n<section id=\"id731\">\n<h4>References<a class=\"headerlink\" href=\"#id731\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id732\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Hosseinbor et al. \u201cBessel fourier orientation reconstruction</p>\n</aside>\n</aside>\n<p>(bfor): An analytical diffusion propagator reconstruction for hybrid\ndiffusion imaging and computation of q-space indices. NeuroImage 64,\n2013, 650-670.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id733\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.rtap\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtap</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.rtap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to the axis probability (RTAP)\n<a href=\"#id1528\"><span class=\"problematic\" id=\"id734\">[1]_</span></a> eq. (40, 44a). The analytical formula for the isotropic MAP-MRI\nbasis was derived in <a href=\"#id1529\"><span class=\"problematic\" id=\"id735\">[2]_</span></a> eq. (C11).</p>\n<section id=\"id736\">\n<h4>References<a class=\"headerlink\" href=\"#id736\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id737\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id738\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.rtop\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtop</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.rtop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to the origin probability (RTOP)\n<a href=\"#id1530\"><span class=\"problematic\" id=\"id739\">[1]_</span></a> eq. (36, 43). The analytical formula for the isotropic MAP-MRI\nbasis was derived in <a href=\"#id1531\"><span class=\"problematic\" id=\"id740\">[2]_</span></a> eq. (C11).</p>\n<section id=\"id741\">\n<h4>References<a class=\"headerlink\" href=\"#id741\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id742\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id743\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.MapmriFit.rtpp\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtpp</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.MapmriFit.rtpp\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to the plane probability (RTPP)\n<a href=\"#id1532\"><span class=\"problematic\" id=\"id744\">[1]_</span></a> eq. (42). The analytical formula for the isotropic MAP-MRI\nbasis was derived in <a href=\"#id1533\"><span class=\"problematic\" id=\"id745\">[2]_</span></a> eq. (C11).</p>\n<section id=\"id746\">\n<h4>References<a class=\"headerlink\" href=\"#id746\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id747\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id748\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"isotropic-scale-factor\">\n<h3>isotropic_scale_factor<a class=\"headerlink\" href=\"#isotropic-scale-factor\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.isotropic_scale_factor\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">isotropic_scale_factor</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu_squared</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.isotropic_scale_factor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Estimated isotropic scaling factor _[1] Eq. (49).</p>\n<section id=\"id749\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id749\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mu_squared<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>squared scale factors of mapmri basis in x, y, z</p>\n</dd>\n</dl>\n</section>\n<section id=\"id750\">\n<h4>Returns<a class=\"headerlink\" href=\"#id750\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>u0<span class=\"classifier\">float</span></dt><dd><p>closest isotropic scale factor for the isotropic basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id751\">\n<h4>References<a class=\"headerlink\" href=\"#id751\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id752\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-index-matrix\">\n<h3>mapmri_index_matrix<a class=\"headerlink\" href=\"#mapmri-index-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_index_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_index_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_index_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the indices for the MAPMRI <a href=\"#id1534\"><span class=\"problematic\" id=\"id753\">[1]_</span></a> basis in x, y and z.</p>\n<section id=\"id754\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id754\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int</span></dt><dd><p>radial order of MAPMRI basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id755\">\n<h4>Returns<a class=\"headerlink\" href=\"#id755\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>index_matrix<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>ordering of the basis in x, y, z</p>\n</dd>\n</dl>\n</section>\n<section id=\"id756\">\n<h4>References<a class=\"headerlink\" href=\"#id756\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id757\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"b-mat\">\n<h3>b_mat<a class=\"headerlink\" href=\"#b-mat\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.b_mat\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">b_mat</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">index_matrix</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.b_mat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the B coefficients from <a href=\"#id1535\"><span class=\"problematic\" id=\"id758\">[1]_</span></a> Eq. (27).</p>\n<section id=\"id759\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id759\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>index_matrix<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>ordering of the basis in x, y, z</p>\n</dd>\n</dl>\n</section>\n<section id=\"id760\">\n<h4>Returns<a class=\"headerlink\" href=\"#id760\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>B<span class=\"classifier\">array, shape (N,)</span></dt><dd><p>B coefficients for the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id761\">\n<h4>References<a class=\"headerlink\" href=\"#id761\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id762\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"b-mat-isotropic\">\n<h3>b_mat_isotropic<a class=\"headerlink\" href=\"#b-mat-isotropic\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.b_mat_isotropic\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">b_mat_isotropic</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">index_matrix</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.b_mat_isotropic\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the isotropic B coefficients from <a href=\"#id1536\"><span class=\"problematic\" id=\"id763\">[1]_</span></a> Fig 8.</p>\n<section id=\"id764\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id764\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>index_matrix<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>ordering of the isotropic basis in j, l, m</p>\n</dd>\n</dl>\n</section>\n<section id=\"id765\">\n<h4>Returns<a class=\"headerlink\" href=\"#id765\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>B<span class=\"classifier\">array, shape (N,)</span></dt><dd><p>B coefficients for the isotropic basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id766\">\n<h4>References<a class=\"headerlink\" href=\"#id766\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id767\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-phi-1d\">\n<h3>mapmri_phi_1d<a class=\"headerlink\" href=\"#mapmri-phi-1d\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_phi_1d\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_phi_1d</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_phi_1d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>One dimensional MAPMRI basis function from <a href=\"#id1537\"><span class=\"problematic\" id=\"id768\">[1]_</span></a> Eq. (4).</p>\n<section id=\"id769\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id769\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n<span class=\"classifier\">unsigned int</span></dt><dd><p>order of the basis</p>\n</dd>\n<dt>q<span class=\"classifier\">array, shape (N,)</span></dt><dd><p>points in the q-space in which evaluate the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">float</span></dt><dd><p>scale factor of the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id770\">\n<h4>References<a class=\"headerlink\" href=\"#id770\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id771\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-phi-matrix\">\n<h3>mapmri_phi_matrix<a class=\"headerlink\" href=\"#mapmri-phi-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_phi_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_phi_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q_gradients</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_phi_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the MAPMRI phi matrix for the signal <a href=\"#id1538\"><span class=\"problematic\" id=\"id772\">[1]_</span></a> eq. (23).</p>\n<section id=\"id773\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id773\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>scale factors of the basis for x, y, z</p>\n</dd>\n<dt>q_gradients<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>points in the q-space in which evaluate the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id774\">\n<h4>References<a class=\"headerlink\" href=\"#id774\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id775\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-psi-1d\">\n<h3>mapmri_psi_1d<a class=\"headerlink\" href=\"#mapmri-psi-1d\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_psi_1d\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_psi_1d</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_psi_1d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>One dimensional MAPMRI propagator basis function from <a href=\"#id1539\"><span class=\"problematic\" id=\"id776\">[1]_</span></a> Eq. (10).</p>\n<section id=\"id777\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id777\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n<span class=\"classifier\">unsigned int</span></dt><dd><p>order of the basis</p>\n</dd>\n<dt>x<span class=\"classifier\">array, shape (N,)</span></dt><dd><p>points in the r-space in which evaluate the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">float</span></dt><dd><p>scale factor of the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id778\">\n<h4>References<a class=\"headerlink\" href=\"#id778\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id779\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-psi-matrix\">\n<h3>mapmri_psi_matrix<a class=\"headerlink\" href=\"#mapmri-psi-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_psi_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_psi_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rgrad</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_psi_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the MAPMRI psi matrix for the propagator <a href=\"#id1540\"><span class=\"problematic\" id=\"id780\">[1]_</span></a> eq. (22).</p>\n<section id=\"id781\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id781\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>scale factors of the basis for x, y, z</p>\n</dd>\n<dt>rgrad<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>points in the r-space in which evaluate the EAP</p>\n</dd>\n</dl>\n</section>\n<section id=\"id782\">\n<h4>References<a class=\"headerlink\" href=\"#id782\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id783\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-odf-matrix\">\n<h3>mapmri_odf_matrix<a class=\"headerlink\" href=\"#mapmri-odf-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_odf_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_odf_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_odf_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the MAPMRI ODF matrix <a href=\"#id1541\"><span class=\"problematic\" id=\"id784\">[1]_</span></a>  Eq. (33).</p>\n<section id=\"id785\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id785\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>scale factors of the basis for x, y, z</p>\n</dd>\n<dt>s<span class=\"classifier\">unsigned int</span></dt><dd><p>radial moment of the ODF</p>\n</dd>\n<dt>vertices<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>points of the sphere shell in the r-space in which evaluate the ODF</p>\n</dd>\n</dl>\n</section>\n<section id=\"id786\">\n<h4>References<a class=\"headerlink\" href=\"#id786\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id787\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-phi-matrix\">\n<h3>mapmri_isotropic_phi_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-phi-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_phi_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_phi_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_phi_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Three dimensional isotropic MAPMRI signal basis function from <a href=\"#id1542\"><span class=\"problematic\" id=\"id788\">[1]_</span></a>\nEq. (61).</p>\n<section id=\"id789\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id789\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>radial order of the mapmri basis.</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>positive isotropic scale factor of the basis</p>\n</dd>\n<dt>q<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>points in the q-space in which evaluate the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id790\">\n<h4>References<a class=\"headerlink\" href=\"#id790\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id791\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-radial-signal-basis\">\n<h3>mapmri_isotropic_radial_signal_basis<a class=\"headerlink\" href=\"#mapmri-isotropic-radial-signal-basis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_radial_signal_basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">j</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qval</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Radial part of the isotropic 1D-SHORE signal basis <a href=\"#id1543\"><span class=\"problematic\" id=\"id792\">[1]_</span></a> eq. (61).</p>\n<section id=\"id793\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id793\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>j<span class=\"classifier\">unsigned int,</span></dt><dd><p>a positive integer related to the radial order</p>\n</dd>\n<dt>l<span class=\"classifier\">unsigned int,</span></dt><dd><p>the spherical harmonic order</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>isotropic scale factor of the basis</p>\n</dd>\n<dt>qval<span class=\"classifier\">float,</span></dt><dd><p>points in the q-space in which evaluate the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id794\">\n<h4>References<a class=\"headerlink\" href=\"#id794\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id795\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-m-mu-independent\">\n<h3>mapmri_isotropic_M_mu_independent<a class=\"headerlink\" href=\"#mapmri-isotropic-m-mu-independent\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_M_mu_independent</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computed the mu independent part of the signal design matrix.</p>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-m-mu-dependent\">\n<h3>mapmri_isotropic_M_mu_dependent<a class=\"headerlink\" href=\"#mapmri-isotropic-m-mu-dependent\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_M_mu_dependent</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qval</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computed the mu dependent part of the signal design matrix.</p>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-psi-matrix\">\n<h3>mapmri_isotropic_psi_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-psi-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_psi_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_psi_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rgrad</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_psi_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Three dimensional isotropic MAPMRI propagator basis function from <a href=\"#id1544\"><span class=\"problematic\" id=\"id796\">[1]_</span></a>\nEq. (61).</p>\n<section id=\"id797\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id797\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>radial order of the mapmri basis.</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>positive isotropic scale factor of the basis</p>\n</dd>\n<dt>rgrad<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>points in the r-space in which evaluate the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id798\">\n<h4>References<a class=\"headerlink\" href=\"#id798\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id799\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-radial-pdf-basis\">\n<h3>mapmri_isotropic_radial_pdf_basis<a class=\"headerlink\" href=\"#mapmri-isotropic-radial-pdf-basis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_radial_pdf_basis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_radial_pdf_basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">j</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_radial_pdf_basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Radial part of the isotropic 1D-SHORE propagator basis <a href=\"#id1545\"><span class=\"problematic\" id=\"id800\">[1]_</span></a> eq. (61).</p>\n<section id=\"id801\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id801\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>j<span class=\"classifier\">unsigned int,</span></dt><dd><p>a positive integer related to the radial order</p>\n</dd>\n<dt>l<span class=\"classifier\">unsigned int,</span></dt><dd><p>the spherical harmonic order</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>isotropic scale factor of the basis</p>\n</dd>\n<dt>r<span class=\"classifier\">float,</span></dt><dd><p>points in the r-space in which evaluate the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id802\">\n<h4>References<a class=\"headerlink\" href=\"#id802\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id803\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-k-mu-independent\">\n<h3>mapmri_isotropic_K_mu_independent<a class=\"headerlink\" href=\"#mapmri-isotropic-k-mu-independent\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_K_mu_independent\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_K_mu_independent</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rgrad</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_K_mu_independent\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes mu independent part of K. Same trick as with M.</p>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-k-mu-dependent\">\n<h3>mapmri_isotropic_K_mu_dependent<a class=\"headerlink\" href=\"#mapmri-isotropic-k-mu-dependent\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_K_mu_dependent\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_K_mu_dependent</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rgrad</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_K_mu_dependent\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes mu dependent part of M. Same trick as with M.</p>\n</dd></dl>\n\n</section>\n<section id=\"binomialfloat\">\n<h3>binomialfloat<a class=\"headerlink\" href=\"#binomialfloat\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.binomialfloat\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">binomialfloat</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">k</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.binomialfloat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Custom Binomial function</p>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-odf-matrix\">\n<h3>mapmri_isotropic_odf_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-odf-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_odf_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_odf_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_odf_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the isotropic MAPMRI ODF matrix <a href=\"#id1546\"><span class=\"problematic\" id=\"id804\">[1]_</span></a> Eq. 32 but for the\nisotropic propagator in <a href=\"#id1547\"><span class=\"problematic\" id=\"id805\">[1]_</span></a> eq. (60). Analytical derivation in\n<a href=\"#id1548\"><span class=\"problematic\" id=\"id806\">[2]_</span></a> eq. (C8).</p>\n<section id=\"id807\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id807\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>isotropic scale factor of the isotropic MAP-MRI basis</p>\n</dd>\n<dt>s<span class=\"classifier\">unsigned int</span></dt><dd><p>radial moment of the ODF</p>\n</dd>\n<dt>vertices<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>points of the sphere shell in the r-space in which evaluate the ODF</p>\n</dd>\n</dl>\n</section>\n<section id=\"id808\">\n<h4>Returns<a class=\"headerlink\" href=\"#id808\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>odf_mat<span class=\"classifier\">Matrix, shape (N_vertices, N_mapmri_coef)</span></dt><dd><p>ODF design matrix to discrete sphere function</p>\n</dd>\n</dl>\n</section>\n<section id=\"id809\">\n<h4>References<a class=\"headerlink\" href=\"#id809\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id810\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id811\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-odf-sh-matrix\">\n<h3>mapmri_isotropic_odf_sh_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-odf-sh-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_odf_sh_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_odf_sh_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_odf_sh_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the isotropic MAPMRI ODF matrix <a href=\"#id1549\"><span class=\"problematic\" id=\"id812\">[1]_</span></a> Eq. 32 for the isotropic\npropagator in <a href=\"#id1550\"><span class=\"problematic\" id=\"id813\">[1]_</span></a> eq. (60). Here we do not compute the sphere function but\nthe spherical harmonics by only integrating the radial part of the\npropagator. We use the same derivation of the ODF in the isotropic\nimplementation as in <a href=\"#id1551\"><span class=\"problematic\" id=\"id814\">[2]_</span></a> eq. (C8).</p>\n<section id=\"id815\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id815\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>isotropic scale factor of the isotropic MAP-MRI basis</p>\n</dd>\n<dt>s<span class=\"classifier\">unsigned int</span></dt><dd><p>radial moment of the ODF</p>\n</dd>\n</dl>\n</section>\n<section id=\"id816\">\n<h4>Returns<a class=\"headerlink\" href=\"#id816\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>odf_sh_mat<span class=\"classifier\">Matrix, shape (N_sh_coef, N_mapmri_coef)</span></dt><dd><p>ODF design matrix to spherical harmonics</p>\n</dd>\n</dl>\n</section>\n<section id=\"id817\">\n<h4>References<a class=\"headerlink\" href=\"#id817\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id818\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id819\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-laplacian-reg-matrix\">\n<h3>mapmri_isotropic_laplacian_reg_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-laplacian-reg-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_laplacian_reg_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Laplacian regularization matrix for MAP-MRI\u2019s isotropic\nimplementation <a href=\"#id1552\"><span class=\"problematic\" id=\"id820\">[1]_</span></a> eq. (C7).</p>\n<section id=\"id821\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id821\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>isotropic scale factor of the isotropic MAP-MRI basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id822\">\n<h4>Returns<a class=\"headerlink\" href=\"#id822\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>LR<span class=\"classifier\">Matrix, shape (N_coef, N_coef)</span></dt><dd><p>Laplacian regularization matrix</p>\n</dd>\n</dl>\n</section>\n<section id=\"id823\">\n<h4>References<a class=\"headerlink\" href=\"#id823\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id824\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-laplacian-reg-matrix-from-index-matrix\">\n<h3>mapmri_isotropic_laplacian_reg_matrix_from_index_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-laplacian-reg-matrix-from-index-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_laplacian_reg_matrix_from_index_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Laplacian regularization matrix for MAP-MRI\u2019s isotropic\nimplementation <a href=\"#id1553\"><span class=\"problematic\" id=\"id825\">[1]_</span></a> eq. (C7).</p>\n<section id=\"id826\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id826\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ind_mat<span class=\"classifier\">matrix (N_coef, 3),</span></dt><dd><p>Basis order matrix</p>\n</dd>\n<dt>mu<span class=\"classifier\">float,</span></dt><dd><p>isotropic scale factor of the isotropic MAP-MRI basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id827\">\n<h4>Returns<a class=\"headerlink\" href=\"#id827\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>LR<span class=\"classifier\">Matrix, shape (N_coef, N_coef)</span></dt><dd><p>Laplacian regularization matrix</p>\n</dd>\n</dl>\n</section>\n<section id=\"id828\">\n<h4>References<a class=\"headerlink\" href=\"#id828\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id829\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-isotropic-index-matrix\">\n<h3>mapmri_isotropic_index_matrix<a class=\"headerlink\" href=\"#mapmri-isotropic-index-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_isotropic_index_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_isotropic_index_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_index_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the indices for the isotropic MAPMRI basis <a href=\"#id1554\"><span class=\"problematic\" id=\"id830\">[1]_</span></a> Fig 8.</p>\n<section id=\"id831\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id831\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int</span></dt><dd><p>radial order of isotropic MAPMRI basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id832\">\n<h4>Returns<a class=\"headerlink\" href=\"#id832\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>index_matrix<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>ordering of the basis in x, y, z</p>\n</dd>\n</dl>\n</section>\n<section id=\"id833\">\n<h4>References<a class=\"headerlink\" href=\"#id833\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id834\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"create-rspace\">\n<h3>create_rspace<a class=\"headerlink\" href=\"#create-rspace\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.create_rspace\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">create_rspace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gridsize</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radius_max</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.create_rspace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create the real space table, that contains the points in which\nto compute the pdf.</p>\n<section id=\"id835\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id835\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gridsize<span class=\"classifier\">unsigned int</span></dt><dd><p>dimension of the propagator grid</p>\n</dd>\n<dt>radius_max<span class=\"classifier\">float</span></dt><dd><p>maximal radius in which compute the propagator</p>\n</dd>\n</dl>\n</section>\n<section id=\"id836\">\n<h4>Returns<a class=\"headerlink\" href=\"#id836\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tab<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>real space points in which calculates the pdf</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"delta\">\n<h3>delta<a class=\"headerlink\" href=\"#delta\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.delta\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">delta</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.delta\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"map-laplace-u\">\n<h3>map_laplace_u<a class=\"headerlink\" href=\"#map-laplace-u\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.map_laplace_u\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">map_laplace_u</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.map_laplace_u\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>S(n, m) static matrix for Laplacian regularization <a href=\"#id1555\"><span class=\"problematic\" id=\"id837\">[1]_</span></a> eq. (13).</p>\n<section id=\"id838\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id838\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n, m<span class=\"classifier\">unsigned int</span></dt><dd><p>basis order of the MAP-MRI basis in different directions</p>\n</dd>\n</dl>\n</section>\n<section id=\"id839\">\n<h4>Returns<a class=\"headerlink\" href=\"#id839\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>U<span class=\"classifier\">float,</span></dt><dd><p>Analytical integral of <span class=\"math notranslate nohighlight\">\\(\\phi_n(q) * \\phi_m(q)\\)</span></p>\n</dd>\n</dl>\n</section>\n<section id=\"id840\">\n<h4>References<a class=\"headerlink\" href=\"#id840\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id841\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"map-laplace-t\">\n<h3>map_laplace_t<a class=\"headerlink\" href=\"#map-laplace-t\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.map_laplace_t\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">map_laplace_t</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.map_laplace_t\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>L(m, n) static matrix for Laplacian regularization <a href=\"#id1556\"><span class=\"problematic\" id=\"id842\">[1]_</span></a> eq. (12).</p>\n<section id=\"id843\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id843\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n, m<span class=\"classifier\">unsigned int</span></dt><dd><p>basis order of the MAP-MRI basis in different directions</p>\n</dd>\n</dl>\n</section>\n<section id=\"id844\">\n<h4>Returns<a class=\"headerlink\" href=\"#id844\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">float</span></dt><dd><p>Analytical integral of <span class=\"math notranslate nohighlight\">\\(\\phi_n(q) * \\phi_m''(q)\\)</span></p>\n</dd>\n</dl>\n</section>\n<section id=\"id845\">\n<h4>References<a class=\"headerlink\" href=\"#id845\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id846\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"map-laplace-s\">\n<h3>map_laplace_s<a class=\"headerlink\" href=\"#map-laplace-s\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.map_laplace_s\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">map_laplace_s</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.map_laplace_s\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>R(m,n) static matrix for Laplacian regularization <a href=\"#id1557\"><span class=\"problematic\" id=\"id847\">[1]_</span></a> eq. (11).</p>\n<section id=\"id848\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id848\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n, m<span class=\"classifier\">unsigned int</span></dt><dd><p>basis order of the MAP-MRI basis in different directions</p>\n</dd>\n</dl>\n</section>\n<section id=\"id849\">\n<h4>Returns<a class=\"headerlink\" href=\"#id849\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">float</span></dt><dd><p>Analytical integral of <span class=\"math notranslate nohighlight\">\\(\\phi_n''(q) * \\phi_m''(q)\\)</span></p>\n</dd>\n</dl>\n</section>\n<section id=\"id850\">\n<h4>References<a class=\"headerlink\" href=\"#id850\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id851\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-stu-reg-matrices\">\n<h3>mapmri_STU_reg_matrices<a class=\"headerlink\" href=\"#mapmri-stu-reg-matrices\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_STU_reg_matrices\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_STU_reg_matrices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_STU_reg_matrices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate the static portions of the Laplacian regularization matrix\naccording to <a href=\"#id1558\"><span class=\"problematic\" id=\"id852\">[1]_</span></a> eq. (11, 12, 13).</p>\n<section id=\"id853\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id853\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id854\">\n<h4>Returns<a class=\"headerlink\" href=\"#id854\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S, T, U<span class=\"classifier\">Matrices, shape (N_coef,N_coef)</span></dt><dd><p>Regularization submatrices</p>\n</dd>\n</dl>\n</section>\n<section id=\"id855\">\n<h4>References<a class=\"headerlink\" href=\"#id855\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id856\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mapmri-laplacian-reg-matrix\">\n<h3>mapmri_laplacian_reg_matrix<a class=\"headerlink\" href=\"#mapmri-laplacian-reg-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.mapmri_laplacian_reg_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mapmri_laplacian_reg_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">T_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">U_mat</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.mapmri_laplacian_reg_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Put the Laplacian regularization matrix together <a href=\"#id1559\"><span class=\"problematic\" id=\"id857\">[1]_</span></a> eq. (10).</p>\n<p>The static parts in S, T and U are multiplied and divided by the\nvoxel-specific scale factors.</p>\n<section id=\"id858\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id858\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ind_mat<span class=\"classifier\">matrix (N_coef, 3),</span></dt><dd><p>Basis order matrix</p>\n</dd>\n<dt>mu<span class=\"classifier\">array, shape (3,)</span></dt><dd><p>scale factors of the basis for x, y, z</p>\n</dd>\n<dt>S, T, U<span class=\"classifier\">matrices, shape (N_coef,N_coef)</span></dt><dd><p>Regularization submatrices</p>\n</dd>\n</dl>\n</section>\n<section id=\"id859\">\n<h4>Returns<a class=\"headerlink\" href=\"#id859\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>LR<span class=\"classifier\">matrix (N_coef, N_coef),</span></dt><dd><p>Voxel-specific Laplacian regularization matrix</p>\n</dd>\n</dl>\n</section>\n<section id=\"id860\">\n<h4>References<a class=\"headerlink\" href=\"#id860\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id861\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cMAPL: Tissue microstructure estimation</p>\n</aside>\n</aside>\n<p>using Laplacian-regularized MAP-MRI and its application to HCP data.\u201d\nNeuroImage (2016).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"generalized-crossvalidation-array\">\n<h3>generalized_crossvalidation_array<a class=\"headerlink\" href=\"#generalized-crossvalidation-array\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.generalized_crossvalidation_array\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">generalized_crossvalidation_array</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">M</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">LR</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights_array</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.generalized_crossvalidation_array\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generalized Cross Validation Function <a href=\"#id1560\"><span class=\"problematic\" id=\"id862\">[1]_</span></a> eq. (15).</p>\n<p>Here weights_array is a numpy array with all values that should be\nconsidered in the GCV. It will run through the weights until the cost\nfunction starts to increase, then stop and take the last value as the\noptimum weight.</p>\n<section id=\"id863\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id863\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array (N),</span></dt><dd><p>Basis order matrix</p>\n</dd>\n<dt>M<span class=\"classifier\">matrix, shape (N, Ncoef)</span></dt><dd><p>mapmri observation matrix</p>\n</dd>\n<dt>LR<span class=\"classifier\">matrix, shape (N_coef, N_coef)</span></dt><dd><p>regularization matrix</p>\n</dd>\n<dt>weights_array<span class=\"classifier\">array (N_of_weights)</span></dt><dd><p>array of optional regularization weights</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"generalized-crossvalidation\">\n<h3>generalized_crossvalidation<a class=\"headerlink\" href=\"#generalized-crossvalidation\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.generalized_crossvalidation\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">generalized_crossvalidation</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">M</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">LR</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gcv_startpoint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.05</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.generalized_crossvalidation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generalized Cross Validation Function <a href=\"#id1561\"><span class=\"problematic\" id=\"id864\">[1]_</span></a> eq. (15).</p>\n<p>Finds optimal regularization weight based on generalized cross-validation.</p>\n<section id=\"id865\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id865\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">array (N),</span></dt><dd><p>data array</p>\n</dd>\n<dt>M<span class=\"classifier\">matrix, shape (N, Ncoef)</span></dt><dd><p>mapmri observation matrix</p>\n</dd>\n<dt>LR<span class=\"classifier\">matrix, shape (N_coef, N_coef)</span></dt><dd><p>regularization matrix</p>\n</dd>\n<dt>gcv_startpoint<span class=\"classifier\">float</span></dt><dd><p>startpoint for the gcv optimization</p>\n</dd>\n</dl>\n</section>\n<section id=\"id866\">\n<h4>Returns<a class=\"headerlink\" href=\"#id866\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>optimal_lambda<span class=\"classifier\">float,</span></dt><dd><p>optimal regularization weight</p>\n</dd>\n</dl>\n</section>\n<section id=\"id867\">\n<h4>References<a class=\"headerlink\" href=\"#id867\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id868\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Craven et al. \u201cSmoothing Noisy Data with Spline Functions.\u201d\nNUMER MATH 31.4 (1978): 377-403.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"gcv-cost-function\">\n<h3>gcv_cost_function<a class=\"headerlink\" href=\"#gcv-cost-function\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mapmri.gcv_cost_function\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mapmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">gcv_cost_function</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weight</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">args</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mapmri.gcv_cost_function\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The GCV cost function that is iterated [4].</p>\n</dd></dl>\n\n</section>\n<section id=\"multishellresponse\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellResponse\" title=\"dipy.reconst.mcsd.MultiShellResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiShellResponse</span></code></a><a class=\"headerlink\" href=\"#multishellresponse\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellResponse\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MultiShellResponse</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shells</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellResponse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellResponse.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shells</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellResponse.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Estimate Multi Shell response function for multiple tissues and\nmultiple shells.</p>\n<p>The method <cite>multi_shell_fiber_response</cite> allows to create a multi-shell\nfiber response with the right format, for a three compartments model.\nIt can be referred to in order to understand the inputs of this class.</p>\n<section id=\"id869\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id869\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response<span class=\"classifier\">ndarray</span></dt><dd><p>Multi-shell fiber response. The ordering of the responses should\nfollow the same logic as S0.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int</span></dt><dd><p>Maximal spherical harmonics order.</p>\n</dd>\n<dt>shells<span class=\"classifier\">int</span></dt><dd><p>Number of shells in the data</p>\n</dd>\n<dt>S0<span class=\"classifier\">array (3,)</span></dt><dd><p>Signal with no diffusion weighting for each tissue compartments, in\nthe same tissue order as <cite>response</cite>. This S0 can be used for\npredicting from a fit model later on.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellResponse.iso\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">iso</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellResponse.iso\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"multishelldeconvmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel\" title=\"dipy.reconst.mcsd.MultiShellDeconvModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel</span></code></a><a class=\"headerlink\" href=\"#multishelldeconvmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellDeconvModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MultiShellDeconvModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_sphere=&lt;dipy.core.sphere.HemiSphere</span> <span class=\"pre\">object&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order=8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iso=2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellDeconvModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg_sphere=&lt;dipy.core.sphere.HemiSphere</span> <span class=\"pre\">object&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order=8</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iso=2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-Shell Multi-Tissue Constrained Spherical Deconvolution\n(MSMT-CSD) <a href=\"#id1562\"><span class=\"problematic\" id=\"id870\">[1]_</span></a>. This method extends the CSD model proposed in <a href=\"#id1563\"><span class=\"problematic\" id=\"id871\">[2]_</span></a> by\nthe estimation of multiple response functions as a function of multiple\nb-values and multiple tissue types.</p>\n<p>Spherical deconvolution computes a fiber orientation distribution\n(FOD), also called fiber ODF (fODF) <a href=\"#id1564\"><span class=\"problematic\" id=\"id872\">[2]_</span></a>. The fODF is derived from\ndifferent tissue types and thus overcomes the overestimation of WM in\nGM and CSF areas.</p>\n<p>The response function is based on the different tissue types\nand is provided as input to the MultiShellDeconvModel.\nIt will be used as deconvolution kernel, as described in <a href=\"#id1565\"><span class=\"problematic\" id=\"id873\">[2]_</span></a>.</p>\n<section id=\"id874\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id874\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nresponse : ndarray or MultiShellResponse object</p>\n<blockquote>\n<div><p>Pre-computed multi-shell fiber response function in the form of a\nMultiShellResponse object, or simple response function as a ndarray.\nThe later must be of shape (3, len(bvals)-1, 4), because it will be\nconverted into a MultiShellResponse object via the\n<cite>multi_shell_fiber_response</cite> method (important note: the function\n<cite>unique_bvals_tolerance</cite> is used here to select unique bvalues from\ngtab as input). Each column (3,) has two elements. The first is the\neigen-values as a (3,) ndarray and the second is the signal value\nfor the response function without diffusion weighting (S0). Note\nthat in order to use more than three compartments, one must create\na MultiShellResponse object on the side.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>reg_sphere<span class=\"classifier\">Sphere (optional)</span></dt><dd><p>sphere used to build the regularization B matrix.\nDefault: \u2018symmetric362\u2019.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int (optional)</span></dt><dd><p>maximal spherical harmonics order. Default: 8</p>\n</dd>\n<dt>iso: int (optional)</dt><dd><p>Number of tissue compartments for running the MSMT-CSD. Minimum\nnumber of compartments required is 2.\nDefault: 2</p>\n</dd>\n</dl>\n</section>\n<section id=\"id875\">\n<h4>References<a class=\"headerlink\" href=\"#id875\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id876\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Jeurissen, B., et al. NeuroImage 2014. Multi-tissue constrained\nspherical deconvolution for improved analysis of multi-shell\ndiffusion MRI data</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id877\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical\ndeconvolution</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id878\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D, et al. Imaging Systems and Technology\n2012. MRtrix: Diffusion Tractography in Crossing Fiber Regions</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellDeconvModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MultiShellDeconvModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute a signal prediction given spherical harmonic coefficients\nfor the provided GradientTable class instance.</p>\n<section id=\"id879\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id879\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">ndarray</span></dt><dd><p>The spherical harmonic representation of the FOD from which to make\nthe signal prediction.</p>\n</dd>\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>The gradients for which the signal will be predicted. Use the\nmodel\u2019s gradient table by default.</p>\n</dd>\n<dt>S0<span class=\"classifier\">ndarray or float</span></dt><dd><p>The non diffusion-weighted signal value.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"msdeconvfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit\" title=\"dipy.reconst.mcsd.MSDeconvFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MSDeconvFit</span></code></a><a class=\"headerlink\" href=\"#msdeconvfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MSDeconvFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MSDeconvFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">coeff</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MSDeconvFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit\" title=\"dipy.reconst.shm.SphHarmFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MSDeconvFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">coeff</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MSDeconvFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Abstract class which holds the fit result of MultiShellDeconvModel.\nInherits the SphHarmFit which fits the diffusion data to a spherical\nharmonic model.</p>\n<section id=\"id880\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id880\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model: object</dt><dd><p>MultiShellDeconvModel</p>\n</dd>\n<dt>coeff<span class=\"classifier\">array</span></dt><dd><p>Spherical harmonic coefficients for the ODF.</p>\n</dd>\n<dt>mask: ndarray</dt><dd><p>Mask for fitting</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MSDeconvFit.all_shm_coeff\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">all_shm_coeff</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MSDeconvFit.all_shm_coeff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MSDeconvFit.shm_coeff\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shm_coeff</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MSDeconvFit.shm_coeff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The spherical harmonic coefficients of the odf</p>\n<p>Make this a property for now, if there is a use case for modifying\nthe coefficients we can add a setter or expose the coefficients more\ndirectly</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.MSDeconvFit.volume_fractions\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">volume_fractions</span></span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.MSDeconvFit.volume_fractions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"qpfitter\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.QpFitter\" title=\"dipy.reconst.mcsd.QpFitter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QpFitter</span></code></a><a class=\"headerlink\" href=\"#qpfitter\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.QpFitter\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QpFitter</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.QpFitter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.QpFitter.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">X</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reg</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.QpFitter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes use of the quadratic programming solver <cite>solve_qp</cite> to fit the\nmodel. The initialization for the model is done using the warm-start by\ndefault in <cite>CVXPY</cite>.</p>\n<section id=\"id881\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id881\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>X<span class=\"classifier\">ndarray</span></dt><dd><p>Matrix to be fit by the QP solver calculated in\n<cite>MultiShellDeconvModel</cite></p>\n</dd>\n<dt>reg<span class=\"classifier\">ndarray</span></dt><dd><p>the regularization B matrix calculated in <cite>MultiShellDeconvModel</cite></p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"multi-tissue-basis\">\n<h3>multi_tissue_basis<a class=\"headerlink\" href=\"#multi-tissue-basis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.multi_tissue_basis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">multi_tissue_basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iso_comp</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.multi_tissue_basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Builds a basis for multi-shell multi-tissue CSD model.</p>\n<section id=\"id882\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id882\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nsh_order : int\niso_comp: int</p>\n<blockquote>\n<div><p>Number of tissue compartments for running the MSMT-CSD. Minimum\nnumber of compartments required is 2.</p>\n</div></blockquote>\n</section>\n<section id=\"id883\">\n<h4>Returns<a class=\"headerlink\" href=\"#id883\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>B<span class=\"classifier\">ndarray</span></dt><dd><p>Matrix of the spherical harmonics model used to fit the data</p>\n</dd>\n<dt>m<span class=\"classifier\">int <code class=\"docutils literal notranslate\"><span class=\"pre\">|m|</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">n</span></code></span></dt><dd><p>The order of the harmonic.</p>\n</dd>\n<dt>n<span class=\"classifier\">int <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span> <span class=\"pre\">0</span></code></span></dt><dd><p>The degree of the harmonic.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"solve-qp\">\n<h3>solve_qp<a class=\"headerlink\" href=\"#solve-qp\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.solve_qp\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">solve_qp</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">Q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">G</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">H</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.solve_qp\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Helper function to set up and solve the Quadratic Program (QP) in CVXPY.\nA QP problem has the following form:\nminimize      1/2 x\u2019 P x + Q\u2019 x\nsubject to    G x &lt;= H</p>\n<p>Here the QP solver is based on CVXPY and uses OSQP.</p>\n<section id=\"id884\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id884\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>P<span class=\"classifier\">ndarray</span></dt><dd><p>n x n matrix for the primal QP objective function.</p>\n</dd>\n<dt>Q<span class=\"classifier\">ndarray</span></dt><dd><p>n x 1 matrix for the primal QP objective function.</p>\n</dd>\n<dt>G<span class=\"classifier\">ndarray</span></dt><dd><p>m x n matrix for the inequality constraint.</p>\n</dd>\n<dt>H<span class=\"classifier\">ndarray</span></dt><dd><p>m x 1 matrix for the inequality constraint.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id885\">\n<h4>Returns<a class=\"headerlink\" href=\"#id885\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>x<span class=\"classifier\">array</span></dt><dd><p>Optimal solution to the QP problem.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"multi-shell-fiber-response\">\n<h3>multi_shell_fiber_response<a class=\"headerlink\" href=\"#multi-shell-fiber-response\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.multi_shell_fiber_response\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">multi_shell_fiber_response</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wm_rf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_rf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_rf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.multi_shell_fiber_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fiber response function estimation for multi-shell data.</p>\n<section id=\"id886\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id886\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>sh_order<span class=\"classifier\">int</span></dt><dd><p>Maximum spherical harmonics order.</p>\n</dd>\n<dt>bvals<span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the b-values. Must be unique b-values, like outputted\nby <cite>dipy.core.gradients.unique_bvals_tolerance</cite>.</p>\n</dd>\n<dt>wm_rf<span class=\"classifier\">(4, len(bvals)) ndarray</span></dt><dd><p>Response function of the WM tissue, for each bvals.</p>\n</dd>\n<dt>gm_rf<span class=\"classifier\">(4, len(bvals)) ndarray</span></dt><dd><p>Response function of the GM tissue, for each bvals.</p>\n</dd>\n<dt>csf_rf<span class=\"classifier\">(4, len(bvals)) ndarray</span></dt><dd><p>Response function of the CSF tissue, for each bvals.</p>\n</dd>\n<dt>sphere<span class=\"classifier\"><cite>dipy.core.Sphere</cite> instance, optional</span></dt><dd><p>Sphere where the signal will be evaluated.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id887\">\n<h4>Returns<a class=\"headerlink\" href=\"#id887\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>MultiShellResponse</dt><dd><p>MultiShellResponse object.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"mask-for-response-msmt\">\n<h3>mask_for_response_msmt<a class=\"headerlink\" href=\"#mask-for-response-msmt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.mask_for_response_msmt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mask_for_response_msmt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_center</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_radii</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wm_fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.7</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_md_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0007</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_md_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.002</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.mask_for_response_msmt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Computation of masks for multi-shell multi-tissue (msmt) response</dt><dd><p>function using FA and MD.</p>\n</dd>\n</dl>\n<section id=\"id888\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id888\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data (4D)</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>roi_center<span class=\"classifier\">array-like, (3,)</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt>roi_radii<span class=\"classifier\">int or array-like, (3,)</span></dt><dd><p>radii of cuboid ROI</p>\n</dd>\n<dt>wm_fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold for WM.</p>\n</dd>\n<dt>gm_fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold for GM.</p>\n</dd>\n<dt>csf_fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold for CSF.</p>\n</dd>\n<dt>gm_md_thr<span class=\"classifier\">float</span></dt><dd><p>MD threshold for GM.</p>\n</dd>\n<dt>csf_md_thr<span class=\"classifier\">float</span></dt><dd><p>MD threshold for CSF.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id889\">\n<h4>Returns<a class=\"headerlink\" href=\"#id889\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mask_wm<span class=\"classifier\">ndarray</span></dt><dd><p>Mask of voxels within the ROI and with FA above the FA threshold\nfor WM.</p>\n</dd>\n<dt>mask_gm<span class=\"classifier\">ndarray</span></dt><dd><p>Mask of voxels within the ROI and with FA below the FA threshold\nfor GM and with MD below the MD threshold for GM.</p>\n</dd>\n<dt>mask_csf<span class=\"classifier\">ndarray</span></dt><dd><p>Mask of voxels within the ROI and with FA below the FA threshold\nfor CSF and with MD below the MD threshold for CSF.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id890\">\n<h4>Notes<a class=\"headerlink\" href=\"#id890\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In msmt-CSD there is an important pre-processing step: the estimation of\nevery tissue\u2019s response function. In order to do this, we look for voxels\ncorresponding to WM, GM and CSF. This function aims to accomplish that by\nreturning a mask of voxels within a ROI and who respect some threshold\nconstraints, for each tissue. More precisely, the WM mask must have a FA\nvalue above a given threshold. The GM mask and CSF mask must have a FA\nbelow given thresholds and a MD below other thresholds. To get the FA and\nMD, we need to fit a Tensor model to the datasets.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"response-from-mask-msmt\">\n<h3>response_from_mask_msmt<a class=\"headerlink\" href=\"#response-from-mask-msmt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.response_from_mask_msmt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">response_from_mask_msmt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask_wm</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask_gm</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask_csf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.response_from_mask_msmt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Computation of multi-shell multi-tissue (msmt) response</dt><dd><p>functions from given tissues masks.</p>\n</dd>\n</dl>\n<section id=\"id891\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id891\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>mask_wm<span class=\"classifier\">ndarray</span></dt><dd><p>mask from where to compute the WM response function.</p>\n</dd>\n<dt>mask_gm<span class=\"classifier\">ndarray</span></dt><dd><p>mask from where to compute the GM response function.</p>\n</dd>\n<dt>mask_csf<span class=\"classifier\">ndarray</span></dt><dd><p>mask from where to compute the CSF response function.</p>\n</dd>\n<dt>tol<span class=\"classifier\">int</span></dt><dd><p>tolerance gap for b-values clustering. (Default = 20)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id892\">\n<h4>Returns<a class=\"headerlink\" href=\"#id892\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response_wm<span class=\"classifier\">ndarray, (len(unique_bvals_tolerance(gtab.bvals))-1, 4)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>) for WM for each unique bvalues (except b0).</p>\n</dd>\n<dt>response_gm<span class=\"classifier\">ndarray, (len(unique_bvals_tolerance(gtab.bvals))-1, 4)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>) for GM for each unique bvalues (except b0).</p>\n</dd>\n<dt>response_csf<span class=\"classifier\">ndarray, (len(unique_bvals_tolerance(gtab.bvals))-1, 4)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>) for CSF for each unique bvalues (except b0).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id893\">\n<h4>Notes<a class=\"headerlink\" href=\"#id893\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In msmt-CSD there is an important pre-processing step: the estimation of\nevery tissue\u2019s response function. In order to do this, we look for voxels\ncorresponding to WM, GM and CSF. This information can be obtained by using\nmcsd.mask_for_response_msmt() through masks of selected voxels. The present\nfunction uses such masks to compute the msmt response functions.</p>\n<p>For the responses, we base our approach on the function\ncsdeconv.response_from_mask_ssst(), with the added layers of multishell and\nmulti-tissue (see the ssst function for more information about the\ncomputation of the ssst response function). This means that for each tissue\nwe use the previously found masks and loop on them. For each mask, we loop\non the b-values (clustered using the tolerance gap) to get many responses\nand then average them to get one response per tissue.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"auto-response-msmt\">\n<h3>auto_response_msmt<a class=\"headerlink\" href=\"#auto-response-msmt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.mcsd.auto_response_msmt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.mcsd.</span></span><span class=\"sig-name descname\"><span class=\"pre\">auto_response_msmt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tol</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_center</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi_radii</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wm_fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.7</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.3</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_fa_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_md_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_md_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0032</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.mcsd.auto_response_msmt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Automatic estimation of multi-shell multi-tissue (msmt) response</dt><dd><p>functions using FA and MD.</p>\n</dd>\n</dl>\n<section id=\"id894\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id894\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\ndata : ndarray</p>\n<blockquote>\n<div><p>diffusion data</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>roi_center<span class=\"classifier\">array-like, (3,)</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt>roi_radii<span class=\"classifier\">int or array-like, (3,)</span></dt><dd><p>radii of cuboid ROI</p>\n</dd>\n<dt>wm_fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold for WM.</p>\n</dd>\n<dt>gm_fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold for GM.</p>\n</dd>\n<dt>csf_fa_thr<span class=\"classifier\">float</span></dt><dd><p>FA threshold for CSF.</p>\n</dd>\n<dt>gm_md_thr<span class=\"classifier\">float</span></dt><dd><p>MD threshold for GM.</p>\n</dd>\n<dt>csf_md_thr<span class=\"classifier\">float</span></dt><dd><p>MD threshold for CSF.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id895\">\n<h4>Returns<a class=\"headerlink\" href=\"#id895\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>response_wm<span class=\"classifier\">ndarray, (len(unique_bvals_tolerance(gtab.bvals))-1, 4)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>) for WM for each unique bvalues (except b0).</p>\n</dd>\n<dt>response_gm<span class=\"classifier\">ndarray, (len(unique_bvals_tolerance(gtab.bvals))-1, 4)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>) for GM for each unique bvalues (except b0).</p>\n</dd>\n<dt>response_csf<span class=\"classifier\">ndarray, (len(unique_bvals_tolerance(gtab.bvals))-1, 4)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>) for CSF for each unique bvalues (except b0).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id896\">\n<h4>Notes<a class=\"headerlink\" href=\"#id896\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>In msmt-CSD there is an important pre-processing step: the estimation of\nevery tissue\u2019s response function. In order to do this, we look for voxels\ncorresponding to WM, GM and CSF. We get this information from\nmcsd.mask_for_response_msmt(), which returns masks of selected voxels\n(more details are available in the description of the function).</p>\n<p>With the masks, we compute the response functions by using\nmcsd.response_from_mask_msmt(), which returns the <cite>response</cite> for each\ntissue (more details are available in the description of the function).</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"meandiffusionkurtosismodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel\" title=\"dipy.reconst.msdki.MeanDiffusionKurtosisModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel</span></code></a><a class=\"headerlink\" href=\"#meandiffusionkurtosismodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MeanDiffusionKurtosisModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bmag</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>Mean signal Diffusion Kurtosis Model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bmag</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean Signal Diffusion Kurtosis Model <a href=\"#id1566\"><span class=\"problematic\" id=\"id897\">[1]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\ngtab : GradientTable class instance\n\nbmag : int\n    The order of magnitude that the bvalues have to differ to be\n    considered an unique b-value. Default: derive this value from the\n    maximal b-value provided: <span class=\"math notranslate nohighlight\">\\(bmag=log_{10}(max(bvals)) - 1\\)</span>.\n\nreturn_S0_hat : bool\n    If True, also return S0 values for the fit.\n\nargs, kwargs : arguments and keyword arguments passed to the\nfit_method. See msdki.wls_fit_msdki for details\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\n       Analysis and their Application to the Healthy Ageing Brain\n       (Doctoral thesis). Downing College, University of Cambridge.\n       <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the MSDKI model class</p>\n<section id=\"id898\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id898\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">ndarray ([X, Y, Z, \u2026], g)</span></dt><dd><p>ndarray containing the data signals in its last dimension.</p>\n</dd>\n<dt>mask<span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">msdki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this MeanDiffusionKurtosisModel class instance\ngiven parameters.\n\nParameters\n\u2014\u2014\u2014-\nmsdki_params : ndarray\n    The parameters of the mean signal diffusion kurtosis model\nS0 : float or ndarray\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nReturns\n\u2014\u2014-\nS : (\u2026, N) ndarray\n    Simulated mean signal based on the mean signal diffusion kurtosis\n    model\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n    <span class=\"math notranslate nohighlight\">\\(MS(b) = S_0 * exp(-bD + 1/6 b^{2} D^{2} K)\\)</span>, where <span class=\"math notranslate nohighlight\">\\(D\\)</span> and <span class=\"math notranslate nohighlight\">\\(K\\)</span> are\n    the mean signal diffusivity and mean signal kurtosis.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\n       Analysis and their Application to the Healthy Ageing Brain\n       (Doctoral thesis). Downing College, University of Cambridge.\n       <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"meandiffusionkurtosisfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit\" title=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit</span></code></a><a class=\"headerlink\" href=\"#meandiffusionkurtosisfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MeanDiffusionKurtosisFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a MeanDiffusionKurtosisFit class instance.</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.S0_hat\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">S0_hat</span></span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.S0_hat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.msd\">\n<span class=\"sig-name descname\"><span class=\"pre\">msd</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.msd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean signal diffusitivity (MSD) calculated from the mean signal\nDiffusion Kurtosis Model.</p>\n<section id=\"id899\">\n<h4>Returns<a class=\"headerlink\" href=\"#id899\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>msd<span class=\"classifier\">ndarray</span></dt><dd><p>Calculated signal mean diffusitivity.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id900\">\n<h4>References<a class=\"headerlink\" href=\"#id900\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id901\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\nAnalysis and their Application to the Healthy Ageing Brain\n(Doctoral thesis). Downing College, University of Cambridge.\n<a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.msk\">\n<span class=\"sig-name descname\"><span class=\"pre\">msk</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.msk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean signal kurtosis (MSK) calculated from the mean signal\nDiffusion Kurtosis Model.</p>\n<section id=\"id902\">\n<h4>Returns<a class=\"headerlink\" href=\"#id902\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>msk<span class=\"classifier\">ndarray</span></dt><dd><p>Calculated signal mean kurtosis.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id903\">\n<h4>References<a class=\"headerlink\" href=\"#id903\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id904\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\nAnalysis and their Application to the Healthy Ageing Brain\n(Doctoral thesis). Downing College, University of Cambridge.\n<a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a mean signal diffusion kurtosis model fit, predict the signal\non the vertices of a sphere\n\nParameters\n\u2014\u2014\u2014-\ngtab : a GradientTable class instance\n    This encodes the directions for which a prediction is made\n\nS0 : float array\n   The mean non-diffusion weighted signal in each voxel. Default:\n   The fitted S0 value in all voxels if it was fitted. Otherwise 1 in\n   all voxels.\n\nReturns\n\u2014\u2014-\nS : (\u2026, N) ndarray\n    Simulated mean signal based on the mean signal kurtosis model\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n<span class=\"math notranslate nohighlight\">\\(MS(b) = S_0 * exp(-bD + 1/6 b^{2} D^{2} K)\\)</span>, where <span class=\"math notranslate nohighlight\">\\(D\\)</span> and <span class=\"math notranslate nohighlight\">\\(k\\)</span> are the\nmean signal diffusivity and mean signal kurtosis.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\n       Analysis and their Application to the Healthy Ageing Brain\n       (Doctoral thesis). Downing College, University of Cambridge.\n       <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2di\">\n<span class=\"sig-name descname\"><span class=\"pre\">smt2di</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2di\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the intrisic diffusivity from the mean signal diffusional\nkurtosis parameters assuming the 2-compartmental spherical mean\ntechnique model <a href=\"#id1567\"><span class=\"problematic\" id=\"id905\">[1]_</span></a>, <a href=\"#id1568\"><span class=\"problematic\" id=\"id906\">[2]_</span></a></p>\n<section id=\"id907\">\n<h4>Returns<a class=\"headerlink\" href=\"#id907\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>smt2di<span class=\"classifier\">ndarray</span></dt><dd><p>Intrinsic diffusivity computed by converting MSDKI to SMT2.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id908\">\n<h4>Notes<a class=\"headerlink\" href=\"#id908\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Computes the intrinsic diffusivity using equation 16 of <a href=\"#id1569\"><span class=\"problematic\" id=\"id909\">[1]_</span></a></p>\n</section>\n<section id=\"id910\">\n<h4>References<a class=\"headerlink\" href=\"#id910\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id911\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Jespersen SN, Shemesh N (2019). Microscopic\nanisotropy misestimation in spherical\u2010mean single diffusion\nencoding MRI. Magnetic Resonance in Medicine (In press).\ndoi: 10.1002/mrm.27606</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id912\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Kaden E, Kelm ND, Carson RP, et al. (2016) Multi\u2010compartment\nmicroscopic diffusion imaging. Neuroimage 139:346\u2013359.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2f\">\n<span class=\"sig-name descname\"><span class=\"pre\">smt2f</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2f\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the axonal water fraction from the mean signal kurtosis\nassuming the 2-compartmental spherical mean technique model <a href=\"#id1570\"><span class=\"problematic\" id=\"id913\">[1]_</span></a>, <a href=\"#id1571\"><span class=\"problematic\" id=\"id914\">[2]_</span></a></p>\n<section id=\"id915\">\n<h4>Returns<a class=\"headerlink\" href=\"#id915\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>smt2f<span class=\"classifier\">ndarray</span></dt><dd><p>Axonal volume fraction calculated from MSK.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id916\">\n<h4>Notes<a class=\"headerlink\" href=\"#id916\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Computes the axonal water fraction from the mean signal kurtosis\nMSK using equation 17 of <a href=\"#id1572\"><span class=\"problematic\" id=\"id917\">[1]_</span></a></p>\n</section>\n<section id=\"id918\">\n<h4>References<a class=\"headerlink\" href=\"#id918\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id919\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Jespersen SN, Shemesh N (2019). Microscopic\nanisotropy misestimation in spherical\u2010mean single diffusion\nencoding MRI. Magnetic Resonance in Medicine (In press).\ndoi: 10.1002/mrm.27606</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id920\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Kaden E, Kelm ND, Carson RP, et al. (2016) Multi\u2010compartment\nmicroscopic diffusion imaging. Neuroimage 139:346\u2013359.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2uFA\">\n<span class=\"sig-name descname\"><span class=\"pre\">smt2uFA</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2uFA\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the microscopic fractional anisotropy from the mean signal\ndiffusional kurtosis parameters assuming the 2-compartmental spherical\nmean technique model <a href=\"#id1573\"><span class=\"problematic\" id=\"id921\">[1]_</span></a>, <a href=\"#id1574\"><span class=\"problematic\" id=\"id922\">[2]_</span></a></p>\n<section id=\"id923\">\n<h4>Returns<a class=\"headerlink\" href=\"#id923\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>smt2uFA<span class=\"classifier\">ndarray</span></dt><dd><p>Microscopic fractional anisotropy computed by converting MSDKI to\nSMT2.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id924\">\n<h4>Notes<a class=\"headerlink\" href=\"#id924\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Computes the intrinsic diffusivity using equation 10 of <a href=\"#id1575\"><span class=\"problematic\" id=\"id925\">[1]_</span></a></p>\n</section>\n<section id=\"id926\">\n<h4>References<a class=\"headerlink\" href=\"#id926\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id927\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Jespersen SN, Shemesh N (2019). Microscopic\nanisotropy misestimation in spherical\u2010mean single diffusion\nencoding MRI. Magnetic Resonance in Medicine (In press).\ndoi: 10.1002/mrm.27606</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id928\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Kaden E, Kelm ND, Carson RP, et al. (2016) Multi\u2010compartment\nmicroscopic diffusion imaging. Neuroimage 139:346\u2013359.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"mean-signal-bvalue\">\n<h3>mean_signal_bvalue<a class=\"headerlink\" href=\"#mean-signal-bvalue\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.mean_signal_bvalue\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mean_signal_bvalue</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bmag</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.mean_signal_bvalue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the average signal across different diffusion directions\nfor each unique b-value\n\nParameters\n\u2014\u2014\u2014-\ndata : ndarray ([X, Y, Z, \u2026], g)\n    ndarray containing the data signals in its last dimension.\ngtab : a GradientTable class instance\n    The gradient table containing diffusion acquisition parameters.\nbmag : The order of magnitude that the bvalues have to differ to be\n    considered an unique b-value. Default: derive this value from the\n    maximal b-value provided: <span class=\"math notranslate nohighlight\">\\(bmag=log_{10}(max(bvals)) - 1\\)</span>.\n\nReturns\n\u2014\u2014-\nmsignal : ndarray ([X, Y, Z, \u2026, nub])\n    Mean signal along all gradient directions for each unique b-value\n    Note that the last dimension contains the signal means and nub is the\n    number of unique b-values.\nng : ndarray(nub)\n    Number of gradient directions used to compute the mean signal for\n    all unique b-values\n\nNotes\n\u2014\u2013\nThis function assumes that directions are evenly sampled on the sphere or\non the hemisphere</p>\n</dd></dl>\n\n</section>\n<section id=\"msk-from-awf\">\n<h3>msk_from_awf<a class=\"headerlink\" href=\"#msk-from-awf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.msk_from_awf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">msk_from_awf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">f</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.msk_from_awf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes mean signal kurtosis from axonal water fraction estimates of the\nSMT2 model</p>\n<section id=\"id929\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id929\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>f<span class=\"classifier\">ndarray ([X, Y, Z, \u2026])</span></dt><dd><p>ndarray containing the axonal volume fraction estimate.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id930\">\n<h4>Returns<a class=\"headerlink\" href=\"#id930\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>msk<span class=\"classifier\">ndarray(nub)</span></dt><dd><p>Mean signal kurtosis (msk)</p>\n</dd>\n</dl>\n</section>\n<section id=\"id931\">\n<h4>Notes<a class=\"headerlink\" href=\"#id931\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Computes mean signal kurtosis using equations 17 of <a href=\"#id1576\"><span class=\"problematic\" id=\"id932\">[1]_</span></a></p>\n</section>\n<section id=\"id933\">\n<h4>References<a class=\"headerlink\" href=\"#id933\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id934\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Jespersen SN, Shemesh N (2019). Microscopic\nanisotropy misestimation in spherical\u2010mean single diffusion\nencoding MRI. Magnetic Resonance in Medicine (In press).\ndoi: 10.1002/mrm.27606</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"awf-from-msk\">\n<h3>awf_from_msk<a class=\"headerlink\" href=\"#awf-from-msk\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.awf_from_msk\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">awf_from_msk</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">msk</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.awf_from_msk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the axonal water fraction from the mean signal kurtosis\nassuming the 2-compartmental spherical mean technique model <a href=\"#id1577\"><span class=\"problematic\" id=\"id935\">[1]_</span></a>, <a href=\"#id1578\"><span class=\"problematic\" id=\"id936\">[2]_</span></a></p>\n<section id=\"id937\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id937\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>msk<span class=\"classifier\">ndarray ([X, Y, Z, \u2026])</span></dt><dd><p>Mean signal kurtosis (msk)</p>\n</dd>\n<dt>mask<span class=\"classifier\">ndarray, optional</span></dt><dd><p>A boolean array used to mark the coordinates in the data that should be\nanalyzed that has the same shape of the msdki parameters</p>\n</dd>\n</dl>\n</section>\n<section id=\"id938\">\n<h4>Returns<a class=\"headerlink\" href=\"#id938\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>smt2f<span class=\"classifier\">ndarray ([X, Y, Z, \u2026])</span></dt><dd><p>ndarray containing the axonal volume fraction estimate.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id939\">\n<h4>Notes<a class=\"headerlink\" href=\"#id939\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Computes the axonal water fraction from the mean signal kurtosis\nMSK using equation 17 of <a href=\"#id1579\"><span class=\"problematic\" id=\"id940\">[1]_</span></a></p>\n</section>\n<section id=\"id941\">\n<h4>References<a class=\"headerlink\" href=\"#id941\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id942\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Neto Henriques R, Jespersen SN, Shemesh N (2019). Microscopic\nanisotropy misestimation in spherical\u2010mean single diffusion\nencoding MRI. Magnetic Resonance in Medicine (In press).\ndoi: 10.1002/mrm.27606</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id943\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Kaden E, Kelm ND, Carson RP, et al. (2016) Multi\u2010compartment\nmicroscopic diffusion imaging. Neuroimage 139:346\u2013359.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"msdki-prediction\">\n<h3>msdki_prediction<a class=\"headerlink\" href=\"#msdki-prediction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.msdki_prediction\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">msdki_prediction</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">msdki_params</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.msdki_prediction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the mean signal given the parameters of the mean signal DKI, an\nGradientTable object and S0 signal.\n\nParameters\n\u2014\u2014\u2014-\nparams : ndarray ([X, Y, Z, \u2026], 2)\n    Array containing the mean signal diffusivity and mean signal kurtosis\n    in its last axis\ngtab : a GradientTable class instance\n    The gradient table for this prediction\nS0 : float or ndarray (optional)\n    The non diffusion-weighted signal in every voxel, or across all\n    voxels. Default: 1\n\nNotes\n\u2014\u2013\nThe predicted signal is given by:\n    <span class=\"math notranslate nohighlight\">\\(MS(b) = S_0 * exp(-bD + 1/6 b^{2} D^{2} K)\\)</span>, where <span class=\"math notranslate nohighlight\">\\(D\\)</span> and <span class=\"math notranslate nohighlight\">\\(K\\)</span> are the\n    mean signal diffusivity and mean signal kurtosis.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\n       Analysis and their Application to the Healthy Ageing Brain (Doctoral\n       thesis). Downing College, University of Cambridge.\n       <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</dd></dl>\n\n</section>\n<section id=\"wls-fit-msdki\">\n<h3>wls_fit_msdki<a class=\"headerlink\" href=\"#wls-fit-msdki\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.wls_fit_msdki\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">wls_fit_msdki</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">design_matrix</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">msignal</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ng</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_S0_hat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.wls_fit_msdki\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fits the mean signal diffusion kurtosis imaging based on a weighted\nleast square solution <a href=\"#id1580\"><span class=\"problematic\" id=\"id944\">[1]_</span></a>.</p>\n<section id=\"id945\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id945\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (nub, 3)</span></dt><dd><p>Design matrix holding the covariants used to solve for the regression\ncoefficients of the mean signal diffusion kurtosis model. Note that\nnub is the number of unique b-values</p>\n</dd>\n<dt>msignal<span class=\"classifier\">ndarray ([X, Y, Z, \u2026, nub])</span></dt><dd><p>Mean signal along all gradient directions for each unique b-value\nNote that the last dimension should contain the signal means and nub\nis the number of unique b-values.</p>\n</dd>\n<dt>ng<span class=\"classifier\">ndarray(nub)</span></dt><dd><p>Number of gradient directions used to compute the mean signal for\nall unique b-values</p>\n</dd>\n<dt>mask<span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float, optional</span></dt><dd><p>Voxel with mean signal intensities lower than the min positive signal\nare not processed. Default: 0.0001</p>\n</dd>\n<dt>return_S0_hat<span class=\"classifier\">bool</span></dt><dd><p>If True, also return S0 values for the fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id946\">\n<h4>Returns<a class=\"headerlink\" href=\"#id946\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">array (\u2026, 2)</span></dt><dd><p>Containing the mean signal diffusivity and mean signal kurtosis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id947\">\n<h4>References<a class=\"headerlink\" href=\"#id947\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id948\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Henriques, R.N., 2018. Advanced Methods for Diffusion MRI Data\nAnalysis and their Application to the Healthy Ageing Brain\n(Doctoral thesis). Downing College, University of Cambridge.\n<a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"id949\">\n<h3>design_matrix<a class=\"headerlink\" href=\"#id949\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.msdki.design_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.msdki.</span></span><span class=\"sig-name descname\"><span class=\"pre\">design_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ubvals</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.msdki.design_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs design matrix for the mean signal diffusion kurtosis model</p>\n<section id=\"id950\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id950\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ubvals<span class=\"classifier\">array</span></dt><dd><p>Containing the unique b-values of the data.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id951\">\n<h4>Returns<a class=\"headerlink\" href=\"#id951\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (nb, 3)</span></dt><dd><p>Design matrix or B matrix for the mean signal diffusion kurtosis\nmodel assuming that parameters are in the following order:\ndesign_matrix[j, :] = (msd, msk, S0)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"multivoxelfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit\" title=\"dipy.reconst.multi_voxel.MultiVoxelFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit</span></code></a><a class=\"headerlink\" href=\"#multivoxelfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.MultiVoxelFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.multi_voxel.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MultiVoxelFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_array</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a></p>\n<p>Holds an array of fits and allows access to their attributes and\nmethods</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.MultiVoxelFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_array</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.MultiVoxelFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict for the multi-voxel object using each single-object\u2019s\nprediction API, with S0 provided from an array.</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.MultiVoxelFit.shape\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shape</span></span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit.shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"callablearray\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.CallableArray\" title=\"dipy.reconst.multi_voxel.CallableArray\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CallableArray</span></code></a><a class=\"headerlink\" href=\"#callablearray\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.CallableArray\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.multi_voxel.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CallableArray</span></span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.CallableArray\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ndarray</span></code></p>\n<p>An array which can be called like a function</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.CallableArray.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.CallableArray.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"multi-voxel-fit\">\n<h3>multi_voxel_fit<a class=\"headerlink\" href=\"#multi-voxel-fit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.multi_voxel.multi_voxel_fit\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.multi_voxel.</span></span><span class=\"sig-name descname\"><span class=\"pre\">multi_voxel_fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">single_voxel_fit</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.multi_voxel.multi_voxel_fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Method decorator to turn a single voxel model fit\ndefinition into a multi voxel model fit definition</p>\n</dd></dl>\n\n</section>\n<section id=\"odfmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a><a class=\"headerlink\" href=\"#odfmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.OdfModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.odf.</span></span><span class=\"sig-name descname\"><span class=\"pre\">OdfModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.OdfModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>An abstract class to be sub-classed by specific odf models</p>\n<p>All odf models should provide a fit method which may take data as it\u2019s\nfirst and only argument.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.OdfModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.OdfModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialization of the abstract class for signal reconstruction models</p>\n<section id=\"id952\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id952\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.OdfModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.OdfModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>To be implemented by specific odf models</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"odffit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a><a class=\"headerlink\" href=\"#odffit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.OdfFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.odf.</span></span><span class=\"sig-name descname\"><span class=\"pre\">OdfFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.OdfFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.OdfFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.OdfFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.OdfFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.OdfFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>To be implemented but specific odf models</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"gfa\">\n<h3>gfa<a class=\"headerlink\" href=\"#gfa\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.gfa\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.odf.</span></span><span class=\"sig-name descname\"><span class=\"pre\">gfa</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">samples</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.gfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The general fractional anisotropy of a function evaluated\non the unit sphere\n\nParameters\n\u2014\u2014\u2014-\nsamples : ndarray\n    Values of data on the unit sphere.\n\nReturns\n\u2014\u2014-\ngfa : ndarray\n    GFA evaluated in each entry of the array, along the last dimension.\n    An <cite>np.nan</cite> is returned for coordinates that contain all-zeros in\n    <cite>samples</cite>.\n\nNotes\n\u2014\u2013\nThe GFA is defined as <a href=\"#id1581\"><span class=\"problematic\" id=\"id953\">[1]_</span></a> ::\n\n    sqrt{frac{n sum_i{(Psi_i - &lt;Psi&gt;)^2}}{(n-1) sum{Psi_i ^ 2}}}\n\nWhere <span class=\"math notranslate nohighlight\">\\(\\Psi\\)</span> is an orientation distribution function sampled discretely on\nthe unit sphere and angle brackets denote average over the samples on the\nsphere.\n\n.. [1] Quality assessment of High Angular Resolution Diffusion Imaging\n       data using bootstrap on Q-ball reconstruction. J. Cohen Adad, M.\n       Descoteaux, L.L. Wald. JMRI 33: 1194-1208.</p>\n</dd></dl>\n\n</section>\n<section id=\"minmax-normalize\">\n<h3>minmax_normalize<a class=\"headerlink\" href=\"#minmax-normalize\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.odf.minmax_normalize\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.odf.</span></span><span class=\"sig-name descname\"><span class=\"pre\">minmax_normalize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">samples</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">out</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.odf.minmax_normalize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Min-max normalization of a function evaluated on the unit sphere</p>\n<p>Normalizes samples to <code class=\"docutils literal notranslate\"><span class=\"pre\">(samples</span> <span class=\"pre\">-</span> <span class=\"pre\">min(samples))</span> <span class=\"pre\">/</span> <span class=\"pre\">(max(samples)</span> <span class=\"pre\">-</span>\n<span class=\"pre\">min(samples))</span></code> for each unit sphere.</p>\n<section id=\"id954\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id954\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>samples<span class=\"classifier\">ndarray (\u2026, N)</span></dt><dd><p>N samples on a unit sphere for each point, stored along the last axis\nof the array.</p>\n</dd>\n<dt>out<span class=\"classifier\">ndrray (\u2026, N), optional</span></dt><dd><p>An array to store the normalized samples.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id955\">\n<h4>Returns<a class=\"headerlink\" href=\"#id955\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>out<span class=\"classifier\">ndarray, (\u2026, N)</span></dt><dd><p>Normalized samples.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qtdmrimodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriModel\" title=\"dipy.reconst.qtdmri.QtdmriModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtdmriModel</span></code></a><a class=\"headerlink\" href=\"#qtdmrimodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QtdmriModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_regularization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l1_regularization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l1_weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cartesian</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">anisotropic_scaling</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">constrain_q0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bval_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10000000000.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eigenvalue_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'ECOS'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<p>The q:math:<cite>tau</cite>-dMRI model [1] to analytically and continuously represent\nthe q:math:<cite>tau</cite> diffusion signal attenuation over diffusion sensitization\nq and diffusion time <span class=\"math notranslate nohighlight\">\\(\\tau\\)</span>. The model can be seen as an extension of\nthe MAP-MRI basis [2] towards different diffusion times.\n\nThe main idea is to model the diffusion signal over time and space as\na linear combination of continuous functions,\n\n..math::\n    :nowrap:\n        begin{equation}\n            hat{E}(textbf{q},tau;textbf{c}) =\n            sum_i^{N_{textbf{q}}}sum_k^{<a href=\"#id1582\"><span class=\"problematic\" id=\"id1583\">N_</span></a>tau} textbf{c}_{ik}\n            ,Phi_i(textbf{q}),T_k(tau),\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\Phi\\)</span> and <span class=\"math notranslate nohighlight\">\\(T\\)</span> are the spatial and temporal basis functions,\n<span class=\"math notranslate nohighlight\">\\(N_{\\textbf{q}}\\)</span> and <span class=\"math notranslate nohighlight\">\\(N_\\tau\\)</span> are the maximum spatial and temporal\norder, and <span class=\"math notranslate nohighlight\">\\(i,k\\)</span> are basis order iterators.\n\nThe estimation of the coefficients <span class=\"math notranslate nohighlight\">\\(c_i\\)</span> can be regularized using\neither analytic Laplacian regularization, sparsity regularization using\nthe l1-norm, or both to do a type of elastic net regularization.\n\nFrom the coefficients, there exists an analytical formula to estimate\nthe ODF, RTOP, RTAP, RTPP, QIV and MSD, for any diffusion time.\n\nParameters\n\u2014\u2014\u2014-\ngtab : GradientTable,\n    gradient directions and bvalues container class. The bvalues\n    should be in the normal s/mm^2. big_delta and small_delta need to\n    given in seconds.\nradial_order : unsigned int,\n    an even integer representing the spatial/radial order of the basis.\ntime_order : unsigned int,\n    an integer larger or equal than zero representing the time order\n    of the basis.\nlaplacian_regularization : bool,\n    Regularize using the Laplacian of the qt-dMRI basis.\nlaplacian_weighting: string or scalar,\n    The string \u2018GCV\u2019 makes it use generalized cross-validation to find\n    the regularization weight [3]. A scalar sets the regularization\n    weight to that value.\nl1_regularization : bool,\n    Regularize by imposing sparsity in the coefficients using the\n    l1-norm.\nl1_weighting : \u2018CV\u2019 or scalar,\n    The string \u2018CV\u2019 makes it use five-fold cross-validation to find\n    the regularization weight. A scalar sets the regularization weight\n    to that value.\ncartesian : bool\n    Whether to use the Cartesian or spherical implementation of the\n    qt-dMRI basis, which we first explored in [4].\nanisotropic_scaling : bool\n    Whether to use anisotropic scaling or isotropic scaling. This\n    option can be used to test if the Cartesian implementation is\n    equivalent with the spherical one when using the same scaling.\nnormalization : bool\n    Whether to normalize the basis functions such that their inner\n    product is equal to one. Normalization is only necessary when\n    imposing sparsity in the spherical basis if cartesian=False.\nconstrain_q0 : bool\n    whether to constrain the q0 point to unity along the tau-space.\n    This is necessary to ensure that <span class=\"math notranslate nohighlight\">\\(E(0,\\tau)=1\\)</span>.\nbval_threshold : float\n    the threshold b-value to be used, such that only data points below\n    that threshold are used when estimating the scale factors.\neigenvalue_threshold : float,\n    Sets the minimum of the tensor eigenvalues in order to avoid\n    stability problem.\ncvxpy_solver : str, optional\n    cvxpy solver name. Optionally optimize the positivity constraint\n    with a particular cvxpy solver. See See <a class=\"reference external\" href=\"http://www.cvxpy.org/\">http://www.cvxpy.org/</a> for\n    details. Default: ECOS.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\n   Representation of dMRI in Space and Time\u201d, Medical Image Analysis,\n   2017.\n\n.. [2] Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel\n   diffusion imaging method for mapping tissue microstructure\u201d,\n   NeuroImage, 2013.\n\n.. [3] Craven et al. \u201cSmoothing Noisy Data with Spline Functions.\u201d\n   NUMER MATH 31.4 (1978): 377-403.\n\n.. [4] Fick, Rutger HJ, et al. \u201cA unifying framework for spatial and\n   temporal diffusion in diffusion mri.\u201d International Conference on\n   Information Processing in Medical Imaging. Springer, Cham, 2015.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_regularization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">laplacian_weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l1_regularization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l1_weighting</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cartesian</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">anisotropic_scaling</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">constrain_q0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bval_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10000000000.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">eigenvalue_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'ECOS'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"qtdmrifit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit\" title=\"dipy.reconst.qtdmri.QtdmriFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtdmriFit</span></code></a><a class=\"headerlink\" href=\"#qtdmrifit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QtdmriFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qtdmri_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau_scaling</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solution_optimal</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qtdmri_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau_scaling</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solution_optimal</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates diffusion properties for a single voxel</p>\n<section id=\"id956\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id956\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>AnalyticalModel</p>\n</dd>\n<dt>qtdmri_coef<span class=\"classifier\">1d ndarray,</span></dt><dd><p>qtdmri coefficients</p>\n</dd>\n<dt>us<span class=\"classifier\">array, 3 x 1</span></dt><dd><p>spatial scaling factors</p>\n</dd>\n<dt>ut<span class=\"classifier\">float</span></dt><dd><p>temporal scaling factor</p>\n</dd>\n<dt>tau_scaling<span class=\"classifier\">float,</span></dt><dd><p>the temporal scaling that used to scale tau to the size of us</p>\n</dd>\n<dt>R<span class=\"classifier\">3x3 numpy array,</span></dt><dd><p>tensor eigenvectors</p>\n</dd>\n<dt>lopt<span class=\"classifier\">float,</span></dt><dd><p>laplacian regularization weight</p>\n</dd>\n<dt>alpha<span class=\"classifier\">float,</span></dt><dd><p>the l1 regularization weight</p>\n</dd>\n<dt>cvxpy_solution_optimal: bool,</dt><dd><p>indicates whether the cvxpy coefficient estimation reach an optimal\nsolution</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.fitted_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">fitted_signal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.fitted_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recovers the fitted signal for the given gradient table. If no gradient\ntable is given it recovers the signal for the gtab of the model object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.msd\">\n<span class=\"sig-name descname\"><span class=\"pre\">msd</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.msd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical Mean Squared Displacement (MSD) for a\ngiven diffusion time tau. It is defined as the Laplacian of the origin\nof the estimated signal <a href=\"#id1584\"><span class=\"problematic\" id=\"id957\">[1]_</span></a>. The analytical formula for the MAP-MRI\nbasis was derived in <a href=\"#id1585\"><span class=\"problematic\" id=\"id958\">[2]_</span></a> eq. (C13, D1). The qtdmri coefficients are\nfirst converted to mapmri coefficients following [3].</p>\n<section id=\"id959\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id959\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id960\">\n<h4>References<a class=\"headerlink\" href=\"#id960\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id961\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Cheng, J., 2014. Estimation and Processing of Ensemble Average\nPropagator and Its Features in Diffusion MRI. Ph.D. Thesis.</p>\n</aside>\n</aside>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id962\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.norm_of_laplacian_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">norm_of_laplacian_signal</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.norm_of_laplacian_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the norm of the laplacian of the fitted signal <a href=\"#id1586\"><span class=\"problematic\" id=\"id963\">[1]_</span></a>.\nThis information could be useful to assess if the extrapolation of the\nfitted signal contains spurious oscillations. A high laplacian norm may\nindicate that these are present, and any q-space indices that\nuse integrals of the signal may be corrupted (e.g. RTOP, RTAP, RTPP,\nQIV). In contrast to [1], the Laplacian now describes oscillations in\nthe 4-dimensional qt-signal [2].</p>\n<section id=\"id964\">\n<h4>References<a class=\"headerlink\" href=\"#id964\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id965\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical Orientation Distribution Function (ODF)\nfor a given diffusion time tau from the signal, <a href=\"#id1587\"><span class=\"problematic\" id=\"id966\">[1]_</span></a> Eq. (32). The\nqtdmri coefficients are first converted to mapmri coefficients\nfollowing [2].</p>\n<section id=\"id967\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id967\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">dipy sphere object</span></dt><dd><p>sphere object with vertice orientations to compute the ODF on.</p>\n</dd>\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n<dt>s<span class=\"classifier\">unsigned int</span></dt><dd><p>radial moment of the ODF</p>\n</dd>\n</dl>\n</section>\n<section id=\"id968\">\n<h4>References<a class=\"headerlink\" href=\"#id968\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id969\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et. al, \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id970\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.odf_sh\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf_sh</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.odf_sh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the real analytical odf for a given discrete sphere.\nComputes the design matrix of the ODF for the given sphere vertices\nand radial moment <a href=\"#id1588\"><span class=\"problematic\" id=\"id971\">[1]_</span></a> eq. (32). The radial moment s acts as a\nsharpening method. The analytical equation for the spherical ODF basis\nis given in <a href=\"#id1589\"><span class=\"problematic\" id=\"id972\">[2]_</span></a> eq. (C8). The qtdmri coefficients are first converted\nto mapmri coefficients following [3].</p>\n<section id=\"id973\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id973\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n<dt>s<span class=\"classifier\">unsigned int</span></dt><dd><p>radial moment of the ODF</p>\n</dd>\n</dl>\n</section>\n<section id=\"id974\">\n<h4>References<a class=\"headerlink\" href=\"#id974\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id975\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et. al, \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n</aside>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id976\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">pdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rt_points</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion propagator on a given set of real points.\nif the array r_points is non writeable, then intermediate\nresults are cached for faster recalculation</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qvals_or_gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recovers the reconstructed signal for any qvalue array or\ngradient table.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.qiv\">\n<span class=\"sig-name descname\"><span class=\"pre\">qiv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.qiv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical Q-space Inverse Variance (QIV) for given\ndiffusion time tau.\nIt is defined as the inverse of the Laplacian of the origin of the\nestimated propagator <a href=\"#id1590\"><span class=\"problematic\" id=\"id977\">[1]_</span></a> eq. (22). The analytical formula for the\nMAP-MRI basis was derived in <a href=\"#id1591\"><span class=\"problematic\" id=\"id978\">[2]_</span></a> eq. (C14, D2). The qtdmri\ncoefficients are first converted to mapmri coefficients following [3].</p>\n<section id=\"id979\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id979\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id980\">\n<h4>References<a class=\"headerlink\" href=\"#id980\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id981\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Hosseinbor et al. \u201cBessel fourier orientation reconstruction\n(bfor): An analytical diffusion propagator reconstruction for\nhybrid diffusion imaging and computation of q-space indices.\nNeuroImage 64, 2013, 650\u2013670.</p>\n</aside>\n</aside>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id982\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.qtdmri_to_mapmri_coef\">\n<span class=\"sig-name descname\"><span class=\"pre\">qtdmri_to_mapmri_coef</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.qtdmri_to_mapmri_coef\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This function converts the qtdmri coefficients to mapmri\ncoefficients for a given tau <a href=\"#id1592\"><span class=\"problematic\" id=\"id983\">[1]_</span></a>. The conversion is performed by a\nmatrix multiplication that evaluates the time-depenent part of the\nbasis and multiplies it with the coefficients, after which coefficients\nwith the same spatial orders are summed up, resulting in mapmri\ncoefficients.</p>\n<section id=\"id984\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id984\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id985\">\n<h4>References<a class=\"headerlink\" href=\"#id985\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id986\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.rtap\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.rtap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to the axis probability (RTAP)\nfor a given diffusion time tau, <a href=\"#id1593\"><span class=\"problematic\" id=\"id987\">[1]_</span></a> eq. (40, 44a). The analytical\nformula for the isotropic MAP-MRI basis was derived in <a href=\"#id1594\"><span class=\"problematic\" id=\"id988\">[2]_</span></a> eq. (C11).\nThe qtdmri coefficients are first converted to mapmri coefficients\nfollowing [3].</p>\n<section id=\"id989\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id989\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id990\">\n<h4>References<a class=\"headerlink\" href=\"#id990\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id991\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et. al, \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n</aside>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id992\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.rtop\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtop</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.rtop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to the origin probability (RTOP)\nfor a given diffusion time tau <a href=\"#id1595\"><span class=\"problematic\" id=\"id993\">[1]_</span></a> eq. (36, 43). The analytical\nformula for the isotropic MAP-MRI basis was derived in <a href=\"#id1596\"><span class=\"problematic\" id=\"id994\">[2]_</span></a> eq. (C11).\nThe qtdmri coefficients are first converted to mapmri coefficients\nfollowing [3].</p>\n<section id=\"id995\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id995\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id996\">\n<h4>References<a class=\"headerlink\" href=\"#id996\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id997\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et. al, \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n</aside>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id998\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.rtpp\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtpp</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.rtpp\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to the plane probability (RTPP)\nfor a given diffusion time tau, <a href=\"#id1597\"><span class=\"problematic\" id=\"id999\">[1]_</span></a> eq. (42). The analytical formula\nfor the isotropic MAP-MRI basis was derived in <a href=\"#id1598\"><span class=\"problematic\" id=\"id1000\">[2]_</span></a> eq. (C11). The\nqtdmri coefficients are first converted to mapmri coefficients\nfollowing [3].</p>\n<section id=\"id1001\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1001\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1002\">\n<h4>References<a class=\"headerlink\" href=\"#id1002\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1003\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et. al, \u201cMean apparent propagator (MAP) MRI: A novel\ndiffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</aside>\n</aside>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1004\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.sparsity_abs\">\n<span class=\"sig-name descname\"><span class=\"pre\">sparsity_abs</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.99</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.sparsity_abs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>As a measure of sparsity, calculates the number of largest\ncoefficients needed to absolute sum up to 99% of the total absolute sum\nof all coefficients</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.QtdmriFit.sparsity_density\">\n<span class=\"sig-name descname\"><span class=\"pre\">sparsity_density</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.99</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.QtdmriFit.sparsity_density\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>As a measure of sparsity, calculates the number of largest\ncoefficients needed to squared sum up to 99% of the total squared sum\nof all coefficients</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-to-mapmri-matrix\">\n<h3>qtdmri_to_mapmri_matrix<a class=\"headerlink\" href=\"#qtdmri-to-mapmri-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_to_mapmri_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_to_mapmri_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_to_mapmri_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates the matrix that maps the qtdmri coefficients to MAP-MRI\ncoefficients. The conversion is done by only evaluating the time basis for\na diffusion time tau and summing up coefficients with the same spatial\nbasis orders [1].</p>\n<section id=\"id1005\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1005\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer representing the spatial/radial order of the basis.</p>\n</dd>\n<dt>time_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an integer larger or equal than zero representing the time order\nof the basis.</p>\n</dd>\n<dt>ut<span class=\"classifier\">float</span></dt><dd><p>temporal scaling factor</p>\n</dd>\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1006\">\n<h4>References<a class=\"headerlink\" href=\"#id1006\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1007\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-isotropic-to-mapmri-matrix\">\n<h3>qtdmri_isotropic_to_mapmri_matrix<a class=\"headerlink\" href=\"#qtdmri-isotropic-to-mapmri-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_to_mapmri_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_to_mapmri_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_to_mapmri_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates the matrix that maps the spherical qtdmri coefficients to\nMAP-MRI coefficients. The conversion is done by only evaluating the time\nbasis for a diffusion time tau and summing up coefficients with the same\nspatial basis orders [1].</p>\n<section id=\"id1008\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1008\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer representing the spatial/radial order of the basis.</p>\n</dd>\n<dt>time_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an integer larger or equal than zero representing the time order\nof the basis.</p>\n</dd>\n<dt>ut<span class=\"classifier\">float</span></dt><dd><p>temporal scaling factor</p>\n</dd>\n<dt>tau<span class=\"classifier\">float</span></dt><dd><p>diffusion time (big_delta - small_delta / 3.) in seconds</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1009\">\n<h4>References<a class=\"headerlink\" href=\"#id1009\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1010\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-temporal-normalization\">\n<h3>qtdmri_temporal_normalization<a class=\"headerlink\" href=\"#qtdmri-temporal-normalization\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_temporal_normalization\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_temporal_normalization</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_temporal_normalization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalization factor for the temporal basis</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-mapmri-normalization\">\n<h3>qtdmri_mapmri_normalization<a class=\"headerlink\" href=\"#qtdmri-mapmri-normalization\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_mapmri_normalization\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_mapmri_normalization</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_mapmri_normalization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalization factor for Cartesian MAP-MRI basis. The scaling is the\nsame for every basis function depending only on the spatial scaling\nmu.</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-mapmri-isotropic-normalization\">\n<h3>qtdmri_mapmri_isotropic_normalization<a class=\"headerlink\" href=\"#qtdmri-mapmri-isotropic-normalization\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_mapmri_isotropic_normalization\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_mapmri_isotropic_normalization</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">j</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">u0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_mapmri_isotropic_normalization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalization factor for Spherical MAP-MRI basis. The normalization\nfor a basis function with orders [j,l,m] depends only on orders j,l and\nthe isotropic scale factor.</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-signal-matrix\">\n<h3><a href=\"#id1599\"><span class=\"problematic\" id=\"id1600\">qtdmri_signal_matrix_</span></a><a class=\"headerlink\" href=\"#qtdmri-signal-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_signal_matrix_\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_signal_matrix_</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_signal_matrix_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function to generate the qtdmri signal basis.</p>\n</dd></dl>\n\n</section>\n<section id=\"id1011\">\n<h3>qtdmri_signal_matrix<a class=\"headerlink\" href=\"#id1011\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_signal_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_signal_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_signal_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs the design matrix as a product of 3 separated radial,\nangular and temporal design matrices. It precomputes the relevant basis\norders for each one and finally puts them together according to the index\nmatrix</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-eap-matrix\">\n<h3>qtdmri_eap_matrix<a class=\"headerlink\" href=\"#qtdmri-eap-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_eap_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_eap_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">grid</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_eap_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs the design matrix as a product of 3 separated radial,\nangular and temporal design matrices. It precomputes the relevant basis\norders for each one and finally puts them together according to the index\nmatrix</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-isotropic-signal-matrix\">\n<h3><a href=\"#id1601\"><span class=\"problematic\" id=\"id1602\">qtdmri_isotropic_signal_matrix_</span></a><a class=\"headerlink\" href=\"#qtdmri-isotropic-signal-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix_\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_signal_matrix_</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"id1012\">\n<h3>qtdmri_isotropic_signal_matrix<a class=\"headerlink\" href=\"#id1012\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_signal_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"id1013\">\n<h3><a href=\"#id1603\"><span class=\"problematic\" id=\"id1604\">qtdmri_eap_matrix_</span></a><a class=\"headerlink\" href=\"#id1013\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_eap_matrix_\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_eap_matrix_</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">grid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_eap_matrix_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"qtdmri-isotropic-eap-matrix\">\n<h3><a href=\"#id1605\"><span class=\"problematic\" id=\"id1606\">qtdmri_isotropic_eap_matrix_</span></a><a class=\"headerlink\" href=\"#qtdmri-isotropic-eap-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix_\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_eap_matrix_</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">grid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"id1014\">\n<h3>qtdmri_isotropic_eap_matrix<a class=\"headerlink\" href=\"#id1014\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_eap_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">grid</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs the design matrix as a product of 3 separated radial,\nangular and temporal design matrices. It precomputes the relevant basis\norders for each one and finally puts them together according to the index\nmatrix</p>\n</dd></dl>\n\n</section>\n<section id=\"radial-basis-opt\">\n<h3>radial_basis_opt<a class=\"headerlink\" href=\"#radial-basis-opt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.radial_basis_opt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">radial_basis_opt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">j</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.radial_basis_opt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spatial basis dependent on spatial scaling factor us</p>\n</dd></dl>\n\n</section>\n<section id=\"angular-basis-opt\">\n<h3>angular_basis_opt<a class=\"headerlink\" href=\"#angular-basis-opt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.angular_basis_opt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">angular_basis_opt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.angular_basis_opt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Angular basis independent of spatial scaling factor us. Though it\nincludes q, it is independent of the data and can be precomputed.</p>\n</dd></dl>\n\n</section>\n<section id=\"radial-basis-eap-opt\">\n<h3>radial_basis_EAP_opt<a class=\"headerlink\" href=\"#radial-basis-eap-opt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.radial_basis_EAP_opt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">radial_basis_EAP_opt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">j</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.radial_basis_EAP_opt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"angular-basis-eap-opt\">\n<h3>angular_basis_EAP_opt<a class=\"headerlink\" href=\"#angular-basis-eap-opt\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.angular_basis_EAP_opt\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">angular_basis_EAP_opt</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">j</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.angular_basis_EAP_opt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"temporal-basis\">\n<h3>temporal_basis<a class=\"headerlink\" href=\"#temporal-basis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.temporal_basis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">temporal_basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">o</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.temporal_basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Temporal basis dependent on temporal scaling factor ut</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-index-matrix\">\n<h3>qtdmri_index_matrix<a class=\"headerlink\" href=\"#qtdmri-index-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_index_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_index_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_index_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the SHORE basis order indices according to [1].</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-isotropic-index-matrix\">\n<h3>qtdmri_isotropic_index_matrix<a class=\"headerlink\" href=\"#qtdmri-isotropic-index-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_index_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the SHORE basis order indices according to [1].</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-laplacian-reg-matrix\">\n<h3>qtdmri_laplacian_reg_matrix<a class=\"headerlink\" href=\"#qtdmri-laplacian-reg-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_laplacian_reg_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S_mat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">T_mat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">U_mat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part1_ut_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part23_ut_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part4_ut_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the cartesian qt-dMRI Laplacian regularization matrix. If\ngiven, uses precomputed matrices for temporal and spatial regularization\nmatrices to speed up computation. Follows the the formulation of Appendix B\nin [1].</p>\n<section id=\"id1015\">\n<h4>References<a class=\"headerlink\" href=\"#id1015\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1016\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-isotropic-laplacian-reg-matrix\">\n<h3>qtdmri_isotropic_laplacian_reg_matrix<a class=\"headerlink\" href=\"#qtdmri-isotropic-laplacian-reg-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_laplacian_reg_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part1_uq_iso_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part1_ut_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part23_ut_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">part4_ut_precomp</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the spherical qt-dMRI Laplacian regularization matrix. If\ngiven, uses precomputed matrices for temporal and spatial regularization\nmatrices to speed up computation. Follows the the formulation of Appendix C\nin [1].</p>\n<section id=\"id1017\">\n<h4>References<a class=\"headerlink\" href=\"#id1017\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1018\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part23-reg-matrix-q\">\n<h3>part23_reg_matrix_q<a class=\"headerlink\" href=\"#part23-reg-matrix-q\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part23_reg_matrix_q\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part23_reg_matrix_q</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">U_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">T_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part23_reg_matrix_q\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial cartesian spatial Laplacian regularization matrix following\nsecond line of Eq. (B2) in [1].</p>\n<section id=\"id1019\">\n<h4>References<a class=\"headerlink\" href=\"#id1019\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1020\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part23-iso-reg-matrix-q\">\n<h3>part23_iso_reg_matrix_q<a class=\"headerlink\" href=\"#part23-iso-reg-matrix-q\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part23_iso_reg_matrix_q\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part23_iso_reg_matrix_q</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part23_iso_reg_matrix_q\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial spherical spatial Laplacian regularization matrix following the\nequation below Eq. (C4) in [1].</p>\n<section id=\"id1021\">\n<h4>References<a class=\"headerlink\" href=\"#id1021\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1022\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part4-reg-matrix-q\">\n<h3>part4_reg_matrix_q<a class=\"headerlink\" href=\"#part4-reg-matrix-q\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part4_reg_matrix_q\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part4_reg_matrix_q</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">U_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part4_reg_matrix_q\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial cartesian spatial Laplacian regularization matrix following\nequation Eq. (B2) in [1].</p>\n<section id=\"id1023\">\n<h4>References<a class=\"headerlink\" href=\"#id1023\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1024\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part4-iso-reg-matrix-q\">\n<h3>part4_iso_reg_matrix_q<a class=\"headerlink\" href=\"#part4-iso-reg-matrix-q\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part4_iso_reg_matrix_q\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part4_iso_reg_matrix_q</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">us</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part4_iso_reg_matrix_q\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial spherical spatial Laplacian regularization matrix following the\nequation below Eq. (C4) in [1].</p>\n<section id=\"id1025\">\n<h4>References<a class=\"headerlink\" href=\"#id1025\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1026\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part1-reg-matrix-tau\">\n<h3>part1_reg_matrix_tau<a class=\"headerlink\" href=\"#part1-reg-matrix-tau\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part1_reg_matrix_tau\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part1_reg_matrix_tau</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part1_reg_matrix_tau\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial temporal Laplacian regularization matrix following\nAppendix B in [1].</p>\n<section id=\"id1027\">\n<h4>References<a class=\"headerlink\" href=\"#id1027\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1028\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part23-reg-matrix-tau\">\n<h3>part23_reg_matrix_tau<a class=\"headerlink\" href=\"#part23-reg-matrix-tau\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part23_reg_matrix_tau\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part23_reg_matrix_tau</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part23_reg_matrix_tau\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial temporal Laplacian regularization matrix following\nAppendix B in [1].</p>\n<section id=\"id1029\">\n<h4>References<a class=\"headerlink\" href=\"#id1029\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1030\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"part4-reg-matrix-tau\">\n<h3>part4_reg_matrix_tau<a class=\"headerlink\" href=\"#part4-reg-matrix-tau\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.part4_reg_matrix_tau\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">part4_reg_matrix_tau</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ind_mat</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ut</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.part4_reg_matrix_tau\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partial temporal Laplacian regularization matrix following\nAppendix B in [1].</p>\n<section id=\"id1031\">\n<h4>References<a class=\"headerlink\" href=\"#id1031\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1032\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"h\">\n<h3>H<a class=\"headerlink\" href=\"#h\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.H\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">H</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.H\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Step function of H(x)=1 if x&gt;=0 and zero otherwise. Used for the\ntemporal laplacian matrix.</p>\n</dd></dl>\n\n</section>\n<section id=\"id1033\">\n<h3>generalized_crossvalidation<a class=\"headerlink\" href=\"#id1033\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.generalized_crossvalidation\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">generalized_crossvalidation</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">M</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">LR</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">startpoint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0005</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.generalized_crossvalidation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generalized Cross Validation Function [1].</p>\n<section id=\"id1034\">\n<h4>References<a class=\"headerlink\" href=\"#id1034\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1035\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Craven et al. \u201cSmoothing Noisy Data with Spline Functions.\u201d\nNUMER MATH 31.4 (1978): 377-403.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"id1036\">\n<h3>GCV_cost_function<a class=\"headerlink\" href=\"#id1036\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.GCV_cost_function\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">GCV_cost_function</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weight</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">arguments</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.GCV_cost_function\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generalized Cross Validation Function that is iterated [1].</p>\n<section id=\"id1037\">\n<h4>References<a class=\"headerlink\" href=\"#id1037\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1038\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Craven et al. \u201cSmoothing Noisy Data with Spline Functions.\u201d\nNUMER MATH 31.4 (1978): 377-403.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-isotropic-scaling\">\n<h3>qtdmri_isotropic_scaling<a class=\"headerlink\" href=\"#qtdmri-isotropic-scaling\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_isotropic_scaling\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_isotropic_scaling</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs design matrix for fitting an exponential to the\ndiffusion time points.</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-anisotropic-scaling\">\n<h3>qtdmri_anisotropic_scaling<a class=\"headerlink\" href=\"#qtdmri-anisotropic-scaling\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_anisotropic_scaling\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_anisotropic_scaling</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">q</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvecs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_anisotropic_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs design matrix for fitting an exponential to the\ndiffusion time points.</p>\n</dd></dl>\n\n</section>\n<section id=\"design-matrix-spatial\">\n<h3>design_matrix_spatial<a class=\"headerlink\" href=\"#design-matrix-spatial\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.design_matrix_spatial\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">design_matrix_spatial</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bvecs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">qvals</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.design_matrix_spatial\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs design matrix for DTI weighted least squares or\nleast squares fitting. (Basser et al., 1994a)</p>\n<section id=\"id1039\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1039\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>bvecs<span class=\"classifier\">array (N x 3)</span></dt><dd><p>unit b-vectors of the acquisition.</p>\n</dd>\n<dt>qvals<span class=\"classifier\">array (N,)</span></dt><dd><p>corresponding q-values in 1/mm</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1040\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1040\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>design_matrix<span class=\"classifier\">array (g,7)</span></dt><dd><p>Design matrix or B matrix assuming Gaussian distributed tensor model\ndesign_matrix[j, :] = (Bxx, Byy, Bzz, Bxy, Bxz, Byz, dummy)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"create-rt-space-grid\">\n<h3>create_rt_space_grid<a class=\"headerlink\" href=\"#create-rt-space-grid\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.create_rt_space_grid\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">create_rt_space_grid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">grid_size_r</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_radius_r</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">grid_size_tau</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_radius_tau</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_radius_tau</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.create_rt_space_grid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates EAP grid (for potential positivity constraint).</p>\n</dd></dl>\n\n</section>\n<section id=\"qtdmri-number-of-coefficients\">\n<h3>qtdmri_number_of_coefficients<a class=\"headerlink\" href=\"#qtdmri-number-of-coefficients\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.qtdmri_number_of_coefficients\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qtdmri_number_of_coefficients</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">time_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.qtdmri_number_of_coefficients\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the total number of coefficients of the qtdmri basis given a\nradial and temporal order. Equation given below Eq (9) in [1].</p>\n<section id=\"id1041\">\n<h4>References<a class=\"headerlink\" href=\"#id1041\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1042\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Fick, Rutger HJ, et al. \u201cNon-Parametric GraphNet-Regularized\nRepresentation of dMRI in Space and Time\u201d, Medical Image Analysis,\n2017.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"l1-crossvalidation\">\n<h3>l1_crossvalidation<a class=\"headerlink\" href=\"#l1-crossvalidation\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.l1_crossvalidation\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">l1_crossvalidation</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b0s_mask</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">E</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">M</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weight_array</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">array([0.,</span> <span class=\"pre\">0.02,</span> <span class=\"pre\">0.04,</span> <span class=\"pre\">0.06,</span> <span class=\"pre\">0.08,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">0.12,</span> <span class=\"pre\">0.14,</span> <span class=\"pre\">0.16,</span> <span class=\"pre\">0.18,</span> <span class=\"pre\">0.2,</span> <span class=\"pre\">0.22,</span> <span class=\"pre\">0.24,</span> <span class=\"pre\">0.26,</span> <span class=\"pre\">0.28,</span> <span class=\"pre\">0.3,</span> <span class=\"pre\">0.32,</span> <span class=\"pre\">0.34,</span> <span class=\"pre\">0.36,</span> <span class=\"pre\">0.38,</span> <span class=\"pre\">0.4])</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.l1_crossvalidation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>cross-validation function to find the optimal weight of alpha for\nsparsity regularization</p>\n</dd></dl>\n\n</section>\n<section id=\"elastic-crossvalidation\">\n<h3>elastic_crossvalidation<a class=\"headerlink\" href=\"#elastic-crossvalidation\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.elastic_crossvalidation\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">elastic_crossvalidation</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b0s_mask</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">E</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">M</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">L</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lopt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weight_array</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">array([0.,</span> <span class=\"pre\">0.01,</span> <span class=\"pre\">0.02,</span> <span class=\"pre\">0.03,</span> <span class=\"pre\">0.04,</span> <span class=\"pre\">0.05,</span> <span class=\"pre\">0.06,</span> <span class=\"pre\">0.07,</span> <span class=\"pre\">0.08,</span> <span class=\"pre\">0.09,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">0.11,</span> <span class=\"pre\">0.12,</span> <span class=\"pre\">0.13,</span> <span class=\"pre\">0.14,</span> <span class=\"pre\">0.15,</span> <span class=\"pre\">0.16,</span> <span class=\"pre\">0.17,</span> <span class=\"pre\">0.18,</span> <span class=\"pre\">0.19,</span> <span class=\"pre\">0.2])</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.elastic_crossvalidation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>cross-validation function to find the optimal weight of alpha for\nsparsity regularization when also Laplacian regularization is used.</p>\n</dd></dl>\n\n</section>\n<section id=\"visualise-gradient-table-g-delta-rainbow\">\n<h3>visualise_gradient_table_G_Delta_rainbow<a class=\"headerlink\" href=\"#visualise-gradient-table-g-delta-rainbow\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qtdmri.</span></span><span class=\"sig-name descname\"><span class=\"pre\">visualise_gradient_table_G_Delta_rainbow</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">big_delta_start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">big_delta_end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">G_start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">G_end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bval_isolines</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">array([0,</span> <span class=\"pre\">250,</span> <span class=\"pre\">1000,</span> <span class=\"pre\">2500,</span> <span class=\"pre\">5000,</span> <span class=\"pre\">7500,</span> <span class=\"pre\">10000,</span> <span class=\"pre\">14000])</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha_shading</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.6</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This function visualizes a q-tau acquisition scheme as a function of\ngradient strength and pulse separation (big_delta). It represents every\nmeasurements at its G and big_delta position regardless of b-vector, with a\nbackground of b-value isolines for reference. It assumes there is only one\nunique pulse length (small_delta) in the acquisition scheme.</p>\n<section id=\"id1043\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1043\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable object</span></dt><dd><p>constructed gradient table with big_delta and small_delta given as\ninputs.</p>\n</dd>\n<dt>big_delta_start<span class=\"classifier\">float,</span></dt><dd><p>optional minimum big_delta that is plotted in seconds</p>\n</dd>\n<dt>big_delta_end<span class=\"classifier\">float,</span></dt><dd><p>optional maximum big_delta that is plotted in seconds</p>\n</dd>\n<dt>G_start<span class=\"classifier\">float,</span></dt><dd><p>optional minimum gradient strength that is plotted in T/m</p>\n</dd>\n<dt>G_end<span class=\"classifier\">float,</span></dt><dd><p>optional maximum gradient strength that is plotted in T/m</p>\n</dd>\n<dt>bval_isolines<span class=\"classifier\">array,</span></dt><dd><p>optional array of bvalue isolines that are plotted in the background</p>\n</dd>\n<dt>alpha_shading<span class=\"classifier\">float between [0-1]</span></dt><dd><p>optional shading of the bvalue colors in the background</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qtimodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiModel\" title=\"dipy.reconst.qti.QtiModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtiModel</span></code></a><a class=\"headerlink\" href=\"#qtimodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QtiModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'SCS'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fit_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'WLS'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'SCS'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Covariance tensor model of q-space trajectory imaging <a href=\"#id1607\"><span class=\"problematic\" id=\"id1044\">[1]_</span></a>.</p>\n<section id=\"id1045\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1045\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>gtab<span class=\"classifier\">dipy.core.gradients.GradientTable</span></dt><dd><p>Gradient table with b-tensors.</p>\n</dd>\n<dt>fit_method<span class=\"classifier\">str, optional</span></dt><dd><dl>\n<dt>Must be one of the following:</dt><dd><dl>\n<dt>\u2018OLS\u2019 for ordinary least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">qti._ols_fit()</span></code></p>\n</dd>\n<dt>\u2018WLS\u2019 for weighted least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">qti._wls_fit()</span></code></p>\n</dd>\n<dt>\u2018SDPDc\u2019 for semidefinite programming with positivity </dt><dd><blockquote>\n<div><p>constraints applied <a href=\"#id1608\"><span class=\"problematic\" id=\"id1046\">[2]_</span></a></p>\n</div></blockquote>\n<p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">qti._sdpdc_fit()</span></code></p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n<dt>cvxpy_solver: str, optionals</dt><dd><p>solver for the SDP formulation. default: \u2018SCS\u2019</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1047\">\n<h4>References<a class=\"headerlink\" href=\"#id1047\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1048\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin, Carl-Fredrik, et al. \u201cQ-space trajectory imaging for\nmultidimensional diffusion MRI of the human brain.\u201d Neuroimage 135\n(2016): 345-362. <a class=\"reference external\" href=\"https://doi.org/10.1016/j.neuroimage.2016.02.039\">https://doi.org/10.1016/j.neuroimage.2016.02.039</a>.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1049\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Herberthson M., Boito D., Dela Haije T., Feragen A., Westin CF.,\nOzarslan E., \u201cQ-space trajectory imaging with positivity\nconstraints (QTI+)\u201d in Neuroimage, Volume 238, 2021.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit QTI to data.</p>\n<section id=\"id1050\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1050\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>data<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Array of shape (\u2026, number of acquisitions).</p>\n</dd>\n<dt>mask<span class=\"classifier\">numpy.ndarray, optional</span></dt><dd><p>Array with the same shape as the data array of a single acquisition.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1051\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1051\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>qtifit<span class=\"classifier\">dipy.reconst.qti.QtiFit</span></dt><dd><p>The fitted model.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiModel.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate signals from this model class instance and given parameters.</p>\n<section id=\"id1052\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1052\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Array of shape (\u2026, 28) containing the model parameters. Element 0\nis the natural logarithm of the signal without diffusion-weighting,\nelements 1-6 are the diffusion tensor elements in Voigt notation,\nand elements 7-27 are the covariance tensor elements in Voigt\nnotation.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1053\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1053\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Signals.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"qtifit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit\" title=\"dipy.reconst.qti.QtiFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtiFit</span></code></a><a class=\"headerlink\" href=\"#qtifit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QtiFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fitted QTI model.</p>\n<section id=\"id1054\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1054\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>params<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Array of shape (\u2026, 28) containing the model parameters. Element 0\nis the natural logarithm of the signal without diffusion-weighting,\nelements 1-6 are the diffusion tensor elements in Voigt notation,\nand elements 7-27 are the covariance tensor elements in Voigt\nnotation.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.S0_hat\">\n<span class=\"sig-name descname\"><span class=\"pre\">S0_hat</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.S0_hat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Estimated signal without diffusion-weighting.</p>\n<section id=\"id1055\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1055\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>S0 : numpy.ndarray</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.c_c\">\n<span class=\"sig-name descname\"><span class=\"pre\">c_c</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.c_c\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Microscopic orientation coherence.</p>\n<blockquote>\n<div><p>c_c : numpy.ndarray</p>\n<p>Microscopic orientation coherence is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[C_c = \\]</div>\n</div></blockquote>\n</div></blockquote>\n<p>rac{<a href=\"#id1609\"><span class=\"problematic\" id=\"id1610\">C_</span></a>   ext{M}}{<a href=\"#id1611\"><span class=\"problematic\" id=\"id1612\">C_</span></a>mu}</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.c_m\">\n<span class=\"sig-name descname\"><span class=\"pre\">c_m</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.c_m\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized macroscopic anisotropy.</p>\n<blockquote>\n<div><p>c_m : numpy.ndarray</p>\n<p>Normalized macroscopic anisotropy is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[C_      ext{M} = \\]</div>\n</div></blockquote>\n</div></blockquote>\n<p>rac{3}{2} \nrac{langle mathbf{D} \nangle</p>\n<blockquote>\n<div><p>otimes langle mathbf{D}</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>angle<span class=\"classifier\">mathbb{E}_     ext{shear}}</span></dt><dd><p>{langle mathbf{D}</p>\n</dd>\n</dl>\n<p>angle otimes langle mathbf{D} \nangle :</p>\n<blockquote>\n<div><p>mathbb{E}_     ext{iso}}</p>\n</div></blockquote>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.c_md\">\n<span class=\"sig-name descname\"><span class=\"pre\">c_md</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.c_md\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized variance of mean diffusivities.</p>\n<blockquote>\n<div><p>c_md : numpy.ndarray</p>\n<p>Normalized variance of microscopic mean diffusivities is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[C_      ext{MD} = \\]</div>\n</div></blockquote>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>rac{mathbb{C}<span class=\"classifier\">mathbb{E}_ ext{bulk}}</span></dt><dd><p>{langle mathbf{D} otimes mathbf{D}</p>\n</dd>\n<dt>angle :</dt><dd><p>mathbb{E}_     ext{bulk}}</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.c_mu\">\n<span class=\"sig-name descname\"><span class=\"pre\">c_mu</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.c_mu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized microscopic anisotropy.</p>\n<blockquote>\n<div><p>c_mu : numpy.ndarray</p>\n<p>Normalized microscopic anisotropy is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[C_\\mu = \\]</div>\n</div></blockquote>\n</div></blockquote>\n<p>rac{3}{2} \nrac{langle mathbf{D} otimes mathbf{D}</p>\n<dl class=\"simple\">\n<dt>angle<span class=\"classifier\">mathbb{E}_     ext{shear}}{langle mathbf{D} otimes</span></dt><dd><p>mathbf{D}</p>\n</dd>\n</dl>\n<p>angle : mathbb{E}_     ext{iso}}</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.d_sq\">\n<span class=\"sig-name descname\"><span class=\"pre\">d_sq</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.d_sq\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion tensor\u2019s outer product with itself.</p>\n<section id=\"id1056\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1056\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>d_sq : numpy.ndarray</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.fa\">\n<span class=\"sig-name descname\"><span class=\"pre\">fa</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fractional anisotropy.</p>\n<section id=\"id1057\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1057\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>fa : numpy.ndarray</p>\n</section>\n<section id=\"id1058\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1058\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Fractional anisotropy is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[ext{FA} = \\sqrt{C_      ext{M}}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.k_bulk\">\n<span class=\"sig-name descname\"><span class=\"pre\">k_bulk</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.k_bulk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bulk kurtosis.</p>\n<blockquote>\n<div><p>k_bulk : numpy.ndarray</p>\n<p>Bulk kurtosis is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[K_      ext{bulk} = 3 \\]</div>\n</div></blockquote>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>rac{mathbb{C}<span class=\"classifier\">mathbb{E}_     ext{bulk}}</span></dt><dd><p>{langle mathbf{D}</p>\n</dd>\n</dl>\n<p>angle otimes langle mathbf{D} \nangle :</p>\n<blockquote>\n<div><p>mathbb{E}_     ext{bulk}}</p>\n</div></blockquote>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.k_mu\">\n<span class=\"sig-name descname\"><span class=\"pre\">k_mu</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.k_mu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Microscopic kurtosis.</p>\n<blockquote>\n<div><p>k_mu : numpy.ndarray</p>\n<p>Microscopic kurtosis is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[K_\\mu = \\]</div>\n</div></blockquote>\n</div></blockquote>\n<p>rac{6}{5} \nrac{langle mathbf{D} otimes mathbf{D}</p>\n<p>angle : mathbb{E}_     ext{shear}}{langle mathbf{D} \nangle</p>\n<blockquote>\n<div><p>otimes langle mathbf{D}</p>\n</div></blockquote>\n<p>angle : mathbb{E}_     ext{bulk}}</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.k_shear\">\n<span class=\"sig-name descname\"><span class=\"pre\">k_shear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.k_shear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shear kurtosis.</p>\n<blockquote>\n<div><p>k_shear : numpy.ndarray</p>\n<p>Shear kurtosis is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[K_      ext{shear} = \\]</div>\n</div></blockquote>\n</div></blockquote>\n<p>rac{6}{5} \nrac{mathbb{C} :</p>\n<blockquote>\n<div><p>mathbb{E}_     ext{shear}}{langle mathbf{D}</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>angle otimes</dt><dd><p>langle mathbf{D}</p>\n</dd>\n</dl>\n<p>angle : mathbb{E}_     ext{bulk}}</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.md\">\n<span class=\"sig-name descname\"><span class=\"pre\">md</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.md\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean diffusivity.</p>\n<blockquote>\n<div><p>md : numpy.ndarray</p>\n<p>Mean diffusivity is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[ext{MD} = \\langle \\mathbf{D} \\]</div>\n</div></blockquote>\n</div></blockquote>\n<p>angle : mathbf{E}_     ext{iso}</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.mean_d_sq\">\n<span class=\"sig-name descname\"><span class=\"pre\">mean_d_sq</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.mean_d_sq\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl>\n<dt>Average of microscopic diffusion tensors\u2019 outer products with</dt><dd><p>themselves.</p>\n<p>mean_d_sq : numpy.ndarray</p>\n<p>Average of microscopic diffusion tensors\u2019 outer products with themselves\nis calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\langle \\mathbf{D} \\otimes \\mathbf{D} \\]</div>\n</div></blockquote>\n</dd>\n<dt>angle = mathbb{C} +</dt><dd><p>langle mathbf{D}</p>\n</dd>\n</dl>\n<p>angle otimes langle mathbf{D} \nangle</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.mk\">\n<span class=\"sig-name descname\"><span class=\"pre\">mk</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.mk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean kurtosis.</p>\n<section id=\"id1059\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1059\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>mk : numpy.ndarray</p>\n</section>\n<section id=\"id1060\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1060\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Mean kurtosis is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[ext{MK} = K_    ext{bulk} + K_  ext{shear}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate signals from this model fit and a given gradient table.</p>\n<section id=\"id1061\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1061\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">dipy.core.gradients.GradientTable</span></dt><dd><p>Gradient table with b-tensors.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1062\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1062\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Signals.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.ufa\">\n<span class=\"sig-name descname\"><span class=\"pre\">ufa</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.ufa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Microscopic fractional anisotropy.</p>\n<section id=\"id1063\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1063\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>ufa : numpy.ndarray</p>\n</section>\n<section id=\"id1064\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1064\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Microscopic fractional anisotropy is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\mu     ext{FA} = \\sqrt{C_\\mu}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.v_iso\">\n<span class=\"sig-name descname\"><span class=\"pre\">v_iso</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.v_iso\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Total isotropic variance.</p>\n<section id=\"id1065\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1065\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>v_iso : numpy.ndarray</p>\n</section>\n<section id=\"id1066\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1066\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Total isotropic variance is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[V_      ext{iso} = \\mathbb{C} : \\mathbb{E}_     ext{iso}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.v_md\">\n<span class=\"sig-name descname\"><span class=\"pre\">v_md</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.v_md\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Variance of microscopic mean diffusivities.</p>\n<section id=\"id1067\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1067\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>v_md : numpy.ndarray</p>\n</section>\n<section id=\"id1068\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1068\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Variance of microscopic mean diffusivities is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[V_      ext{MD} = \\mathbb{C} : \\mathbb{E}_      ext{bulk}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.QtiFit.v_shear\">\n<span class=\"sig-name descname\"><span class=\"pre\">v_shear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.QtiFit.v_shear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shear variance.</p>\n<section id=\"id1069\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1069\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>v_shear : numpy.ndarray</p>\n</section>\n<section id=\"id1070\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1070\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>Shear variance is calculated as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[V_      ext{shear} = \\mathbb{C} : \\mathbb{E}_   ext{shear}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"from-3x3-to-6x1\">\n<h3>from_3x3_to_6x1<a class=\"headerlink\" href=\"#from-3x3-to-6x1\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.from_3x3_to_6x1\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">from_3x3_to_6x1</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">T</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.from_3x3_to_6x1\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert symmetric 3 x 3 matrices into 6 x 1 vectors.</p>\n<section id=\"id1071\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1071\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of size (\u2026, 3, 3).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1072\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1072\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>V<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Converted vectors of size (\u2026, 6, 1).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1073\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1073\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The conversion of a matrix into a vector is defined as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\mathbf{V} = \begin{bmatrix}\nT_{11} &amp; T_{22} &amp; T_{33} &amp;\n\\sqrt{2} T_{23} &amp; \\sqrt{2} T_{13} &amp; \\sqrt{2} T_{12}\n\\end{bmatrix}^T\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"from-6x1-to-3x3\">\n<h3>from_6x1_to_3x3<a class=\"headerlink\" href=\"#from-6x1-to-3x3\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.from_6x1_to_3x3\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">from_6x1_to_3x3</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.from_6x1_to_3x3\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert 6 x 1 vectors into symmetric 3 x 3 matrices.</p>\n<section id=\"id1074\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1074\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>V<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of size (\u2026, 6, 1).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1075\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1075\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Converted matrices of size (\u2026, 3, 3).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1076\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1076\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The conversion of a matrix into a vector is defined as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\mathbf{V} = \begin{bmatrix}\nT_{11} &amp; T_{22} &amp; T_{33} &amp;\n\\sqrt{2} T_{23} &amp; \\sqrt{2} T_{13} &amp; \\sqrt{2} T_{12}\n\\end{bmatrix}^T\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"from-6x6-to-21x1\">\n<h3>from_6x6_to_21x1<a class=\"headerlink\" href=\"#from-6x6-to-21x1\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.from_6x6_to_21x1\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">from_6x6_to_21x1</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">T</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.from_6x6_to_21x1\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert symmetric 6 x 6 matrices into 21 x 1 vectors.</p>\n<section id=\"id1077\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1077\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of size (\u2026, 6, 6).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1078\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1078\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>V<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Converted vectors of size (\u2026, 21, 1).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1079\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1079\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The conversion of a matrix into a vector is defined as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\begin{matrix}\n\\mathbf{V} = &amp; \big[\nT_{11} &amp; T_{22} &amp; T_{33} \\\n&amp; \\sqrt{2} T_{23} &amp; \\sqrt{2} T_{13} &amp; \\sqrt{2} T_{12} \\\n&amp; \\sqrt{2} T_{14} &amp; \\sqrt{2} T_{15} &amp; \\sqrt{2} T_{16} \\\n&amp; \\sqrt{2} T_{24} &amp; \\sqrt{2} T_{25} &amp; \\sqrt{2} T_{26} \\\n&amp; \\sqrt{2} T_{34} &amp; \\sqrt{2} T_{35} &amp; \\sqrt{2} T_{36} \\\n&amp; T_{44} &amp; T_{55} &amp; T_{66} \\\n&amp; \\sqrt{2} T_{45} &amp; \\sqrt{2} T_{56} &amp; \\sqrt{2} T_{46} \big]^T\n\\end{matrix}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"from-21x1-to-6x6\">\n<h3>from_21x1_to_6x6<a class=\"headerlink\" href=\"#from-21x1-to-6x6\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.from_21x1_to_6x6\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">from_21x1_to_6x6</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.from_21x1_to_6x6\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert 21 x 1 vectors into symmetric 6 x 6 matrices.</p>\n<section id=\"id1080\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1080\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>V<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of size (\u2026, 21, 1).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1081\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1081\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Converted matrices of size (\u2026, 6, 6).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1082\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1082\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The conversion of a matrix into a vector is defined as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\begin{matrix}\n\\mathbf{V} = &amp; \big[\nT_{11} &amp; T_{22} &amp; T_{33} \\\n&amp; \\sqrt{2} T_{23} &amp; \\sqrt{2} T_{13} &amp; \\sqrt{2} T_{12} \\\n&amp; \\sqrt{2} T_{14} &amp; \\sqrt{2} T_{15} &amp; \\sqrt{2} T_{16} \\\n&amp; \\sqrt{2} T_{24} &amp; \\sqrt{2} T_{25} &amp; \\sqrt{2} T_{26} \\\n&amp; \\sqrt{2} T_{34} &amp; \\sqrt{2} T_{35} &amp; \\sqrt{2} T_{36} \\\n&amp; T_{44} &amp; T_{55} &amp; T_{66} \\\n&amp; \\sqrt{2} T_{45} &amp; \\sqrt{2} T_{56} &amp; \\sqrt{2} T_{46} \big]^T\n\\end{matrix}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"cvxpy-1x6-to-3x3\">\n<h3>cvxpy_1x6_to_3x3<a class=\"headerlink\" href=\"#cvxpy-1x6-to-3x3\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.cvxpy_1x6_to_3x3\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">cvxpy_1x6_to_3x3</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.cvxpy_1x6_to_3x3\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert a 1 x 6 vector into a symmetric 3 x 3 matrix.</p>\n<section id=\"id1083\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1083\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>V<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of size (1, 6).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1084\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1084\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">cvxpy.bmat</span></dt><dd><p>Converted matrix of size (3, 3).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1085\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1085\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The conversion of a matrix into a vector is defined as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\mathbf{V} = \begin{bmatrix}\nT_{11} &amp; T_{22} &amp; T_{33} &amp;\n\\sqrt{2} T_{23} &amp; \\sqrt{2} T_{13} &amp; \\sqrt{2} T_{12}\n\\end{bmatrix}^T\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"cvxpy-1x21-to-6x6\">\n<h3>cvxpy_1x21_to_6x6<a class=\"headerlink\" href=\"#cvxpy-1x21-to-6x6\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.cvxpy_1x21_to_6x6\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">cvxpy_1x21_to_6x6</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">V</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.cvxpy_1x21_to_6x6\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert 1 x 21 vector into a symmetric 6 x 6 matrix.</p>\n<section id=\"id1086\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1086\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>V<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of size (1, 21).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1087\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1087\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>T<span class=\"classifier\">cvxpy.bmat</span></dt><dd><p>Converted matrices of size (6, 6).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1088\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1088\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The conversion of a matrix into a vector is defined as</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\begin{matrix}\n\\mathbf{V} = &amp; \big[\nT_{11} &amp; T_{22} &amp; T_{33} \\\n&amp; \\sqrt{2} T_{23} &amp; \\sqrt{2} T_{13} &amp; \\sqrt{2} T_{12} \\\n&amp; \\sqrt{2} T_{14} &amp; \\sqrt{2} T_{15} &amp; \\sqrt{2} T_{16} \\\n&amp; \\sqrt{2} T_{24} &amp; \\sqrt{2} T_{25} &amp; \\sqrt{2} T_{26} \\\n&amp; \\sqrt{2} T_{34} &amp; \\sqrt{2} T_{35} &amp; \\sqrt{2} T_{36} \\\n&amp; T_{44} &amp; T_{55} &amp; T_{66} \\\n&amp; \\sqrt{2} T_{45} &amp; \\sqrt{2} T_{56} &amp; \\sqrt{2} T_{46} \big]^T\n\\end{matrix}\\]</div>\n</div></blockquote>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"dtd-covariance\">\n<h3>dtd_covariance<a class=\"headerlink\" href=\"#dtd-covariance\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.dtd_covariance\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">dtd_covariance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">DTD</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.dtd_covariance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate covariance of a diffusion tensor distribution (DTD).</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>DTD<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Diffusion tensor distribution of shape (number of tensors, 3, 3) or\n(number of tensors, 6, 1).</p>\n</dd>\n</dl>\n<dl class=\"simple\">\n<dt>C<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Covariance tensor of shape (6, 6).</p>\n</dd>\n</dl>\n<p>The covariance tensor is calculated according to the following equation and\nconverted into a rank-2 tensor <a href=\"#id1613\"><span class=\"problematic\" id=\"id1089\">[1]_</span></a>:</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[\\mathbb{C} = \\langle \\mathbf{D} \\otimes \\mathbf{D} \\]</div>\n</div></blockquote>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>angle -</dt><dd><p>langle mathbf{D}</p>\n</dd>\n</dl>\n<p>angle otimes langle mathbf{D} \nangle</p>\n<blockquote>\n<div><aside class=\"footnote brackets\" id=\"id1090\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Westin, Carl-Fredrik, et al. \u201cQ-space trajectory imaging for\nmultidimensional diffusion MRI of the human brain.\u201d Neuroimage 135\n(2016): 345-362. <a class=\"reference external\" href=\"https://doi.org/10.1016/j.neuroimage.2016.02.039\">https://doi.org/10.1016/j.neuroimage.2016.02.039</a>.</p>\n</aside>\n</aside>\n</div></blockquote>\n</dd></dl>\n\n</section>\n<section id=\"qti-signal\">\n<h3>qti_signal<a class=\"headerlink\" href=\"#qti-signal\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.qti_signal\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qti_signal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">D</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">C</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.qti_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate signals using the covariance tensor signal representation.</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">dipy.core.gradients.GradientTable</span></dt><dd><p>Gradient table with b-tensors.</p>\n</dd>\n<dt>D<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Diffusion tensors of shape (\u2026, 3, 3), (\u2026, 6, 1), or (\u2026, 6).</p>\n</dd>\n<dt>C<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Covariance tensors of shape (\u2026, 6, 6), (\u2026, 21, 1), or (\u2026, 21).</p>\n</dd>\n<dt>S0<span class=\"classifier\">numpy.ndarray, optional</span></dt><dd><p>Signal magnitudes without diffusion-weighting. Must be a single number\nor an array of same shape as D and C without the last two dimensions.</p>\n</dd>\n</dl>\n<dl class=\"simple\">\n<dt>S<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Simulated signals.</p>\n</dd>\n</dl>\n<p>The signal is generated according to</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[S = S_0 \\exp \\left(- \\mathbf{b} : \\langle \\mathbf{D} \\]</div>\n</div></blockquote>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>angle</dt><dd><ul class=\"simple\">\n<li></li>\n</ul>\n</dd>\n</dl>\n<p>rac{1}{2}(mathbf{b} otimes mathbf{b}) : mathbb{C} \night)</p>\n</dd></dl>\n\n</section>\n<section id=\"id1091\">\n<h3>design_matrix<a class=\"headerlink\" href=\"#id1091\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.qti.design_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.qti.</span></span><span class=\"sig-name descname\"><span class=\"pre\">design_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">btens</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.qti.design_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the design matrix from the b-tensors.</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>btens<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>An array of b-tensors of shape (number of acquisitions, 3, 3).</p>\n</dd>\n</dl>\n<dl class=\"simple\">\n<dt>X<span class=\"classifier\">numpy.ndarray</span></dt><dd><p>Design matrix.</p>\n</dd>\n</dl>\n<p>The design matrix is generated according to</p>\n<blockquote>\n<div><div class=\"math notranslate nohighlight\">\n\\[X = \begin{pmatrix} 1 &amp; -\\mathbf{b}_1^T &amp; \\]</div>\n</div></blockquote>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>rac{1}{2}(mathbf{b}_1</dt><dd><p>otimesmathbf{b}_1)^T </p>\n</dd>\n</dl>\n<p>dots &amp; \ndots &amp; \ndots 1 &amp;</p>\n<blockquote>\n<div><p>-mathbf{b}_n^T &amp;</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>rac{1}{2}(mathbf{b}_notimesmathbf{b}_n)^T</dt><dd><p>end{pmatrix}</p>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"rumbasdmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaSDModel\" title=\"dipy.reconst.rumba.RumbaSDModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RumbaSDModel</span></code></a><a class=\"headerlink\" href=\"#rumbasdmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaSDModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">RumbaSDModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wm_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">array([0.0017,</span> <span class=\"pre\">0.0002,</span> <span class=\"pre\">0.0002])</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0008</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">600</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">recon_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'smf'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_coils</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">voxelwise</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">use_tv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaSDModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaSDModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wm_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">array([0.0017,</span> <span class=\"pre\">0.0002,</span> <span class=\"pre\">0.0002])</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0008</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.003</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">600</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">recon_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'smf'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_coils</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">voxelwise</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">use_tv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaSDModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Robust and Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD) <a href=\"#id1614\"><span class=\"problematic\" id=\"id1092\">[1]_</span></a></p>\n<p>Modification of the Richardson-Lucy algorithm accounting for Rician\nand Noncentral Chi noise distributions, which more accurately\nrepresent MRI noise. Computes a maximum likelihood estimation of the\nfiber orientation density function (fODF) at each voxel. Includes\nwhite matter compartments alongside optional GM and CSF compartments\nto account for partial volume effects. This fit can be performed\nvoxelwise or globally. The global fit will proceed more quickly than\nthe voxelwise fit provided that the computer has adequate RAM (&gt;= 16 GB\nshould be sufficient for most datasets).</p>\n<p>Kernel for deconvolution constructed using a priori knowledge of white\nmatter response function, as well as the mean diffusivity of GM and/or\nCSF. RUMBA-SD is robust against impulse response imprecision, and thus\nthe default diffusivity values are often adequate <a href=\"#id1615\"><span class=\"problematic\" id=\"id1093\">[2]_</span></a>.</p>\n<section id=\"id1094\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1094\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nwm_response : 1d ndarray or 2d ndarray or AxSymShResponse, optional</p>\n<blockquote>\n<div><p>Tensor eigenvalues as a (3,) ndarray, multishell eigenvalues as\na (len(unique_bvals_tolerance(gtab.bvals))-1, 3) ndarray in\norder of smallest to largest b-value, or an AxSymShResponse.\nDefault: np.array([1.7e-3, 0.2e-3, 0.2e-3])</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>gm_response<span class=\"classifier\">float, optional</span></dt><dd><p>Mean diffusivity for GM compartment. If <cite>None</cite>, then grey\nmatter volume fraction is not computed. Default: 0.8e-3</p>\n</dd>\n<dt>csf_response<span class=\"classifier\">float, optional</span></dt><dd><p>Mean diffusivity for CSF compartment. If <cite>None</cite>, then CSF\nvolume fraction is not computed. Default: 3.0e-3</p>\n</dd>\n<dt>n_iter<span class=\"classifier\">int, optional</span></dt><dd><p>Number of iterations for fODF estimation. Must be a positive int.\nDefault: 600</p>\n</dd>\n<dt>recon_type<span class=\"classifier\">{\u2018smf\u2019, \u2018sos\u2019}, optional</span></dt><dd><p>MRI reconstruction method: spatial matched filter (SMF) or\nsum-of-squares (SoS). SMF reconstruction generates Rician noise\nwhile SoS reconstruction generates Noncentral Chi noise.\nDefault: \u2018smf\u2019</p>\n</dd>\n<dt>n_coils<span class=\"classifier\">int, optional</span></dt><dd><p>Number of coils in MRI scanner \u2013 only relevant in SoS\nreconstruction. Must be a positive int. Default: 1</p>\n</dd>\n<dt>R<span class=\"classifier\">int, optional</span></dt><dd><p>Acceleration factor of the acquisition. For SIEMENS,\nR = iPAT factor. For GE, R = ASSET factor. For PHILIPS,\nR = SENSE factor. Typical values are 1 or 2. Must be a positive\nint. Default: 1</p>\n</dd>\n<dt>voxelwise<span class=\"classifier\">bool, optional</span></dt><dd><p>If true, performs a voxelwise fit. If false, performs a global fit\non the entire brain at once. The global fit requires a 4D brain\nvolume in <cite>fit</cite>. Default: True</p>\n</dd>\n<dt>use_tv<span class=\"classifier\">bool, optional</span></dt><dd><p>If true, applies total variation regularization. This only takes\neffect in a global fit (<cite>voxelwise</cite> is set to <cite>False</cite>). TV can only\nbe applied to 4D brain volumes with no singleton dimensions.\nDefault: False</p>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere, optional</span></dt><dd><p>Sphere on which to construct fODF. If None, uses <cite>repulsion724</cite>.\nDefault: None</p>\n</dd>\n<dt>verbose<span class=\"classifier\">bool, optional</span></dt><dd><p>If true, logs updates on estimated signal-to-noise ratio after each\niteration. This only takes effect in a global fit (<cite>voxelwise</cite> is\nset to <cite>False</cite>). Default: False</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1095\">\n<h4>References<a class=\"headerlink\" href=\"#id1095\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1096\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Canales-Rodr\u00edguez, E. J., Daducci, A., Sotiropoulos, S. N.,\nCaruyer, E., Aja-Fern\u00e1ndez, S., Radua, J., Mendizabal, J. M. Y.,\nIturria-Medina, Y., Melie-Garc\u00eda, L., Alem\u00e1n-G\u00f3mez, Y.,\nThiran, J.-P., Sarr\u00f3, S., Pomarol-Clotet, E., &amp; Salvador, R.\n(2015). Spherical Deconvolution of Multichannel Diffusion MRI\nData with Non-Gaussian Noise Models and Spatial Regularization.\nPLOS ONE, 10(10), e0138910.\n<a class=\"reference external\" href=\"https://doi.org/10.1371/journal.pone.0138910\">https://doi.org/10.1371/journal.pone.0138910</a></p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1097\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Dell\u2019Acqua, F., Rizzo, G., Scifo, P., Clarke, R., Scotti, G., &amp;\nFazio, F. (2007). A Model-Based Deconvolution Approach to Solve\nFiber Crossing in Diffusion-Weighted MR Imaging. IEEE\nTransactions on Bio-Medical Engineering, 54, 462\u2013472.\n<a class=\"reference external\" href=\"https://doi.org/10.1109/TBME.2006.888830\">https://doi.org/10.1109/TBME.2006.888830</a></p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"rumbafit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit\" title=\"dipy.reconst.rumba.RumbaFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RumbaFit</span></code></a><a class=\"headerlink\" href=\"#rumbafit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">RumbaFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs fODF, GM/CSF volume fractions, and other derived results.</p>\n<p>fODF and GM/CSF fractions are normalized to collectively sum to 1 for\neach voxel.</p>\n<section id=\"id1098\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1098\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">RumbaSDModel</span></dt><dd><p>RumbaSDModel-SD model.</p>\n</dd>\n<dt>model_params<span class=\"classifier\">ndarray ([x, y, z], M)</span></dt><dd><p>fODF and GM/CSF volume fractions for each voxel.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.combined_odf_iso\">\n<span class=\"sig-name descname\"><span class=\"pre\">combined_odf_iso</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.combined_odf_iso\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs fODF combined with isotropic volume fraction at discrete\nvertices on model sphere.</p>\n<p>Distributes isotropic compartments evenly along each fODF direction.\nSums to 1.</p>\n<section id=\"id1099\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1099\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>combined<span class=\"classifier\">ndarray ([x, y, z], M-2)</span></dt><dd><p>fODF combined with isotropic volume fraction.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.f_csf\">\n<span class=\"sig-name descname\"><span class=\"pre\">f_csf</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.f_csf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs CSF volume fraction for each voxel.</p>\n<section id=\"id1100\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1100\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>f_csf<span class=\"classifier\">ndarray ([x, y, z])</span></dt><dd><p>CSF volume fraction.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.f_gm\">\n<span class=\"sig-name descname\"><span class=\"pre\">f_gm</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.f_gm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs GM volume fraction for each voxel.</p>\n<section id=\"id1101\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1101\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>f_gm<span class=\"classifier\">ndarray ([x, y, z])</span></dt><dd><p>GM volume fraction.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.f_iso\">\n<span class=\"sig-name descname\"><span class=\"pre\">f_iso</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.f_iso\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs isotropic volume fraction for each voxel.</p>\n<p>Equivalent to sum of GM and CSF volume fractions.</p>\n<section id=\"id1102\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1102\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>f_iso<span class=\"classifier\">ndarray ([x, y, z])</span></dt><dd><p>Isotropic volume fraction.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.f_wm\">\n<span class=\"sig-name descname\"><span class=\"pre\">f_wm</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.f_wm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs white matter volume fraction for each voxel.</p>\n<p>Equivalent to sum of fODF.</p>\n<section id=\"id1103\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1103\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>f_wm<span class=\"classifier\">ndarray ([x, y, z])</span></dt><dd><p>White matter volume fraction.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs fODF at discrete vertices on model sphere for each voxel.</p>\n<section id=\"id1104\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1104\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere, optional</span></dt><dd><p>Sphere on which to construct fODF. If specified, must be the same\nsphere used by the <cite>RumbaSDModel</cite> model. Default: None.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1105\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1105\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>odf<span class=\"classifier\">ndarray ([x, y, z], M-2)</span></dt><dd><p>fODF computed at each vertex on model sphere.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.RumbaFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.RumbaFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute signal prediction on model gradient table given given fODF\nand GM/CSF volume fractions for each voxel.</p>\n<section id=\"id1106\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1106\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable, optional</span></dt><dd><p>The gradients for which the signal will be predicted. Use the\nmodel\u2019s gradient table if <cite>None</cite>. Default: None</p>\n</dd>\n<dt>S0<span class=\"classifier\">ndarray ([x, y, z]) or float, optional</span></dt><dd><p>The non diffusion-weighted signal value for each voxel. If a float,\nthe same value is used for each voxel. If <cite>None</cite>, 1 is used for\neach voxel. Default: None</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1107\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1107\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>pred_sig<span class=\"classifier\">ndarray ([x, y, z], N)</span></dt><dd><p>The predicted signal.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"logger\">\n<h3>logger<a class=\"headerlink\" href=\"#logger\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.logger\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">logger</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.logger\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instances of the Logger class represent a single logging channel. A\n\u201clogging channel\u201d indicates an area of an application. Exactly how an\n\u201carea\u201d is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof \u201cinput processing\u201d might include sub-areas \u201cread CSV files\u201d, \u201cread\nXLS files\u201d and \u201cread Gnumeric files\u201d). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be \u201cinput\u201d for the upper\nlevel, and \u201cinput.csv\u201d, \u201cinput.xls\u201d and \u201cinput.gnu\u201d for the sub-levels.\nThere is no arbitrary limit to the depth of nesting.</p>\n</dd></dl>\n\n</section>\n<section id=\"rumba-deconv\">\n<h3>rumba_deconv<a class=\"headerlink\" href=\"#rumba-deconv\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.rumba_deconv\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">rumba_deconv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kernel</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">600</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">recon_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'smf'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_coils</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.rumba_deconv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit fODF and GM/CSF volume fractions for a voxel using RUMBA-SD <a href=\"#id1616\"><span class=\"problematic\" id=\"id1108\">[1]_</span></a>.\n\nDeconvolves the kernel from the diffusion-weighted signal by computing a\nmaximum likelihood estimation of the fODF. Minimizes the negative\nlog-likelihood of the data under Rician or Noncentral Chi noise\ndistributions by adapting the iterative technique developed in\nRichardson-Lucy deconvolution.\n\nParameters\n\u2014\u2014\u2014-\ndata : 1d ndarray (N,)\n    Signal values for a single voxel.\nkernel : 2d ndarray (N, M)\n    Deconvolution kernel mapping volume fractions of the M compartments to\n    N-length signal. Last two columns should be for GM and CSF.\nn_iter : int, optional\n    Number of iterations for fODF estimation. Must be a positive int.\n    Default: 600\nrecon_type : {\u2018smf\u2019, \u2018sos\u2019}, optional\n    MRI reconstruction method: spatial matched filter (SMF) or\n    sum-of-squares (SoS). SMF reconstruction generates Rician noise while\n    SoS reconstruction generates Noncentral Chi noise. Default: \u2018smf\u2019\nn_coils : int, optional\n    Number of coils in MRI scanner \u2013 only relevant in SoS reconstruction.\n    Must be a positive int. Default: 1\n\nReturns\n\u2014\u2014-\nfit_vec : 1d ndarray (M,)\n    Vector containing fODF and GM/CSF volume fractions. First M-2\n    components are fODF while last two are GM and CSF respectively.\n\nNotes\n\u2014\u2013\nThe diffusion MRI signal measured at a given voxel is a sum of\ncontributions from each intra-voxel compartment, including parallel white\nmatter (WM) fiber populations in a given orientation as well as effects\nfrom GM and CSF. The equation governing these  contributions is:\n\n<span class=\"math notranslate nohighlight\">\\(S_i = S_0\\left(\\sum_{j=1}^{M}f_j\\exp(-b_i\\textbf{v}_i^T\\textbf{D}_j\n\\textbf{v}_i) + f_{GM}\\exp(-b_iD_{GM})+f_{CSF}\\exp(-b_iD_{CSF})\\right)\\)</span>\n\nWhere <span class=\"math notranslate nohighlight\">\\(S_i\\)</span> is the resultant signal along the diffusion-sensitizing\ngradient unit vector <span class=\"math notranslate nohighlight\">\\(\\textbf{v_i}; i = 1, ..., N\\)</span> with a b-value of <span class=\"math notranslate nohighlight\">\\(b_i\\)</span>.\n<span class=\"math notranslate nohighlight\">\\(f_j; j = 1, ..., M\\)</span> is the volume fraction of the <span class=\"math notranslate nohighlight\">\\(j^{th}\\)</span> fiber\npopulation with an anisotropic diffusion tensor <span class=\"math notranslate nohighlight\">\\(\\textbf{D_j}\\)</span>.\n\n<span class=\"math notranslate nohighlight\">\\(f_{GM}\\)</span> and <span class=\"math notranslate nohighlight\">\\(f_{CSF}\\)</span> are the volume fractions and <span class=\"math notranslate nohighlight\">\\(D_{GM}\\)</span> and <span class=\"math notranslate nohighlight\">\\(D_{CSF}\\)</span>\nare the mean diffusivities of GM and CSF respectively.\n\nThis equation is linear in <span class=\"math notranslate nohighlight\">\\(f_j, f_{GM}, f_{CSF}\\)</span> and can be simplified to\na single matrix multiplication:\n\n<span class=\"math notranslate nohighlight\">\\(\\textbf{S} = \\textbf{Hf}\\)</span>\n\nWhere <span class=\"math notranslate nohighlight\">\\(\\textbf{S}\\)</span> is the signal vector at a certain voxel, <span class=\"math notranslate nohighlight\">\\(\\textbf{H}\\)</span> is\nthe deconvolution kernel, and <span class=\"math notranslate nohighlight\">\\(\\textbf{f}\\)</span> is the vector of volume\nfractions for each compartment.\n\nModern MRI scanners produce noise following a Rician or Noncentral Chi\ndistribution, depending on their signal reconstruction technique <a href=\"#id1617\"><span class=\"problematic\" id=\"id1109\">[2]_</span></a>.\nUsing this linear model, it can be shown that the likelihood of a signal\nunder a Noncentral Chi noise model is:\n\n<span class=\"math notranslate nohighlight\">\\(P(\\textbf{S}|\\textbf{H}, \\textbf{f}, \\sigma^2, n) = \\prod_{i=1}^{N}\\left(\n\\frac{S_i}{\\bar{S_i}}\\right)^n\\exp\\left\\{-\\frac{1}{2\\sigma^2}\\left[\nS_i^2 + \\bar{S}_i^2\\right]\\right\\}I_{n-1}\\left(\\frac{S_i\\bar{S}_i}\n{\\sigma^2}\\right)u(S_i)\\)</span>\n\nWhere <span class=\"math notranslate nohighlight\">\\(S_i\\)</span> and <span class=\"math notranslate nohighlight\">\\(\\bar{S}_i = \\textbf{Hf}\\)</span> are the measured and expected\nsignals respectively, and <span class=\"math notranslate nohighlight\">\\(n\\)</span> is the number of coils in the scanner, and\n<span class=\"math notranslate nohighlight\">\\(I_{n-1}\\)</span> is the modified Bessel function of first kind of order <span class=\"math notranslate nohighlight\">\\(n-1\\)</span>.\nThis gives the likelihood under a Rician distribution when <span class=\"math notranslate nohighlight\">\\(n\\)</span> is set to 1.\n\nBy taking the negative log of this with respect to <span class=\"math notranslate nohighlight\">\\(\\textbf{f}\\)</span> and setting\nthe derivative to 0, the <span class=\"math notranslate nohighlight\">\\(\\textbf{f}\\)</span> maximizing likelihood is found to be:\n\n<span class=\"math notranslate nohighlight\">\\(\\textbf{f} = \\textbf{f} \\circ \\frac{\\textbf{H}^T\\left[\\textbf{S}\\circ\n\\frac{I_n(\\textbf{S}\\circ \\textbf{Hf}/\\sigma^2)} {I_{n-1}(\\textbf{S}\n\\circ\\textbf{Hf}\\sigma^2)} \\right ]} {\\textbf{H}^T\\textbf{Hf}}\\)</span>\n\nThe solution can be found using an iterative scheme, just as in the\nRichardson-Lucy algorithm:\n\n<span class=\"math notranslate nohighlight\">\\(\\textbf{f}^{k+1} = \\textbf{f}^k \\circ \\frac{\\textbf{H}^T\\left[\\textbf{S}\n\\circ\\frac{I_n(\\textbf{S}\\circ\\textbf{Hf}^k/\\sigma^2)} {I_{n-1}(\\textbf{S}\n\\circ\\textbf{Hf}^k/\\sigma^2)} \\right ]} {\\textbf{H}^T\\textbf{Hf}^k}\\)</span>\n\nIn order to apply this, a reasonable estimate of <span class=\"math notranslate nohighlight\">\\(\\sigma^2\\)</span> is required.\nTo find this, a separate iterative scheme is found using the derivative\nof the negative log with respect to <span class=\"math notranslate nohighlight\">\\(\\sigma^2\\)</span>, and is run in parallel.\nThis is shown here:\n\n<span class=\"math notranslate nohighlight\">\\(\\alpha^{k+1} = \\frac{1}{nN}\\left\\{ \\frac{\\textbf{S}^T\\textbf{S} +\n\\textbf{f}^T\\textbf{H}^T\\textbf{Hf}}{2} - \\textbf{1}^T_N\\left[(\\textbf{S}\n\\circ\\textbf{Hf})\\circ\\frac{I_n(\\textbf{S}\\circ\\textbf{Hf}/\\alpha^k)}\n{I_{n-1}(\\textbf{S}\\circ\\textbf{Hf}/\\alpha^k)} \\right ]\\right \\}\\)</span>\n\nFor more details, see <a href=\"#id1618\"><span class=\"problematic\" id=\"id1110\">[1]_</span></a>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Canales-Rodr\u00edguez, E. J., Daducci, A., Sotiropoulos, S. N., Caruyer,\n       E., Aja-Fern\u00e1ndez, S., Radua, J., Mendizabal, J. M. Y.,\n       Iturria-Medina, Y., Melie-Garc\u00eda, L., Alem\u00e1n-G\u00f3mez, Y., Thiran,\n       J.-P.,Sarr\u00f3, S., Pomarol-Clotet, E., &amp; Salvador, R. (2015).\n       Spherical Deconvolution of Multichannel Diffusion MRI Data with\n       Non-Gaussian Noise Models and Spatial Regularization. PLOS ONE,\n       10(10), e0138910. <a class=\"reference external\" href=\"https://doi.org/10.1371/journal.pone.0138910\">https://doi.org/10.1371/journal.pone.0138910</a>\n\n.. [2] Constantinides, C. D., Atalar, E., &amp; McVeigh, E. R. (1997).\n       Signal-to-Noise Measurements in Magnitude Images from NMR Phased\n       Arrays. Magnetic Resonance in Medicine: Official Journal of the\n       Society of Magnetic Resonance in Medicine / Society of Magnetic\n       Resonance in Medicine, 38(5), 852\u2013857.</p>\n</dd></dl>\n\n</section>\n<section id=\"mbessel-ratio\">\n<h3>mbessel_ratio<a class=\"headerlink\" href=\"#mbessel-ratio\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.mbessel_ratio\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mbessel_ratio</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.mbessel_ratio\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fast computation of modified Bessel function ratio (first kind).\n\nComputes:\n\n<span class=\"math notranslate nohighlight\">\\(I_{n}(x) / I_{n-1}(x)\\)</span>\n\nusing Perron\u2019s continued fraction equation where <span class=\"math notranslate nohighlight\">\\(I_n\\)</span> is the modified\nBessel function of first kind, order <span class=\"math notranslate nohighlight\">\\(n\\)</span> <a href=\"#id1619\"><span class=\"problematic\" id=\"id1111\">[1]_</span></a>.\n\nParameters\n\u2014\u2014\u2014-\nn : int\n    Order of Bessel function in numerator (denominator is of order n-1).\n    Must be a positive int.\nx : float or ndarray\n    Value or array of values with which to compute ratio.\n\nReturns\n\u2014\u2014-\ny : float or ndarray\n    Result of ratio computation.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] W. Gautschi and J. Slavik, \u201cOn the computation of modified Bessel\n       function ratios,\u201d Math. Comp., vol. 32, no. 143, pp. 865\u2013875, 1978,\n       doi: 10.1090/S0025-5718-1978-0470267-9</p>\n</dd></dl>\n\n</section>\n<section id=\"generate-kernel\">\n<h3>generate_kernel<a class=\"headerlink\" href=\"#generate-kernel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.generate_kernel\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">generate_kernel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wm_response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gm_response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">csf_response</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.generate_kernel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate deconvolution kernel</p>\n<p>Compute kernel mapping orientation densities of white matter fiber\npopulations (along each vertex of the sphere) and isotropic volume\nfractions to a diffusion weighted signal.</p>\n<section id=\"id1112\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1112\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable\nsphere : Sphere</p>\n<blockquote>\n<div><p>Sphere with which to sample discrete fiber orientations in order to\nconstruct kernel</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>wm_response<span class=\"classifier\">1d ndarray or 2d ndarray or AxSymShResponse, optional</span></dt><dd><p>Tensor eigenvalues as a (3,) ndarray, multishell eigenvalues as\na (len(unique_bvals_tolerance(gtab.bvals))-1, 3) ndarray in\norder of smallest to largest b-value, or an AxSymShResponse.</p>\n</dd>\n<dt>gm_response<span class=\"classifier\">float, optional</span></dt><dd><p>Mean diffusivity for GM compartment. If <cite>None</cite>, then grey\nmatter compartment set to all zeros.</p>\n</dd>\n<dt>csf_response<span class=\"classifier\">float, optional</span></dt><dd><p>Mean diffusivity for CSF compartment. If <cite>None</cite>, then CSF\ncompartment set to all zeros.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1113\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1113\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>kernel<span class=\"classifier\">2d ndarray (N, M)</span></dt><dd><p>Computed kernel; can be multiplied with a vector consisting of volume\nfractions for each of M-2 fiber populations as well as GM and CSF\nfractions to produce a diffusion weighted signal.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"rumba-deconv-global\">\n<h3>rumba_deconv_global<a class=\"headerlink\" href=\"#rumba-deconv-global\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.rumba.rumba_deconv_global\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.rumba.</span></span><span class=\"sig-name descname\"><span class=\"pre\">rumba_deconv_global</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">kernel</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">600</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">recon_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'smf'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_coils</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">use_tv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.rumba.rumba_deconv_global\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit fODF for all voxels simultaneously using RUMBA-SD.\n\nDeconvolves the kernel from the diffusion-weighted signal at each voxel by\ncomputing a maximum likelihood estimation of the fODF <a href=\"#id1620\"><span class=\"problematic\" id=\"id1114\">[1]_</span></a>. Global fitting\nalso permits the use of total variation regularization (RUMBA-SD + TV). The\nspatial dependence introduced by TV promotes smoother solutions (i.e.\nprevents oscillations), while still allowing for sharp discontinuities\n<a href=\"#id1621\"><span class=\"problematic\" id=\"id1115\">[2]_</span></a>. This promotes smoothness and continuity along individual tracts while\npreventing smoothing of adjacent tracts.\n\nGenerally, global_fit will proceed more quickly than the voxelwise fit\nprovided that the computer has adequate RAM (&gt;= 16 GB should be more than\nsufficient).\n\nParameters\n\u2014\u2014\u2014-\ndata : 4d ndarray (x, y, z, N)\n    Signal values for entire brain. None of the volume dimensions x, y, z\n    can be 1 if TV regularization is required.\nkernel : 2d ndarray (N, M)\n    Deconvolution kernel mapping volume fractions of the M compartments to\n    N-length signal. Last two columns should be for GM and CSF.\nmask : 3d ndarray(x, y, z)\n    Binary mask specifying voxels of interest with 1; fODF will only be\n    fit at these voxels (0 elsewhere).\nn_iter : int, optional\n    Number of iterations for fODF estimation. Must be a positive int.\n    Default: 600\nrecon_type : {\u2018smf\u2019, \u2018sos\u2019}, optional\n    MRI reconstruction method: spatial matched filter (SMF) or\n    sum-of-squares (SoS). SMF reconstruction generates Rician noise while\n    SoS reconstruction generates Noncentral Chi noise. Default: \u2018smf\u2019\nn_coils : int, optional\n    Number of coils in MRI scanner \u2013 only relevant in SoS reconstruction.\n    Must be a positive int. Default: 1\nuse_tv : bool, optional\n    If true, applies total variation regularization. This requires a brain\n    volume with no singleton dimensions. Default: True\nverbose : bool, optional\n    If true, logs updates on estimated signal-to-noise ratio after each\n    iteration. Default: False\n\nReturns\n\u2014\u2014-\nfit_array : 4d ndarray (x, y, z, M)\n    fODF and GM/CSF volume fractions computed for each voxel. First M-2\n    components are fODF, while last two are GM and CSf respectively.\n\nNotes\n\u2014\u2013\nTV modifies our cost function as follows:\n\n<span class=\"math notranslate nohighlight\">\\(J(\\textbf{f}) = -\\log{P(\\textbf{S}|\\textbf{H}, \\textbf{f}, \\sigma^2, n)})+\n\\alpha_{TV}TV(\\textbf{f})\\)</span>\n\nwhere the first term is the negative log likelihood described in the notes\nof <cite>rumba_deconv</cite>, and the second term is the TV energy, or the sum of\ngradient absolute values for the fODF across the entire brain. This results\nin a new multiplicative factor in the iterative scheme, now becoming:\n\n<span class=\"math notranslate nohighlight\">\\(\\textbf{f}^{k+1} = \\textbf{f}^k \\circ \\frac{\\textbf{H}^T\\left[\\textbf{S}\n\\circ\\frac{I_n(\\textbf{S}\\circ\\textbf{Hf}^k/\\sigma^2)} {I_{n-1}(\\textbf{S}\n\\circ\\textbf{Hf}^k/\\sigma^2)} \\right ]} {\\textbf{H}^T\\textbf{Hf}^k}\\circ\n\\textbf{R}^k\\)</span>\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\textbf{R}^k\\)</span> is computed voxelwise by:\n\n<span class=\"math notranslate nohighlight\">\\((\\textbf{R}^k)_j = \\frac{1}{1 - \\alpha_{TV}div\\left(\\frac{\\triangledown[\n\\textbf{f}^k_{3D}]_j}{\\lvert\\triangledown[\\textbf{f}^k_{3D}]_j \\rvert}\n\\right)\\biggr\\rvert_{x, y, z}}\\)</span>\n\nHere, <span class=\"math notranslate nohighlight\">\\(\\triangledown\\)</span> is the symbol for the 3D gradient at any voxel.\n\nThe regularization strength, <span class=\"math notranslate nohighlight\">\\(\\alpha_{TV}\\)</span> is updated after each iteration\nby the discrepancy principle \u2013 specifically, it is selected to match the\nestimated variance after each iteration <a href=\"#id1622\"><span class=\"problematic\" id=\"id1116\">[3]_</span></a>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Canales-Rodr\u00edguez, E. J., Daducci, A., Sotiropoulos, S. N., Caruyer,\n       E., Aja-Fern\u00e1ndez, S., Radua, J., Mendizabal, J. M. Y.,\n       Iturria-Medina, Y., Melie-Garc\u00eda, L., Alem\u00e1n-G\u00f3mez, Y., Thiran,\n       J.-P., Sarr\u00f3, S., Pomarol-Clotet, E., &amp; Salvador, R. (2015).\n       Spherical Deconvolution of Multichannel Diffusion MRI Data with\n       Non-Gaussian Noise Models and Spatial Regularization. PLOS ONE,\n       10(10), e0138910. <a class=\"reference external\" href=\"https://doi.org/10.1371/journal.pone.0138910\">https://doi.org/10.1371/journal.pone.0138910</a>\n\n.. [2] Rudin, L. I., Osher, S., &amp; Fatemi, E. (1992). Nonlinear total\n       variation based noise removal algorithms. Physica D: Nonlinear\n       Phenomena, 60(1), 259\u2013268.\n       <a class=\"reference external\" href=\"https://doi.org/10.1016/0167-2789(92)90242-F\">https://doi.org/10.1016/0167-2789(92)90242-F</a>\n\n.. [3] Chambolle A. An algorithm for total variation minimization and\n       applications. Journal of Mathematical Imaging and Vision. 2004;\n       20:89\u201397.</p>\n</dd></dl>\n\n</section>\n<section id=\"isotropicmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicModel\" title=\"dipy.reconst.sfm.IsotropicModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicModel</span></code></a><a class=\"headerlink\" href=\"#isotropicmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.IsotropicModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IsotropicModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.IsotropicModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a></p>\n<p>A base-class for the representation of isotropic signals.</p>\n<p>The default behavior, suitable for single b-value data is to calculate the\nmean in each voxel as an estimate of the signal that does not depend on\ndirection.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.IsotropicModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.IsotropicModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an IsotropicModel.</p>\n<section id=\"id1117\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1117\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : a GradientTable class instance</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.IsotropicModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.IsotropicModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit an IsotropicModel.</p>\n<p>This boils down to finding the mean diffusion-weighted signal in each\nvoxel</p>\n<section id=\"id1118\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1118\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>data : ndarray</p>\n</section>\n<section id=\"id1119\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1119\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>IsotropicFit class instance.</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"isotropicfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicFit\" title=\"dipy.reconst.sfm.IsotropicFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicFit</span></code></a><a class=\"headerlink\" href=\"#isotropicfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.IsotropicFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IsotropicFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.IsotropicFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a></p>\n<p>A fit object for representing the isotropic signal as the mean of the\ndiffusion-weighted signal.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.IsotropicFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.IsotropicFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an IsotropicFit object.</p>\n<section id=\"id1120\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1120\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>model : IsotropicModel class instance\nparams : ndarray</p>\n<blockquote>\n<div><p>The mean isotropic model parameters (the mean diffusion-weighted\nsignal in each voxel).</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>n_vox<span class=\"classifier\">int</span></dt><dd><p>The number of voxels for which the fit was done.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.IsotropicFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.IsotropicFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the isotropic signal.</p>\n<p>Based on a gradient table. In this case, the (naive!) prediction will\nbe the mean of the diffusion-weighted signal in the voxels.</p>\n<section id=\"id1121\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1121\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">a GradientTable class instance (optional)</span></dt><dd><p>Defaults to use the gtab from the IsotropicModel from which this\nfit was derived.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"exponentialisotropicmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel\" title=\"dipy.reconst.sfm.ExponentialIsotropicModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicModel</span></code></a><a class=\"headerlink\" href=\"#exponentialisotropicmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.ExponentialIsotropicModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ExponentialIsotropicModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicModel\" title=\"dipy.reconst.sfm.IsotropicModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicModel</span></code></a></p>\n<p>Representing the isotropic signal as a fit to an exponential decay function\nwith b-values</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.ExponentialIsotropicModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an IsotropicModel.</p>\n<section id=\"id1122\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1122\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : a GradientTable class instance</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.ExponentialIsotropicModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><section id=\"id1123\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1123\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>data : ndarray</p>\n<dl class=\"simple\">\n<dt>mask<span class=\"classifier\">array, optional</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed. Has the shape <cite>data.shape[:-1]</cite>. Default: None,\nwhich implies that all points should be analyzed.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1124\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1124\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>ExponentialIsotropicFit class instance.</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"exponentialisotropicfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit\" title=\"dipy.reconst.sfm.ExponentialIsotropicFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicFit</span></code></a><a class=\"headerlink\" href=\"#exponentialisotropicfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.ExponentialIsotropicFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ExponentialIsotropicFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicFit\" title=\"dipy.reconst.sfm.IsotropicFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicFit</span></code></a></p>\n<p>A fit to the ExponentialIsotropicModel object, based on data.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.ExponentialIsotropicFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">params</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an IsotropicFit object.</p>\n<section id=\"id1125\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1125\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>model : IsotropicModel class instance\nparams : ndarray</p>\n<blockquote>\n<div><p>The mean isotropic model parameters (the mean diffusion-weighted\nsignal in each voxel).</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>n_vox<span class=\"classifier\">int</span></dt><dd><p>The number of voxels for which the fit was done.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.ExponentialIsotropicFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the isotropic signal, based on a gradient table. In this case,\nthe prediction will be for an exponential decay with the mean\ndiffusivity derived from the data that was fit.</p>\n<section id=\"id1126\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1126\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">a GradientTable class instance (optional)</span></dt><dd><p>Defaults to use the gtab from the IsotropicModel from which this\nfit was derived.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"sparsefasciclemodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleModel\" title=\"dipy.reconst.sfm.SparseFascicleModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel</span></code></a><a class=\"headerlink\" href=\"#sparsefasciclemodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SparseFascicleModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(0.0015,</span> <span class=\"pre\">0.0005,</span> <span class=\"pre\">0.0005)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'ElasticNet'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l1_ratio</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">isotropic</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">42</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a>, <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(0.0015,</span> <span class=\"pre\">0.0005,</span> <span class=\"pre\">0.0005)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'ElasticNet'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l1_ratio</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.001</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">isotropic</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">42</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a Sparse Fascicle Model</p>\n<section id=\"id1127\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1127\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance</p>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere class instance, optional</span></dt><dd><p>A sphere on which coefficients will be estimated. Default:\nsymmetric sphere with 362 points (from <a class=\"reference internal\" href=\"../dipy.data/#module-dipy.data\" title=\"dipy.data\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dipy.data</span></code></a>).</p>\n</dd>\n<dt>response<span class=\"classifier\">(3,) array-like, optional</span></dt><dd><p>The eigenvalues of a canonical tensor to be used as the response\nfunction of single-fascicle signals.\nDefault:[0.0015, 0.0005, 0.0005]</p>\n</dd>\n<dt>solver<span class=\"classifier\">string, or initialized linear model object.</span></dt><dd><p>This will determine the algorithm used to solve the set of linear\nequations underlying this model. If it is a string it needs to be\none of the following: {\u2018ElasticNet\u2019, \u2018NNLS\u2019}. Otherwise, it can be\nan object that inherits from <cite>dipy.optimize.SKLearnLinearSolver</cite>\nor an object with a similar interface from Scikit Learn:\n<cite>sklearn.linear_model.ElasticNet</cite>, <cite>sklearn.linear_model.Lasso</cite> or\n<cite>sklearn.linear_model.Ridge</cite> and other objects that inherit from\n<cite>sklearn.base.RegressorMixin</cite>.\nDefault: \u2018ElasticNet\u2019.</p>\n</dd>\n<dt>l1_ratio<span class=\"classifier\">float, optional</span></dt><dd><p>Sets the balance between L1 and L2 regularization in ElasticNet\n<a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/reconst_sfm/#zou2005\" id=\"id1128\"><span>[Zou2005]</span></a>. Default: 0.5</p>\n</dd>\n<dt>alpha<span class=\"classifier\">float, optional</span></dt><dd><p>Sets the balance between least-squares error and L1/L2\nregularization in ElasticNet <a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/reconst_sfm/#zou2005\" id=\"id1129\"><span>[Zou2005]</span></a>. Default: 0.001</p>\n</dd>\n<dt>isotropic<span class=\"classifier\">IsotropicModel class instance</span></dt><dd><p>This is a class that implements the function that calculates the\nvalue of the isotropic signal. This is a value of the signal that\nis independent of direction, and therefore removed from both sides\nof the SFM equation. The default is an instance of IsotropicModel,\nbut other functions can be inherited from IsotropicModel to\nimplement other fits to the aspects of the data that depend on\nb-value, but not on direction.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1130\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1130\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>This is an implementation of the SFM, described in <a class=\"reference internal\" href=\"../../examples_built/13_fiber_tracking/tracking_sfm/#rokem2015\" id=\"id1131\"><span>[Rokem2015]</span></a>.</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id1132\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Rokem2014<span class=\"fn-bracket\">]</span></span>\n<p>Ariel Rokem, Jason D. Yeatman, Franco Pestilli, Kendrick\nN. Kay, Aviv Mezer, Stefan van der Walt, Brian A. Wandell\n(2014). Evaluating the accuracy of diffusion MRI models in white\nmatter. PLoS ONE 10(4): e0123272. doi:10.1371/journal.pone.0123272</p>\n</div>\n<div class=\"citation\" id=\"zou2005\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Zou2005<span class=\"fn-bracket\">]</span></span>\n<span class=\"backrefs\">(<a role=\"doc-backlink\" href=\"#id1128\">1</a>,<a role=\"doc-backlink\" href=\"#id1129\">2</a>)</span>\n<p>Zou H, Hastie T (2005). Regularization and variable\nselection via the elastic net. J R Stat Soc B:301-320</p>\n</div>\n</div>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleModel.design_matrix\">\n<span class=\"sig-name descname\"><span class=\"pre\">design_matrix</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleModel.design_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The design matrix for a SFM.</p>\n<section id=\"id1133\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1133\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ndarray</dt><dd><p>The design matrix, where each column is a rotated version of the\nresponse function.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_processes</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">parallel_backend</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'multiprocessing'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the SparseFascicleModel object to data.</p>\n<section id=\"id1134\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1134\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>data<span class=\"classifier\">array</span></dt><dd><p>The measured signal.</p>\n</dd>\n<dt>mask<span class=\"classifier\">array, optional</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed. Has the shape <cite>data.shape[:-1]</cite>. Default: None,\nwhich implies that all points should be analyzed.</p>\n</dd>\n<dt>num_processes<span class=\"classifier\">int, optional</span></dt><dd><p>Split the <cite>fit</cite> calculation to a pool of children processes using\njoblib. This only applies to 4D <cite>data</cite> arrays. Default is 1,\nwhich does not require joblib and will run <cite>fit</cite> serially.\nIf &lt; 0 the maximal number of cores minus <code class=\"docutils literal notranslate\"><span class=\"pre\">num_processes</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>\nis used (enter -1 to use as many cores as possible).\n0 raises an error.</p>\n</dd>\n<dt>parallel_backend: str, ParallelBackendBase instance or None</dt><dd><p>Specify the parallelization backend implementation.\nSupported backends are:\n- \u201cloky\u201d used by default, can induce some</p>\n<blockquote>\n<div><p>communication and memory overhead when exchanging input and\noutput data with the worker Python processes.</p>\n</div></blockquote>\n<ul class=\"simple\">\n<li><p>\u201cmultiprocessing\u201d previous process-based backend based on\n<cite>multiprocessing.Pool</cite>. Less robust than <cite>loky</cite>.</p></li>\n<li><p>\u201cthreading\u201d is a very low-overhead backend but it suffers\nfrom the Python Global Interpreter Lock if the called function\nrelies a lot on Python objects. \u201cthreading\u201d is mostly useful\nwhen the execution bottleneck is a compiled extension that\nexplicitly releases the GIL (for instance a Cython loop wrapped\nin a \u201cwith nogil\u201d block or an expensive call to a library such\nas NumPy).</p></li>\n</ul>\n<p>Default: \u2018multiprocessing\u2019.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1135\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1135\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>SparseFascicleFit object</p>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"sparsefasciclefit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleFit\" title=\"dipy.reconst.sfm.SparseFascicleFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit</span></code></a><a class=\"headerlink\" href=\"#sparsefasciclefit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SparseFascicleFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iso</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\" title=\"dipy.reconst.base.ReconstFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iso</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize a SparseFascicleFit class instance</p>\n<section id=\"id1136\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1136\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>model : a SparseFascicleModel object.</p>\n<dl class=\"simple\">\n<dt>beta<span class=\"classifier\">ndarray</span></dt><dd><p>The parameters of fit to data.</p>\n</dd>\n<dt>S0<span class=\"classifier\">ndarray</span></dt><dd><p>The mean non-diffusion-weighted signal.</p>\n</dd>\n<dt>iso<span class=\"classifier\">IsotropicFit class instance</span></dt><dd><p>A representation of the isotropic signal, together with parameters\nof the isotropic signal in each voxel, that is capable of\nderiving/predicting an isotropic signal, based on a gradient-table.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The orientation distribution function of the SFM</p>\n<section id=\"id1137\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1137\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>The points in which the ODF is evaluated</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1138\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1138\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>odf :  ndarray of shape (x, y, z, sphere.vertices.shape[0])</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.SparseFascicleFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.SparseFascicleFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the signal based on the SFM parameters</p>\n<section id=\"id1139\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1139\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable, optional</span></dt><dd><p>The bvecs/bvals to predict the signal on. Default: the gtab from\nthe model object.</p>\n</dd>\n<dt>response<span class=\"classifier\">list of 3 elements, optional</span></dt><dd><p>The eigenvalues of a tensor which will serve as a kernel\nfunction. Default: the response of the model object. Default to use\n<cite>model.response</cite>.</p>\n</dd>\n<dt>S0<span class=\"classifier\">float or array, optional</span></dt><dd><p>The non-diffusion-weighted signal. Default: use the S0 of the data</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1140\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1140\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>pred_sig<span class=\"classifier\">ndarray</span></dt><dd><p>The signal predicted in each voxel/direction</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"sfm-design-matrix\">\n<h3>sfm_design_matrix<a class=\"headerlink\" href=\"#sfm-design-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.sfm.sfm_design_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.sfm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sfm_design_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'signal'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.sfm.sfm_design_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Construct the SFM design matrix</p>\n<section id=\"id1141\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1141\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable or Sphere</span></dt><dd><p>Sets the rows of the matrix, if the mode is \u2018signal\u2019, this should be a\nGradientTable. If mode is \u2018odf\u2019 this should be a Sphere.</p>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>Sets the columns of the matrix</p>\n</dd>\n<dt>response<span class=\"classifier\">list of 3 elements</span></dt><dd><p>The eigenvalues of a tensor which will serve as a kernel\nfunction.</p>\n</dd>\n<dt>mode<span class=\"classifier\">str {\u2018signal\u2019 | \u2018odf\u2019}, optional</span></dt><dd><p>Choose the (default) \u2018signal\u2019 for a design matrix containing predicted\nsignal in the measurements defined by the gradient table for putative\nfascicles oriented along the vertices of the sphere. Otherwise, choose\n\u2018odf\u2019 for an odf convolution matrix, with values of the odf calculated\nfrom a tensor with the provided response eigenvalues, evaluated at the\nb-vectors in the gradient table, for the tensors with principal\ndiffusion directions along the vertices of the sphere.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1142\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1142\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>mat<span class=\"classifier\">ndarray</span></dt><dd><p>A design matrix that can be used for one of the following operations:\nwhen the \u2018signal\u2019 mode is used, each column contains the putative\nsignal in each of the bvectors of the <cite>gtab</cite> if a fascicle is oriented\nin the direction encoded by the sphere vertex corresponding to this\ncolumn. This is used for deconvolution with a measured DWI signal. If\nthe \u2018odf\u2019 mode is chosen, each column instead contains the values of\nthe tensor ODF for a tensor with a principal diffusion direction\ncorresponding to this vertex. This is used to generate odfs from the\nfits of the SFM for the purpose of tracking.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1143\">\n<h4>Examples<a class=\"headerlink\" href=\"#id1143\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">as</span> <span class=\"nn\">dpd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">dpd</span><span class=\"o\">.</span><span class=\"n\">dsi_voxels</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">dpd</span><span class=\"o\">.</span><span class=\"n\">get_sphere</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.sfm</span> <span class=\"kn\">import</span> <span class=\"n\">sfm_design_matrix</span>\n</pre></div>\n</div>\n<p>A canonical tensor approximating corpus-callosum voxels <a class=\"reference internal\" href=\"../../examples_built/07_reconstruction/kfold_xval/#rokem2014\" id=\"id1144\"><span>[Rokem2014]</span></a>:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tensor_matrix</span> <span class=\"o\">=</span> <span class=\"n\">sfm_design_matrix</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                  <span class=\"p\">[</span><span class=\"mf\">0.0015</span><span class=\"p\">,</span> <span class=\"mf\">0.0005</span><span class=\"p\">,</span> <span class=\"mf\">0.0005</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>A \u2018stick\u2019 function (<a class=\"reference internal\" href=\"#behrens2007\" id=\"id1145\"><span>[Behrens2007]</span></a>):</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stick_matrix</span> <span class=\"o\">=</span> <span class=\"n\">sfm_design_matrix</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</section>\n<section id=\"id1146\">\n<h4>Notes<a class=\"headerlink\" href=\"#id1146\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"id1147\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Rokem2015<span class=\"fn-bracket\">]</span></span>\n<p>Ariel Rokem, Jason D. Yeatman, Franco Pestilli, Kendrick\nN. Kay, Aviv Mezer, Stefan van der Walt, Brian A. Wandell\n(2015). Evaluating the accuracy of diffusion MRI models in white\nmatter. PLoS ONE 10(4): e0123272. doi:10.1371/journal.pone.0123272</p>\n</div>\n<div class=\"citation\" id=\"id1148\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Rokem2014<span class=\"fn-bracket\">]</span></span>\n<p>Ariel Rokem, Kimberly L. Chan, Jason D. Yeatman, Franco\nPestilli,  Brian A. Wandell (2014). Evaluating the accuracy of diffusion\nmodels at multiple b-values with cross-validation. ISMRM 2014.</p>\n</div>\n<div class=\"citation\" id=\"behrens2007\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id1145\">Behrens2007</a><span class=\"fn-bracket\">]</span></span>\n<p>Behrens TEJ, Berg HJ, Jbabdi S, Rushworth MFS, Woolrich MW\n(2007): Probabilistic diffusion tractography with multiple fibre\norientations: What can we gain? Neuroimage 34:144-55.</p>\n</div>\n</div>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"sphharmmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a><a class=\"headerlink\" href=\"#sphharmmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SphHarmModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\" title=\"dipy.reconst.odf.OdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a>, <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<p>To be subclassed by all models that return a SphHarmFit when fit.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialization of the abstract class for signal reconstruction models</p>\n<section id=\"id1149\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1149\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>gtab : GradientTable class instance</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmModel.sampling_matrix\">\n<span class=\"sig-name descname\"><span class=\"pre\">sampling_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmModel.sampling_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The matrix needed to sample ODFs from coefficients of the model.</p>\n<section id=\"id1150\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1150\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>Points used to sample ODF.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1151\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1151\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sampling_matrix<span class=\"classifier\">array</span></dt><dd><p>The size of the matrix will be (N, M) where N is the number of\nvertices on sphere and M is the number of coefficients needed by\nthe model.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"qballbasemodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a><a class=\"headerlink\" href=\"#qballbasemodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.QballBaseModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QballBaseModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.QballBaseModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a></p>\n<p>To be subclassed by Qball type models.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.QballBaseModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.QballBaseModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<section id=\"id1152\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1152\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>Diffusion gradients used to acquire data</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">even int &gt;= 0</span></dt><dd><p>the spherical harmonic order of the model</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float between 0 and 1, optional</span></dt><dd><p>The regularization parameter of the model</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float, &gt; 0, optional</span></dt><dd><p>During fitting, all signal values less than <cite>min_signal</cite> are\nclipped to <cite>min_signal</cite>. This is done primarily to avoid values\nless than or equal to zero when taking logs.</p>\n</dd>\n<dt>assume_normed<span class=\"classifier\">bool, optional</span></dt><dd><p>If True, clipping and normalization of the data with respect to the\nmean B0 signal are skipped during mode fitting. This is an advanced\nfeature and should be used with care.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1153\">\n<h4>See Also<a class=\"headerlink\" href=\"#id1153\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>normalize_data</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.QballBaseModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.QballBaseModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fits the model to diffusion data and returns the model fit</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"sphharmfit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit\" title=\"dipy.reconst.shm.SphHarmFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmFit</span></code></a><a class=\"headerlink\" href=\"#sphharmfit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SphHarmFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shm_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\" title=\"dipy.reconst.odf.OdfFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a></p>\n<p>Diffusion data fit to a spherical harmonic model</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shm_coef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit.gfa\">\n<span class=\"sig-name descname\"><span class=\"pre\">gfa</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit.gfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Samples the odf function on the points of a sphere</p>\n<section id=\"id1154\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1154\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>The points on which to sample the odf.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1155\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1155\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>values<span class=\"classifier\">ndarray</span></dt><dd><p>The value of the odf on each point of <cite>sphere</cite>.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit.predict\">\n<span class=\"sig-name descname\"><span class=\"pre\">predict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the diffusion signal from the model coefficients.</p>\n<section id=\"id1156\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1156\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">a GradientTable class instance</span></dt><dd><p>The directions and bvalues on which prediction is desired</p>\n</dd>\n<dt>S0<span class=\"classifier\">float array</span></dt><dd><p>The mean non-diffusion-weighted signal in each voxel.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit.shape\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shape</span></span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit.shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.SphHarmFit.shm_coeff\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shm_coeff</span></span><a class=\"headerlink\" href=\"#dipy.reconst.shm.SphHarmFit.shm_coeff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The spherical harmonic coefficients of the odf</p>\n<p>Make this a property for now, if there is a use case for modifying\nthe coefficients we can add a setter or expose the coefficients more\ndirectly</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"csaodfmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.CsaOdfModel\" title=\"dipy.reconst.shm.CsaOdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a><a class=\"headerlink\" href=\"#csaodfmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.CsaOdfModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CsaOdfModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.CsaOdfModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a></p>\n<p>Implementation of Constant Solid Angle reconstruction method.</p>\n<section id=\"id1157\">\n<h4>References<a class=\"headerlink\" href=\"#id1157\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1158\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging With\nSolid Angle Consideration.</p>\n</aside>\n</aside>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.CsaOdfModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.CsaOdfModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<section id=\"id1159\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id1159\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>Diffusion gradients used to acquire data</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">even int &gt;= 0</span></dt><dd><p>the spherical harmonic order of the model</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float between 0 and 1, optional</span></dt><dd><p>The regularization parameter of the model</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float, &gt; 0, optional</span></dt><dd><p>During fitting, all signal values less than <cite>min_signal</cite> are\nclipped to <cite>min_signal</cite>. This is done primarily to avoid values\nless than or equal to zero when taking logs.</p>\n</dd>\n<dt>assume_normed<span class=\"classifier\">bool, optional</span></dt><dd><p>If True, clipping and normalization of the data with respect to the\nmean B0 signal are skipped during mode fitting. This is an advanced\nfeature and should be used with care.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1160\">\n<h5>See Also<a class=\"headerlink\" href=\"#id1160\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>normalize_data</p>\n</section>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.CsaOdfModel.max\">\n<span class=\"sig-name descname\"><span class=\"pre\">max</span></span><em class=\"property\"><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"pre\">0.999</span></em><a class=\"headerlink\" href=\"#dipy.reconst.shm.CsaOdfModel.max\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.CsaOdfModel.min\">\n<span class=\"sig-name descname\"><span class=\"pre\">min</span></span><em class=\"property\"><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"pre\">0.001</span></em><a class=\"headerlink\" href=\"#dipy.reconst.shm.CsaOdfModel.min\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"opdtmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.OpdtModel\" title=\"dipy.reconst.shm.OpdtModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OpdtModel</span></code></a><a class=\"headerlink\" href=\"#opdtmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.OpdtModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">OpdtModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.OpdtModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a></p>\n<p>Implementation of Orientation Probability Density Transform\nreconstruction method.</p>\n<section id=\"id1161\">\n<h4>References<a class=\"headerlink\" href=\"#id1161\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1162\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tristan-Vega, A., et al. 2010. A new methodology for estimation of\nfiber populations in white matter of the brain with Funk-Radon\ntransform.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1163\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tristan-Vega, A., et al. 2009. Estimation of fiber orientation\nprobability density functions in high angular resolution diffusion\nimaging.</p>\n</aside>\n</aside>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.OpdtModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.OpdtModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<section id=\"id1164\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id1164\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>Diffusion gradients used to acquire data</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">even int &gt;= 0</span></dt><dd><p>the spherical harmonic order of the model</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float between 0 and 1, optional</span></dt><dd><p>The regularization parameter of the model</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float, &gt; 0, optional</span></dt><dd><p>During fitting, all signal values less than <cite>min_signal</cite> are\nclipped to <cite>min_signal</cite>. This is done primarily to avoid values\nless than or equal to zero when taking logs.</p>\n</dd>\n<dt>assume_normed<span class=\"classifier\">bool, optional</span></dt><dd><p>If True, clipping and normalization of the data with respect to the\nmean B0 signal are skipped during mode fitting. This is an advanced\nfeature and should be used with care.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1165\">\n<h5>See Also<a class=\"headerlink\" href=\"#id1165\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>normalize_data</p>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"qballmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballModel\" title=\"dipy.reconst.shm.QballModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballModel</span></code></a><a class=\"headerlink\" href=\"#qballmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.QballModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QballModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.QballModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a></p>\n<p>Implementation of regularized Qball reconstruction method.</p>\n<section id=\"id1166\">\n<h4>References<a class=\"headerlink\" href=\"#id1166\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1167\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., et al. 2007. Regularized, fast, and robust\nanalytical Q-ball imaging.</p>\n</aside>\n</aside>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.QballModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.006</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">assume_normed</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.QballModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<section id=\"id1168\">\n<h5>Parameters<a class=\"headerlink\" href=\"#id1168\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>Diffusion gradients used to acquire data</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">even int &gt;= 0</span></dt><dd><p>the spherical harmonic order of the model</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float between 0 and 1, optional</span></dt><dd><p>The regularization parameter of the model</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float, &gt; 0, optional</span></dt><dd><p>During fitting, all signal values less than <cite>min_signal</cite> are\nclipped to <cite>min_signal</cite>. This is done primarily to avoid values\nless than or equal to zero when taking logs.</p>\n</dd>\n<dt>assume_normed<span class=\"classifier\">bool, optional</span></dt><dd><p>If True, clipping and normalization of the data with respect to the\nmean B0 signal are skipped during mode fitting. This is an advanced\nfeature and should be used with care.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1169\">\n<h5>See Also<a class=\"headerlink\" href=\"#id1169\" title=\"Permalink to this heading\">\u00b6</a></h5>\n<p>normalize_data</p>\n</section>\n</dd></dl>\n\n</section>\n</dd></dl>\n\n</section>\n<section id=\"residualbootstrapwrapper\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shm.ResidualBootstrapWrapper\" title=\"dipy.reconst.shm.ResidualBootstrapWrapper\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResidualBootstrapWrapper</span></code></a><a class=\"headerlink\" href=\"#residualbootstrapwrapper\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.ResidualBootstrapWrapper\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ResidualBootstrapWrapper</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal_object</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">where_dwi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.ResidualBootstrapWrapper\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Returns a residual bootstrap sample of the signal_object when indexed</p>\n<p>Wraps a signal_object, this signal object can be an interpolator. When\nindexed, the the wrapper indexes the signal_object to get the signal.\nThere wrapper than samples the residual bootstrap distribution of signal and\nreturns that sample.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.ResidualBootstrapWrapper.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal_object</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">where_dwi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.ResidualBootstrapWrapper.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Builds a ResidualBootstrapWapper</p>\n<p>Given some linear model described by B, the design matrix, and a\nsignal_object, returns an object which can sample the residual\nbootstrap distribution of the signal. We assume that the signals are\nnormalized so we clip the bootstrap samples to be between <cite>min_signal</cite>\nand 1.</p>\n<section id=\"id1170\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1170\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>signal_object<span class=\"classifier\">some object that can be indexed</span></dt><dd><p>This object should return diffusion weighted signals when indexed.</p>\n</dd>\n<dt>B<span class=\"classifier\">ndarray, ndim=2</span></dt><dd><p>The design matrix of the spherical harmonics model used to fit the\ndata. This is the model that will be used to compute the residuals\nand sample the residual bootstrap distribution</p>\n</dd>\n<dt>where_dwi :</dt><dd><p>indexing object to find diffusion weighted signals from signal</p>\n</dd>\n<dt>min_signal<span class=\"classifier\">float</span></dt><dd><p>The lowest allowable signal.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"forward-sdeconv-mat\">\n<h3>forward_sdeconv_mat<a class=\"headerlink\" href=\"#forward-sdeconv-mat\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.forward_sdeconv_mat\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">forward_sdeconv_mat</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_rh</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.forward_sdeconv_mat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Build forward spherical deconvolution matrix</p>\n<section id=\"id1171\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1171\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>r_rh<span class=\"classifier\">ndarray</span></dt><dd><p>Rotational harmonics coefficients for the single fiber response\nfunction. Each element <code class=\"docutils literal notranslate\"><span class=\"pre\">rh[i]</span></code> is associated with spherical harmonics\nof degree <code class=\"docutils literal notranslate\"><span class=\"pre\">2*i</span></code>.</p>\n</dd>\n<dt>n<span class=\"classifier\">ndarray</span></dt><dd><p>The order of spherical harmonic function associated with each row of\nthe deconvolution matrix. Only even orders are allowed</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1172\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1172\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>R<span class=\"classifier\">ndarray (N, N)</span></dt><dd><p>Deconvolution matrix with shape (N, N)</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"sh-to-rh\">\n<h3>sh_to_rh<a class=\"headerlink\" href=\"#sh-to-rh\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.sh_to_rh\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sh_to_rh</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_sh</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.sh_to_rh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spherical harmonics (SH) to rotational harmonics (RH)</p>\n<p>Calculate the rotational harmonic decomposition up to\nharmonic order <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code>, degree <code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code> for an axially and antipodally\nsymmetric function. Note that all <code class=\"docutils literal notranslate\"><span class=\"pre\">m</span> <span class=\"pre\">!=</span> <span class=\"pre\">0</span></code> coefficients\nwill be ignored as axial symmetry is assumed. Hence, there\nwill be <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order/2</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span></code> non-zero coefficients.</p>\n<section id=\"id1173\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1173\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>r_sh<span class=\"classifier\">ndarray (N,)</span></dt><dd><p>ndarray of SH coefficients for the single fiber response function.\nThese coefficients must correspond to the real spherical harmonic\nfunctions produced by <cite>shm.real_sh_descoteaux_from_index</cite>.</p>\n</dd>\n<dt>m<span class=\"classifier\">ndarray (N,)</span></dt><dd><p>The degree of the spherical harmonic function associated with each\ncoefficient.</p>\n</dd>\n<dt>n<span class=\"classifier\">ndarray (N,)</span></dt><dd><p>The order of the spherical harmonic function associated with each\ncoefficient.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1174\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1174\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>r_rh<span class=\"classifier\">ndarray (<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)*(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)/2</span></code>,)</span></dt><dd><p>Rotational harmonics coefficients representing the input <cite>r_sh</cite></p>\n</dd>\n</dl>\n</section>\n<section id=\"id1175\">\n<h4>See Also<a class=\"headerlink\" href=\"#id1175\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>shm.real_sh_descoteaux_from_index, shm.real_sh_descoteaux</p>\n</section>\n<section id=\"id1176\">\n<h4>References<a class=\"headerlink\" href=\"#id1176\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1177\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Tournier, J.D., et al. NeuroImage 2007. Robust determination of the\nfibre orientation distribution in diffusion MRI: Non-negativity\nconstrained super-resolved spherical deconvolution</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"gen-dirac\">\n<h3>gen_dirac<a class=\"headerlink\" href=\"#gen-dirac\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.gen_dirac\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">gen_dirac</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.gen_dirac\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate Dirac delta function orientated in (theta, phi) on the sphere</p>\n<p>The spherical harmonics (SH) representation of this Dirac is returned as\ncoefficients to spherical harmonic functions produced from <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>\nbasis.</p>\n<section id=\"id1178\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1178\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>m<span class=\"classifier\">ndarray (N,)</span></dt><dd><p>The degree of the spherical harmonic function associated with each\ncoefficient.</p>\n</dd>\n<dt>n<span class=\"classifier\">ndarray (N,)</span></dt><dd><p>The order of the spherical harmonic function associated with each\ncoefficient.</p>\n</dd>\n<dt>theta<span class=\"classifier\">float [0, pi]</span></dt><dd><p>The polar (colatitudinal) coordinate.</p>\n</dd>\n<dt>phi<span class=\"classifier\">float [0, 2*pi]</span></dt><dd><p>The azimuthal (longitudinal) coordinate.</p>\n</dd>\n<dt>legacy: bool, optional</dt><dd><p>If true, uses DIPY\u2019s legacy descoteaux07 implementation (where <a href=\"#id1269\"><span class=\"problematic\" id=\"id1270\">|m|</span></a>\nis used for m &lt; 0). Else, implements the basis as defined in\nDescoteaux et al. 2007 (without the absolute value).</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1179\">\n<h4>See Also<a class=\"headerlink\" href=\"#id1179\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>shm.real_sh_descoteaux_from_index, shm.real_sh_descoteaux</p>\n</section>\n<section id=\"id1180\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1180\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>dirac<span class=\"classifier\">ndarray</span></dt><dd><p>SH coefficients representing the Dirac function. The shape of this is\n<cite>(m + 2) * (m + 1) / 2</cite>.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"spherical-harmonics\">\n<h3>spherical_harmonics<a class=\"headerlink\" href=\"#spherical-harmonics\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.spherical_harmonics\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">spherical_harmonics</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">use_scipy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.spherical_harmonics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute spherical harmonics.\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nm : int <code class=\"docutils literal notranslate\"><span class=\"pre\">|m|</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">n</span></code>\n    The degree of the harmonic.\nn : int <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span> <span class=\"pre\">0</span></code>\n    The order of the harmonic.\ntheta : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\nphi : float [0, pi]\n    The polar (colatitudinal) coordinate.\nuse_scipy : bool, optional\n    If True, use scipy implementation.\n\nReturns\n\u2014\u2014-\ny_mn : complex float\n    The harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code>.\n\nNotes\n\u2014\u2013\nThis is a faster implementation of scipy.special.sph_harm for\nscipy version &lt; 0.15.0. For scipy 0.15 and onwards, we use the scipy\nimplementation of the function.\n\nThe usual definitions for <code class=\"docutils literal notranslate\"><span class=\"pre\">theta`</span> <span class=\"pre\">and</span> <span class=\"pre\">`phi</span></code> used in DIPY are interchanged\nin the method definition to agree with the definitions in\nscipy.special.sph_harm, where <cite>theta</cite> represents the azimuthal coordinate\nand <cite>phi</cite> represents the polar coordinate.\n\nAlthough scipy uses a naming convention where <code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code> is the order and <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code>\nis the degree of the SH, the opposite of DIPY\u2019s, their definition for both\nparameters is the same as ours, with <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span> <span class=\"pre\">&gt;=</span> <span class=\"pre\">0</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">|m|</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">n</span></code>.</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sph-harm\">\n<h3>real_sph_harm<a class=\"headerlink\" href=\"#real-sph-harm\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sph_harm\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sph_harm</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sph_harm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute real spherical harmonics.\n\ndipy.reconst.shm.real_sph_harm is deprecated, Please use dipy.reconst.shm.real_sh_descoteaux_from_index instead\n\n* deprecated from version: 1.3\n* Will raise &lt;class \u2018dipy.utils.deprecator.ExpiredDeprecationError\u2019&gt; as of version: 2.0\n\nWhere the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be:\n\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)     if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                     if m = 0\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>) * sqrt(2)   if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nm : int <code class=\"docutils literal notranslate\"><span class=\"pre\">|m|</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">n</span></code>\n    The degree of the harmonic.\nn : int <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span> <span class=\"pre\">0</span></code>\n    The order of the harmonic.\ntheta : float [0, pi]\n    The polar (colatitudinal) coordinate.\nphi : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\n\nReturns\n\u2014\u2014-\ny_mn : real float\n    The real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <cite>theta</cite> and <cite>phi</cite>.\n\nSee Also\n\u2014\u2014\u2013\nscipy.special.sph_harm</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sh-tournier-from-index\">\n<h3>real_sh_tournier_from_index<a class=\"headerlink\" href=\"#real-sh-tournier-from-index\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sh_tournier_from_index\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sh_tournier_from_index</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sh_tournier_from_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute real spherical harmonics as initially defined in Tournier\n2007 <a href=\"#id1623\"><span class=\"problematic\" id=\"id1181\">[1]_</span></a> then updated in MRtrix3 <a href=\"#id1624\"><span class=\"problematic\" id=\"id1182\">[2]_</span></a>, where the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>\nis defined to be:\n\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>) * sqrt(2)    if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nm : int <code class=\"docutils literal notranslate\"><span class=\"pre\">|m|</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">n</span></code>\n    The degree of the harmonic.\nn : int <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span> <span class=\"pre\">0</span></code>\n    The order of the harmonic.\ntheta : float [0, pi]\n    The polar (colatitudinal) coordinate.\nphi : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\nlegacy: bool, optional\n    If true, uses MRtrix 0.2 SH basis definition, where the <code class=\"docutils literal notranslate\"><span class=\"pre\">sqrt(2)</span></code>\n    factor is omitted. Else, uses the MRtrix 3 definition presented above.\n\nReturns\n\u2014\u2014-\nreal_sh : real float\n    The real harmonics <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Tournier J.D., Calamante F. and Connelly A. Robust determination\n       of the fibre orientation distribution in diffusion MRI:\n       Non-negativity constrained super-resolved spherical deconvolution.\n       NeuroImage. 2007;35(4):1459-1472.\n.. [2] Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\n       Pietsch M, et al. MRtrix3: A fast, flexible and open software\n       framework for medical image processing and visualisation.\n       NeuroImage. 2019 Nov 15;202:116-137.</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sh-descoteaux-from-index\">\n<h3>real_sh_descoteaux_from_index<a class=\"headerlink\" href=\"#real-sh-descoteaux-from-index\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sh_descoteaux_from_index\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sh_descoteaux_from_index</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sh_descoteaux_from_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute real spherical harmonics as in Descoteaux et al. 2007 <a href=\"#id1625\"><span class=\"problematic\" id=\"id1183\">[1]_</span></a>,\nwhere the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be:\n\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nm : int <code class=\"docutils literal notranslate\"><span class=\"pre\">|m|</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">n</span></code>\n    The degree of the harmonic.\nn : int <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span> <span class=\"pre\">0</span></code>\n    The order of the harmonic.\ntheta : float [0, pi]\n    The polar (colatitudinal) coordinate.\nphi : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\nlegacy: bool, optional\n    If true, uses DIPY\u2019s legacy descoteaux07 implementation (where <a href=\"#id1271\"><span class=\"problematic\" id=\"id1272\">|m|</span></a>\n    is used for m &lt; 0). Else, implements the basis as defined in\n    Descoteaux et al. 2007 (without the absolute value).\n\nReturns\n\u2014\u2014-\nreal_sh : real float\n    The real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code>.\n\nReferences\n\u2014\u2014\u2014-\n .. [1] Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\n       Regularized, Fast, and Robust Analytical Q-ball Imaging.\n       Magn. Reson. Med. 2007;58:497-510.</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sh-tournier\">\n<h3>real_sh_tournier<a class=\"headerlink\" href=\"#real-sh-tournier\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sh_tournier\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sh_tournier</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sh_tournier\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute real spherical harmonics as initially defined in Tournier\n2007 <a href=\"#id1626\"><span class=\"problematic\" id=\"id1184\">[1]_</span></a> then updated in MRtrix3 <a href=\"#id1627\"><span class=\"problematic\" id=\"id1185\">[2]_</span></a>, where the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>\nis defined to be:\n\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>) * sqrt(2)    if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nsh_order : int\n    The maximum degree or the spherical harmonic basis.\ntheta : float [0, pi]\n    The polar (colatitudinal) coordinate.\nphi : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\nfull_basis: bool, optional\n    If true, returns a basis including odd order SH functions as well as\n    even order SH functions. Else returns only even order SH functions.\nlegacy: bool, optional\n    If true, uses MRtrix 0.2 SH basis definition, where the <code class=\"docutils literal notranslate\"><span class=\"pre\">sqrt(2)</span></code>\n    factor is omitted. Else, uses MRtrix 3 definition presented above.\n\nReturns\n\u2014\u2014-\nreal_sh : real float\n    The real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code>.\nm : array\n    The degree of the harmonics.\nn : array\n    The order of the harmonics.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Tournier J.D., Calamante F. and Connelly A. Robust determination\n       of the fibre orientation distribution in diffusion MRI:\n       Non-negativity constrained super-resolved spherical deconvolution.\n       NeuroImage. 2007;35(4):1459-1472.\n.. [2] Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\n       Pietsch M, et al. MRtrix3: A fast, flexible and open software\n       framework for medical image processing and visualisation.\n       NeuroImage. 2019 Nov 15;202:116-137.</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sh-descoteaux\">\n<h3>real_sh_descoteaux<a class=\"headerlink\" href=\"#real-sh-descoteaux\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sh_descoteaux\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sh_descoteaux</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sh_descoteaux\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute real spherical harmonics as in Descoteaux et al. 2007 <a href=\"#id1628\"><span class=\"problematic\" id=\"id1186\">[1]_</span></a>,\nwhere the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be:\n\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                      if m = 0\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)      if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nsh_order : int\n    The maximum degree or the spherical harmonic basis.\ntheta : float [0, pi]\n    The polar (colatitudinal) coordinate.\nphi : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\nfull_basis: bool, optional\n    If true, returns a basis including odd order SH functions as well as\n    even order SH functions. Otherwise returns only even order SH\n    functions.\nlegacy: bool, optional\n    If true, uses DIPY\u2019s legacy descoteaux07 implementation (where <a href=\"#id1273\"><span class=\"problematic\" id=\"id1274\">|m|</span></a>\n    for m &lt; 0). Else, implements the basis as defined in Descoteaux et al.\n    2007.\n\nReturns\n\u2014\u2014-\nreal_sh : real float\n    The real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code>.\nm : array\n    The degree of the harmonics.\nn : array\n    The order of the harmonics.\n\nReferences\n\u2014\u2014\u2014-\n .. [1] Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\n       Regularized, Fast, and Robust Analytical Q-ball Imaging.\n       Magn. Reson. Med. 2007;58:497-510.</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sym-sh-mrtrix\">\n<h3>real_sym_sh_mrtrix<a class=\"headerlink\" href=\"#real-sym-sh-mrtrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sym_sh_mrtrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sym_sh_mrtrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sym_sh_mrtrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>dipy.reconst.shm.real_sym_sh_mrtrix is deprecated, Please use dipy.reconst.shm.real_sh_tournier instead\n\n* deprecated from version: 1.3\n* Will raise &lt;class \u2018dipy.utils.deprecator.ExpiredDeprecationError\u2019&gt; as of version: 2.0\n\nCompute real symmetric spherical harmonics as in Tournier 2007 <a href=\"#id1629\"><span class=\"problematic\" id=\"id1187\">[2]_</span></a>, where\nthe real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is defined to be::\n\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>)       if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>             if m = 0\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>)     if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nsh_order : int\n    The maximum order or the spherical harmonic basis.\ntheta : float [0, pi]\n    The polar (colatitudinal) coordinate.\nphi : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\n\nReturns\n\u2014\u2014-\ny_mn : real float\n    The real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code> as\n    implemented in mrtrix. Warning: the basis is Tournier et al.\n    2007 <a href=\"#id1630\"><span class=\"problematic\" id=\"id1188\">[2]_</span></a>; 2004 <a href=\"#id1631\"><span class=\"problematic\" id=\"id1189\">[1]_</span></a> is slightly different.\nm : array\n    The degree of the harmonics.\nn : array\n    The order of the harmonics.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Tournier J.D., Calamante F., Gadian D.G. and Connelly A.\n       Direct estimation of the fibre orientation density function from\n       diffusion-weighted MRI data using spherical deconvolution.\n       NeuroImage. 2004;23:1176-1185.\n.. [2] Tournier J.D., Calamante F. and Connelly A. Robust determination\n       of the fibre orientation distribution in diffusion MRI:\n       Non-negativity constrained super-resolved spherical deconvolution.\n       NeuroImage. 2007;35(4):1459-1472.</p>\n</dd></dl>\n\n</section>\n<section id=\"real-sym-sh-basis\">\n<h3>real_sym_sh_basis<a class=\"headerlink\" href=\"#real-sym-sh-basis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.real_sym_sh_basis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">real_sym_sh_basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">theta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">phi</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.real_sym_sh_basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Samples a real symmetric spherical harmonic basis at point on the sphere\n\ndipy.reconst.shm.real_sym_sh_basis is deprecated, Please use dipy.reconst.shm.real_sh_descoteaux instead\n\n* deprecated from version: 1.3\n* Will raise &lt;class \u2018dipy.utils.deprecator.ExpiredDeprecationError\u2019&gt; as of version: 2.0\n\nSamples the basis functions up to order <cite>sh_order</cite> at points on the sphere\ngiven by <cite>theta</cite> and <cite>phi</cite>. The basis functions are defined here the same\nway as in Descoteaux et al. 2007 <a href=\"#id1632\"><span class=\"problematic\" id=\"id1190\">[1]_</span></a> where the real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> is\ndefined to be:\n\n    Imag(<span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span>) * sqrt(2)     if m &gt; 0\n    <span class=\"math notranslate nohighlight\">\\(Y^0_n\\)</span>                     if m = 0\n    Real(<span class=\"math notranslate nohighlight\">\\(Y^|m|_n\\)</span>) * sqrt(2)   if m &lt; 0\n\nThis may take scalar or array arguments. The inputs will be broadcast\nagainst each other.\n\nParameters\n\u2014\u2014\u2014-\nsh_order : int\n    even int &gt; 0, max spherical harmonic order\ntheta : float [0, 2*pi]\n    The azimuthal (longitudinal) coordinate.\nphi : float [0, pi]\n    The polar (colatitudinal) coordinate.\n\nReturns\n\u2014\u2014-\ny_mn : real float\n    The real harmonic <span class=\"math notranslate nohighlight\">\\(Y^m_n\\)</span> sampled at <code class=\"docutils literal notranslate\"><span class=\"pre\">theta</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">phi</span></code>\nm : array\n    The degree of the harmonics.\nn : array\n    The order of the harmonics.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\n       Regularized, Fast, and Robust Analytical Q-ball Imaging.\n       Magn. Reson. Med. 2007;58:497-510.</p>\n</dd></dl>\n\n</section>\n<section id=\"sph-harm-ind-list\">\n<h3>sph_harm_ind_list<a class=\"headerlink\" href=\"#sph-harm-ind-list\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.sph_harm_ind_list\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sph_harm_ind_list</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.sph_harm_ind_list\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the degree (<code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code>) and order (<code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code>) of all the symmetric spherical\nharmonics of degree less then or equal to <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code>. The results,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">m_list</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">n_list</span></code> are kx1 arrays, where k depends on <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code>.\nThey can be passed to <a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_descoteaux_from_index\" title=\"dipy.reconst.shm.real_sh_descoteaux_from_index\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">real_sh_descoteaux_from_index()</span></code></a> and\n:func:<code class=\"docutils literal notranslate\"><span class=\"pre\">real_sh_tournier_from_index</span></code>.</p>\n<section id=\"id1191\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1191\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh_order<span class=\"classifier\">int</span></dt><dd><p>even int &gt; 0, max order to return</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>True for SH basis with even and odd order terms</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1192\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1192\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>m_list<span class=\"classifier\">array</span></dt><dd><p>degrees of even spherical harmonics</p>\n</dd>\n<dt>n_list<span class=\"classifier\">array</span></dt><dd><p>orders of even spherical harmonics</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1193\">\n<h4>See Also<a class=\"headerlink\" href=\"#id1193\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>shm.real_sh_descoteaux_from_index, shm.real_sh_tournier_from_index</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"order-from-ncoef\">\n<h3>order_from_ncoef<a class=\"headerlink\" href=\"#order-from-ncoef\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.order_from_ncoef\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">order_from_ncoef</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ncoef</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.order_from_ncoef\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a number <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> of coefficients, calculate back the <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code></p>\n<section id=\"id1194\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1194\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>ncoef: int</dt><dd><p>number of coefficients</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>True when coefficients are for a full SH basis.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1195\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1195\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh_order: int</dt><dd><p>maximum order of SH basis</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"smooth-pinv\">\n<h3>smooth_pinv<a class=\"headerlink\" href=\"#smooth-pinv\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.smooth_pinv\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">smooth_pinv</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">L</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.smooth_pinv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Regularized pseudo-inverse\n\nComputes a regularized least square inverse of B\n\nParameters\n\u2014\u2014\u2014-\nB : array_like (n, m)\n    Matrix to be inverted\nL : array_like (n,)\n\nReturns\n\u2014\u2014-\ninv : ndarray (m, n)\n    regularized least square inverse of B\n\nNotes\n\u2014\u2013\nIn the literature this inverse is often written <span class=\"math notranslate nohighlight\">\\((B^{T}B+L^{2})^{-1}B^{T}\\)</span>.\nHowever here this inverse is implemented using the pseudo-inverse because\nit is more numerically stable than the direct implementation of the matrix\nproduct.</p>\n</dd></dl>\n\n</section>\n<section id=\"lazy-index\">\n<h3>lazy_index<a class=\"headerlink\" href=\"#lazy-index\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.lazy_index\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">lazy_index</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">index</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.lazy_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Produces a lazy index</p>\n<p>Returns a slice that can be used for indexing an array, if no slice can be\nmade index is returned as is.</p>\n</dd></dl>\n\n</section>\n<section id=\"normalize-data\">\n<h3>normalize_data<a class=\"headerlink\" href=\"#normalize-data\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.normalize_data\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">normalize_data</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">where_b0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_signal</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">out</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.normalize_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalizes the data with respect to the mean b0</p>\n</dd></dl>\n\n</section>\n<section id=\"hat\">\n<h3>hat<a class=\"headerlink\" href=\"#hat\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.hat\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">hat</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">B</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.hat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the hat matrix for the design matrix B</p>\n</dd></dl>\n\n</section>\n<section id=\"lcr-matrix\">\n<h3>lcr_matrix<a class=\"headerlink\" href=\"#lcr-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.lcr_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">lcr_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">H</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.lcr_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a matrix for computing leveraged, centered residuals from data</p>\n<p>if r = (d-Hd), the leveraged centered residuals are lcr = (r/l)-mean(r/l)\nruturns the matrix R, such lcr = Rd</p>\n</dd></dl>\n\n</section>\n<section id=\"bootstrap-data-array\">\n<h3>bootstrap_data_array<a class=\"headerlink\" href=\"#bootstrap-data-array\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.bootstrap_data_array\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bootstrap_data_array</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">H</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">permute</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.bootstrap_data_array\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies the Residual Bootstraps to the data given H and R</p>\n<p>data must be normalized, ie 0 &lt; data &lt;= 1</p>\n<p>This function, and the bootstrap_data_voxel function, calculate\nresidual-bootstrap samples given a Hat matrix and a Residual matrix. These\nsamples can be used for non-parametric statistics or for bootstrap\nprobabilistic tractography:</p>\n<section id=\"id1196\">\n<h4>References<a class=\"headerlink\" href=\"#id1196\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1197\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>J. I. Berman, et al., \u201cProbabilistic streamline q-ball tractography\nusing the residual bootstrap\u201d 2008.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1198\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>HA Haroon, et al., \u201cUsing the model-based residual bootstrap to\nquantify uncertainty in fiber orientations from Q-ball analysis\u201d\n2009.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1199\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>B. Jeurissen, et al., \u201cProbabilistic Fiber Tracking Using the\nResidual Bootstrap with Constrained Spherical Deconvolution\u201d 2011.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"bootstrap-data-voxel\">\n<h3>bootstrap_data_voxel<a class=\"headerlink\" href=\"#bootstrap-data-voxel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.bootstrap_data_voxel\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bootstrap_data_voxel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">H</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">R</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">permute</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.bootstrap_data_voxel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like bootstrap_data_array but faster when for a single voxel</p>\n<p>data must be 1d and normalized</p>\n</dd></dl>\n\n</section>\n<section id=\"sf-to-sh\">\n<h3>sf_to_sh<a class=\"headerlink\" href=\"#sf-to-sh\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.sf_to_sh\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sf_to_sh</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sf</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">basis_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.sf_to_sh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spherical function to spherical harmonics (SH).</p>\n<section id=\"id1200\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1200\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sf<span class=\"classifier\">ndarray</span></dt><dd><p>Values of a function on the given <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere</span></code>.</p>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>The points on which the sf is defined.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum SH order in the SH fit.  For <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code>, there will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span></code> SH coefficients for a symmetric\nbasis and <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span></code> coefficients for a full\nSH basis.</p>\n</dd>\n<dt>basis_type<span class=\"classifier\">{None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}, optional</span></dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 [2]_[3]_ basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a href=\"#id1633\"><span class=\"problematic\" id=\"id1201\">[1]_</span></a> basis,\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>True for using a SH basis containing even and odd order SH functions.\nFalse for using a SH basis consisting only of even order SH functions.</p>\n</dd>\n<dt>legacy: bool, optional</dt><dd><p>True to use a legacy basis definition for backward compatibility\nwith previous <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> implementations.</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float, optional</span></dt><dd><p>Lambda-regularization in the SH fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1202\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1202\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh<span class=\"classifier\">ndarray</span></dt><dd><p>SH coefficients representing the input function.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1203\">\n<h4>References<a class=\"headerlink\" href=\"#id1203\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1204\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1205\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1206\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\nPietsch M, et al. MRtrix3: A fast, flexible and open software\nframework for medical image processing and visualisation.\nNeuroImage. 2019 Nov 15;202:116-137.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"sh-to-sf\">\n<h3>sh_to_sf<a class=\"headerlink\" href=\"#sh-to-sf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.sh_to_sf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sh_to_sf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">basis_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.sh_to_sf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spherical harmonics (SH) to spherical function (SF).</p>\n<section id=\"id1207\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1207\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh<span class=\"classifier\">ndarray</span></dt><dd><p>SH coefficients representing a spherical function.</p>\n</dd>\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>The points on which to sample the spherical function.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum SH order in the SH fit.  For <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code>, there will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span></code> SH coefficients for a symmetric\nbasis and <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span></code> coefficients for a full\nSH basis.</p>\n</dd>\n<dt>basis_type<span class=\"classifier\">{None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}, optional</span></dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 [2]_[3]_ basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a href=\"#id1634\"><span class=\"problematic\" id=\"id1208\">[1]_</span></a> basis,\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>True to use a SH basis containing even and odd order SH functions.\nElse, use a SH basis consisting only of even order SH functions.</p>\n</dd>\n<dt>legacy: bool, optional</dt><dd><p>True to use a legacy basis definition for backward compatibility\nwith previous <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> implementations.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1209\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1209\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sf<span class=\"classifier\">ndarray</span></dt><dd><p>Spherical function values on the <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere</span></code>.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1210\">\n<h4>References<a class=\"headerlink\" href=\"#id1210\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1211\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1212\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1213\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\nPietsch M, et al. MRtrix3: A fast, flexible and open software\nframework for medical image processing and visualisation.\nNeuroImage. 2019 Nov 15;202:116-137.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"sh-to-sf-matrix\">\n<h3>sh_to_sf_matrix<a class=\"headerlink\" href=\"#sh-to-sf-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.sh_to_sf_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">sh_to_sf_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">basis_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">legacy</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_inv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">smooth</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.sh_to_sf_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Matrix that transforms Spherical harmonics (SH) to spherical\nfunction (SF).</p>\n<section id=\"id1214\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1214\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sphere<span class=\"classifier\">Sphere</span></dt><dd><p>The points on which to sample the spherical function.</p>\n</dd>\n<dt>sh_order<span class=\"classifier\">int, optional</span></dt><dd><p>Maximum SH order in the SH fit.  For <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_order</span></code>, there will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span></code> SH coefficients for a symmetric\nbasis and <code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span></code> coefficients for a full\nSH basis.</p>\n</dd>\n<dt>basis_type<span class=\"classifier\">{None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}, optional</span></dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 [2]_[3]_ basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a href=\"#id1635\"><span class=\"problematic\" id=\"id1215\">[1]_</span></a> basis,\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>If True, uses a SH basis containing even and odd order SH functions.\nElse, uses a SH basis consisting only of even order SH functions.</p>\n</dd>\n<dt>legacy: bool, optional</dt><dd><p>True to use a legacy basis definition for backward compatibility\nwith previous <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> implementations.</p>\n</dd>\n<dt>return_inv<span class=\"classifier\">bool, optional</span></dt><dd><p>If True then the inverse of the matrix is also returned.</p>\n</dd>\n<dt>smooth<span class=\"classifier\">float, optional</span></dt><dd><p>Lambda-regularization in the SH fit.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1216\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1216\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>B<span class=\"classifier\">ndarray</span></dt><dd><p>Matrix that transforms spherical harmonics to spherical function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sf</span> <span class=\"pre\">=</span> <span class=\"pre\">np.dot(sh,</span> <span class=\"pre\">B)</span></code>.</p>\n</dd>\n<dt>invB<span class=\"classifier\">ndarray</span></dt><dd><p>Inverse of B.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1217\">\n<h4>References<a class=\"headerlink\" href=\"#id1217\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1218\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1219\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1220\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\nPietsch M, et al. MRtrix3: A fast, flexible and open software\nframework for medical image processing and visualisation.\nNeuroImage. 2019 Nov 15;202:116-137.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"calculate-max-order\">\n<h3>calculate_max_order<a class=\"headerlink\" href=\"#calculate-max-order\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.calculate_max_order\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">calculate_max_order</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n_coeffs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.calculate_max_order\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the maximal harmonic order, given that you know the\nnumber of parameters that were estimated.\n\nParameters\n\u2014\u2014\u2014-\nn_coeffs : int\n    The number of SH coefficients\nfull_basis: bool, optional\n    True if the used SH basis contains even and odd order SH functions.\n    False if the SH basis consists only of even order SH functions.\n\nReturns\n\u2014\u2014-\nL : int\n    The maximal SH order, given the number of coefficients\n\nNotes\n\u2014\u2013\nThe calculation in this function for the symmetric SH basis\nproceeds according to the following logic:\n.. math::\n    n = frac{1}{2} (L+1) (L+2)\n    rarrow 2n = L^2 + 3L + 2\n    rarrow L^2 + 3L + 2 - 2n = 0\n    rarrow L^2 + 3L + 2(1-n) = 0\n    rarrow L_{1,2} = frac{-3 pm sqrt{9 - 8 (1-n)}}{2}\n    rarrow L{1,2} = frac{-3 pm sqrt{1 + 8n}}{2}\n\nFinally, the positive value is chosen between the two options.\n\nFor a full SH basis, the calculation consists in solving the equation\n<span class=\"math notranslate nohighlight\">\\(n = (L + 1)^2\\)</span> for <span class=\"math notranslate nohighlight\">\\(L\\)</span>, which gives <span class=\"math notranslate nohighlight\">\\(L = sqrt(n) - 1\\)</span>.</p>\n</dd></dl>\n\n</section>\n<section id=\"anisotropic-power\">\n<h3>anisotropic_power<a class=\"headerlink\" href=\"#anisotropic-power\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.anisotropic_power\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">anisotropic_power</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coeffs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">norm_factor</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-05</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">power</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">non_negative</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.anisotropic_power\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate anisotropic power map with a given SH coefficient matrix.\n\nParameters\n\u2014\u2014\u2014-\nsh_coeffs : ndarray\n    A ndarray where the last dimension is the\n    SH coefficients estimates for that voxel.\nnorm_factor: float, optional\n    The value to normalize the ap values.\npower : int, optional\n    The degree to which power maps are calculated.\nnon_negative: bool, optional\n    Whether to rectify the resulting map to be non-negative.\n\nReturns\n\u2014\u2014-\nlog_ap : ndarray\n    The log of the resulting power image.\n\nNotes\n\u2014\u2013\nCalculate AP image based on a IxJxKxC SH coefficient matrix based on the\nequation:\n.. math::\n    AP = sum_{l=2,4,6,\u2026}{frac{1}{2l+1} sum_{m=-l}^l{<a href=\"#id1221\"><span class=\"problematic\" id=\"id1222\">|</span></a>a_{l,m}|^n}}\n\nWhere the last dimension, C, is made of a flattened array of <span class=\"math notranslate nohighlight\">\\(l`x:math:`m\\)</span>\ncoefficients, where <span class=\"math notranslate nohighlight\">\\(l\\)</span> are the SH orders, and <span class=\"math notranslate nohighlight\">\\(m = 2l+1\\)</span>,\nSo l=1 has 1 coefficient, l=2 has 5, \u2026 l=8 has 17 and so on.\nA l=2 SH coefficient matrix will then be composed of a IxJxKx6 volume.\nThe power, <span class=\"math notranslate nohighlight\">\\(n\\)</span> is usually set to <span class=\"math notranslate nohighlight\">\\(n=2\\)</span>.\n\nThe final AP image is then shifted by -log(norm_factor), to be strictly\nnon-negative. Remaining values &lt; 0 are discarded (set to 0), per default,\nand this option is controlled through the <cite>non_negative</cite> keyword argument.\n\nReferences\n\u2014\u2014\u2014-\n.. [1]  Dell\u2019Acqua, F., Lacerda, L., Catani, M., Simmons, A., 2014.\n        Anisotropic Power Maps: A diffusion contrast to reveal low\n        anisotropy tissues from HARDI data,\n        in: Proceedings of International Society for Magnetic Resonance in\n        Medicine. Milan, Italy.</p>\n</dd></dl>\n\n</section>\n<section id=\"convert-sh-to-full-basis\">\n<h3>convert_sh_to_full_basis<a class=\"headerlink\" href=\"#convert-sh-to-full-basis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.convert_sh_to_full_basis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">convert_sh_to_full_basis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coeffs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.convert_sh_to_full_basis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given an array of SH coeffs from a symmetric basis, returns the\ncoefficients for the full SH basis by filling odd order SH coefficients\nwith zeros</p>\n<section id=\"id1223\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1223\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh_coeffs: ndarray</dt><dd><p>A ndarray where the last dimension is the\nSH coefficients estimates for that voxel.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1224\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1224\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>full_sh_coeffs: ndarray</dt><dd><p>A ndarray where the last dimension is the\nSH coefficients estimates for that voxel in\na full SH basis.</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"convert-sh-from-legacy\">\n<h3>convert_sh_from_legacy<a class=\"headerlink\" href=\"#convert-sh-from-legacy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.convert_sh_from_legacy\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">convert_sh_from_legacy</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coeffs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_basis</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.convert_sh_from_legacy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert SH coefficients in legacy SH basis to SH coefficients\nof the new SH basis for <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> <a href=\"#id1636\"><span class=\"problematic\" id=\"id1225\">[1]_</span></a> or <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> [2]_[3]_\nbases.</p>\n<section id=\"id1226\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1226\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh_coeffs: ndarray</dt><dd><p>A ndarray where the last dimension is the\nSH coefficients estimates for that voxel.</p>\n</dd>\n<dt>sh_basis: {\u2018descoteaux07\u2019, \u2018tournier07\u2019}</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 [2]_[3]_ basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a href=\"#id1637\"><span class=\"problematic\" id=\"id1227\">[1]_</span></a> basis.</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>True if the input SH basis includes both even and odd\norder SH functions, else False.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1228\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1228\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>out_sh_coeffs: ndarray</dt><dd><p>The array of coefficients expressed in the new SH basis.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1229\">\n<h4>References<a class=\"headerlink\" href=\"#id1229\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1230\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1231\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1232\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\nPietsch M, et al. MRtrix3: A fast, flexible and open software\nframework for medical image processing and visualisation.\nNeuroImage. 2019 Nov 15;202:116-137.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"convert-sh-to-legacy\">\n<h3>convert_sh_to_legacy<a class=\"headerlink\" href=\"#convert-sh-to-legacy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shm.convert_sh_to_legacy\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shm.</span></span><span class=\"sig-name descname\"><span class=\"pre\">convert_sh_to_legacy</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_coeffs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sh_basis</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">full_basis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shm.convert_sh_to_legacy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert SH coefficients in new SH basis to SH coefficients for\nthe legacy SH basis for <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> <a href=\"#id1638\"><span class=\"problematic\" id=\"id1233\">[1]_</span></a> or <code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> [2]_[3]_\nbases.</p>\n<section id=\"id1234\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1234\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>sh_coeffs: ndarray</dt><dd><p>A ndarray where the last dimension is the\nSH coefficients estimates for that voxel.</p>\n</dd>\n<dt>sh_basis: {\u2018descoteaux07\u2019, \u2018tournier07\u2019}</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 [2]_[3]_ basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a href=\"#id1639\"><span class=\"problematic\" id=\"id1235\">[1]_</span></a> basis.</p>\n</dd>\n<dt>full_basis: bool, optional</dt><dd><p>True if the input SH basis includes both even and odd\norder SH functions.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1236\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1236\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>out_sh_coeffs: ndarray</dt><dd><p>The array of coefficients expressed in the legacy SH basis.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1237\">\n<h4>References<a class=\"headerlink\" href=\"#id1237\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1238\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1239\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>2<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</p>\n</aside>\n<aside class=\"footnote brackets\" id=\"id1240\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>3<span class=\"fn-bracket\">]</span></span>\n<p>Tournier J-D, Smith R, Raffelt D, Tabbara R, Dhollander T,\nPietsch M, et al. MRtrix3: A fast, flexible and open software\nframework for medical image processing and visualisation.\nNeuroImage. 2019 Nov 15;202:116-137.</p>\n</aside>\n</aside>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"shoremodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreModel\" title=\"dipy.reconst.shore.ShoreModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ShoreModel</span></code></a><a class=\"headerlink\" href=\"#shoremodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ShoreModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">zeta</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">700</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambdaN</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-08</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambdaL</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-08</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.025330295910584444</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">constrain_e0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">positive_constraint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_grid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">11</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.02</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\" title=\"dipy.reconst.cache.Cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a></p>\n<p>Simple Harmonic Oscillator based Reconstruction and Estimation\n(SHORE) <a href=\"#id1640\"><span class=\"problematic\" id=\"id1241\">[1]_</span></a> of the diffusion signal.\n\nThe main idea is to model the diffusion signal as a linear combination of\ncontinuous functions <span class=\"math notranslate nohighlight\">\\(\\phi_i\\)</span>,\n\n..math::\n    :nowrap:\n        begin{equation}\n            S(mathbf{q})= sum_{i=0}^I  c_{i} phi_{i}(mathbf{q}).\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\mathbf{q}\\)</span> is the wave vector which corresponds to different\ngradient directions. Numerous continuous functions <span class=\"math notranslate nohighlight\">\\(\\phi_i\\)</span> can be used to\nmodel <span class=\"math notranslate nohighlight\">\\(S\\)</span>. Some are presented in [2,3,4]_.\n\nFrom the <span class=\"math notranslate nohighlight\">\\(c_i\\)</span> coefficients, there exist analytical formulae to estimate\nthe ODF, the return to the origin probability (RTOP), the mean square\ndisplacement (MSD), amongst others <a href=\"#id1641\"><span class=\"problematic\" id=\"id1242\">[5]_</span></a>.\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Ozarslan E. et al., \u201cSimple harmonic oscillator based reconstruction\n       and estimation for one-dimensional q-space magnetic resonance\n       1D-SHORE)\u201d, Proc Intl Soc Mag Reson Med, vol. 16, p. 35., 2008.\n\n.. [2] Merlet S. et al., \u201cContinuous diffusion signal, EAP and ODF\n       estimation via Compressive Sensing in diffusion MRI\u201d, Medical\n       Image Analysis, 2013.\n\n.. [3] Rathi Y. et al., \u201cSparse multi-shell diffusion imaging\u201d, MICCAI,\n       2011.\n\n.. [4] Cheng J. et al., \u201cTheoretical Analysis and Practical Insights on\n       EAP Estimation via a Unified HARDI Framework\u201d, MICCAI workshop on\n       Computational Diffusion MRI, 2011.\n\n.. [5] Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel\n       diffusion imaging method for mapping tissue microstructure\u201d,\n       NeuroImage, 2013.\n\nNotes\n\u2014\u2013\nThe implementation of SHORE depends on CVXPY (<a class=\"reference external\" href=\"http://www.cvxpy.org/\">http://www.cvxpy.org/</a>).</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">zeta</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">700</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambdaN</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-08</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lambdaL</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-08</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.025330295910584444</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">constrain_e0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">positive_constraint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_grid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">11</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pos_radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.02</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cvxpy_solver</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Analytical and continuous modeling of the diffusion signal with\nrespect to the SHORE basis [1,2]_.\nThis implementation is a modification of SHORE presented in <a href=\"#id1642\"><span class=\"problematic\" id=\"id1243\">[1]_</span></a>.\nThe modification was made to obtain the same ordering of the basis\npresented in [2,3]_.\n\nThe main idea is to model the diffusion signal as a linear\ncombination of continuous functions <span class=\"math notranslate nohighlight\">\\(\\phi_i\\)</span>,\n\n..math::\n    :nowrap:\n        begin{equation}\n            S(mathbf{q})= sum_{i=0}^I  c_{i} phi_{i}(mathbf{q}).\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\mathbf{q}\\)</span> is the wave vector which corresponds to different\ngradient directions.\n\nFrom the <span class=\"math notranslate nohighlight\">\\(c_i\\)</span> coefficients, there exists an analytical formula to\nestimate the ODF.\n\n\nParameters\n\u2014\u2014\u2014-\ngtab : GradientTable,\n    gradient directions and bvalues container class\nradial_order : unsigned int,\n    an even integer that represent the order of the basis\nzeta : unsigned int,\n    scale factor\nlambdaN : float,\n    radial regularisation constant\nlambdaL : float,\n    angular regularisation constant\ntau : float,\n    diffusion time. By default the value that makes q equal to the\n    square root of the b-value.\nconstrain_e0 : bool,\n    Constrain the optimization such that E(0) = 1.\npositive_constraint : bool,\n    Constrain the propagator to be positive.\npos_grid : int,\n    Grid that define the points of the EAP in which we want to enforce\n    positivity.\npos_radius : float,\n    Radius of the grid of the EAP in which enforce positivity in\n    millimeters. By default 20e-03 mm.\ncvxpy_solver : str, optional\n    cvxpy solver name. Optionally optimize the positivity constraint\n    with a particular cvxpy solver. See <a class=\"reference external\" href=\"http://www.cvxpy.org/\">http://www.cvxpy.org/</a> for\n    details.\n    Default: None (cvxpy chooses its own solver)\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Merlet S. et al., \u201cContinuous diffusion signal, EAP and\nODF estimation via Compressive Sensing in diffusion MRI\u201d, Medical\nImage Analysis, 2013.\n\n.. [2] Cheng J. et al., \u201cTheoretical Analysis and Practical Insights\non EAP Estimation via a Unified HARDI Framework\u201d, MICCAI workshop on\nComputational Diffusion MRI, 2011.\n\n.. [3] Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel\n   diffusion imaging method for mapping tissue microstructure\u201d,\n   NeuroImage, 2013.\n\nExamples\n\u2014\u2014\u2013\nIn this example, where the data, gradient table and sphere tessellation\nused for reconstruction are provided, we model the diffusion signal\nwith respect to the SHORE basis and compute the real and analytical\nODF.\n\n&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; from dipy.data import get_isbi2013_2shell_gtab, default_sphere\n&gt;&gt;&gt; from dipy.sims.voxel import sticks_and_ball\n&gt;&gt;&gt; from dipy.reconst.shm import descoteaux07_legacy_msg\n&gt;&gt;&gt; from dipy.reconst.shore import ShoreModel\n&gt;&gt;&gt; gtab = get_isbi2013_2shell_gtab()\n&gt;&gt;&gt; data, golden_directions = sticks_and_ball(\n\u2026    gtab, d=0.0015, S0=1., angles=[(0, 0), (90, 0)],\n\u2026    fractions=[50, 50], snr=None)\n\u2026\n&gt;&gt;&gt; radial_order = 4\n&gt;&gt;&gt; zeta = 700\n&gt;&gt;&gt; asm = ShoreModel(gtab, radial_order=radial_order, zeta=zeta,\n\u2026                  lambdaN=1e-8, lambdaL=1e-8)\n&gt;&gt;&gt; with warnings.catch_warnings():\n\u2026     warnings.filterwarnings(\n\u2026         \u201cignore\u201d, message=descoteaux07_legacy_msg,\n\u2026         category=PendingDeprecationWarning)\n\u2026     asmfit = asm.fit(data)\n\u2026     odf = asmfit.odf(default_sphere)</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreModel.fit\">\n<span class=\"sig-name descname\"><span class=\"pre\">fit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"shorefit\">\n<h3><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit\" title=\"dipy.reconst.shore.ShoreFit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ShoreFit</span></code></a><a class=\"headerlink\" href=\"#shorefit\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ShoreFit</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shore_coef</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shore_coef</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates diffusion properties for a single voxel</p>\n<section id=\"id1244\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1244\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>model<span class=\"classifier\">object,</span></dt><dd><p>AnalyticalModel</p>\n</dd>\n<dt>shore_coef<span class=\"classifier\">1d ndarray,</span></dt><dd><p>shore coefficients</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.fitted_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">fitted_signal</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.fitted_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The fitted signal.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.msd\">\n<span class=\"sig-name descname\"><span class=\"pre\">msd</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.msd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical mean squared displacement (MSD) <a href=\"#id1643\"><span class=\"problematic\" id=\"id1245\">[1]_</span></a>\n\n..math::\n    :nowrap:\n        begin{equation}\n            MSD:{DSI}=int_{-infty}^{infty}int_{-infty}^{infty}\n            int_{-infty}^{infty} P(hat{mathbf{r}}) cdot\n            hat{mathbf{r}}^{2} dr_x dr_y dr_z\n        end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\hat{\\mathbf{r}}\\)</span> is a point in the 3D propagator space (see Wu\net al. <a href=\"#id1644\"><span class=\"problematic\" id=\"id1246\">[1]_</span></a>).\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Wu Y. et al., \u201cHybrid diffusion imaging\u201d, NeuroImage, vol 36,\np. 617-629, 2007.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.odf\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the ODF for a given discrete sphere.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.odf_sh\">\n<span class=\"sig-name descname\"><span class=\"pre\">odf_sh</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.odf_sh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the real analytical ODF in terms of Spherical\nHarmonics.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">pdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">r_points</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion propagator on a given set of real points.\nif the array r_points is non writeable, then intermediate\nresults are cached for faster recalculation</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.pdf_grid\">\n<span class=\"sig-name descname\"><span class=\"pre\">pdf_grid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gridsize</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radius_max</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.pdf_grid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies the analytical FFT on <span class=\"math notranslate nohighlight\">\\(S\\)</span> to generate the diffusion\npropagator. This is calculated on a discrete 3D grid in order to\nobtain an EAP similar to that which is obtained with DSI.\n\nParameters\n\u2014\u2014\u2014-\ngridsize : unsigned int\n    dimension of the propagator grid\nradius_max : float\n    maximal radius in which to compute the propagator\n\nReturns\n\u2014\u2014-\neap : ndarray\n    the ensemble average propagator in the 3D grid</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.rtop_pdf\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtop_pdf</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.rtop_pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to origin probability (RTOP)\nfrom the pdf <a href=\"#id1645\"><span class=\"problematic\" id=\"id1247\">[1]_</span></a>.</p>\n<section id=\"id1248\">\n<h4>References<a class=\"headerlink\" href=\"#id1248\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1249\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.rtop_signal\">\n<span class=\"sig-name descname\"><span class=\"pre\">rtop_signal</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.rtop_signal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the analytical return to origin probability (RTOP)\nfrom the signal <a href=\"#id1646\"><span class=\"problematic\" id=\"id1250\">[1]_</span></a>.</p>\n<section id=\"id1251\">\n<h4>References<a class=\"headerlink\" href=\"#id1251\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1252\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Ozarslan E. et al., \u201cMean apparent propagator (MAP) MRI: A novel</p>\n</aside>\n</aside>\n<p>diffusion imaging method for mapping tissue microstructure\u201d,\nNeuroImage, 2013.</p>\n</section>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.ShoreFit.shore_coeff\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">shore_coeff</span></span><a class=\"headerlink\" href=\"#dipy.reconst.shore.ShoreFit.shore_coeff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The SHORE coefficients</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"shore-matrix\">\n<h3>shore_matrix<a class=\"headerlink\" href=\"#shore-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.shore_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">shore_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">zeta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tau</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.025330295910584444</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.shore_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the SHORE matrix for modified Merlet\u2019s 3D-SHORE <a href=\"#id1647\"><span class=\"problematic\" id=\"id1253\">[1]_</span></a>\n\n..math::\n        :nowrap:\n            begin{equation}\n                textbf{E}(qtextbf{u})=sum_{l=0, even}^{N_{max}}\n                                        sum_{n=l}^{(N_{max}+l)/2}\n                                        sum_{m=-l}^l c_{nlm}\n                                        phi_{nlm}(qtextbf{u})\n            end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\phi_{nlm}\\)</span> is\n..math::\n        :nowrap:\n            begin{equation}\n                phi_{nlm}^{SHORE}(qtextbf{u})=Biggl[dfrac{2(n-l)!}\n                    {zeta^{3/2} Gamma(n+3/2)} Biggr]^{1/2}\n                    Biggl(dfrac{q^2}{zeta}Biggr)^{l/2}\n                    expBiggl(dfrac{-q^2}{2zeta}Biggr)\n                    L^{l+1/2}_{n-l} Biggl(dfrac{q^2}{zeta}Biggr)\n                    Y_l^m(textbf{u}).\n            end{equation}\n\nParameters\n\u2014\u2014\u2014-\nradial_order : unsigned int,\n    an even integer that represent the order of the basis\nzeta : unsigned int,\n    scale factor\ngtab : GradientTable,\n    gradient directions and bvalues container class\ntau : float,\n    diffusion time. By default the value that makes q=sqrt(b).\n\nReferences\n\u2014\u2014\u2014-\n.. [1] Merlet S. et al., \u201cContinuous diffusion signal, EAP and\nODF estimation via Compressive Sensing in diffusion MRI\u201d, Medical\nImage Analysis, 2013.</p>\n</dd></dl>\n\n</section>\n<section id=\"shore-matrix-pdf\">\n<h3>shore_matrix_pdf<a class=\"headerlink\" href=\"#shore-matrix-pdf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.shore_matrix_pdf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">shore_matrix_pdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">zeta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.shore_matrix_pdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the SHORE propagator matrix <a href=\"#id1648\"><span class=\"problematic\" id=\"id1254\">[1]_</span></a>\u201d</p>\n<section id=\"id1255\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1255\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>zeta<span class=\"classifier\">unsigned int,</span></dt><dd><p>scale factor</p>\n</dd>\n<dt>rtab<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>real space points in which calculates the pdf</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1256\">\n<h4>References<a class=\"headerlink\" href=\"#id1256\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1257\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Merlet S. et al., \u201cContinuous diffusion signal, EAP and</p>\n</aside>\n</aside>\n<p>ODF estimation via Compressive Sensing in diffusion MRI\u201d, Medical\nImage Analysis, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"shore-matrix-odf\">\n<h3>shore_matrix_odf<a class=\"headerlink\" href=\"#shore-matrix-odf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.shore_matrix_odf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">shore_matrix_odf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">zeta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sphere_vertices</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.shore_matrix_odf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the SHORE ODF matrix <a href=\"#id1649\"><span class=\"problematic\" id=\"id1258\">[1]_</span></a>\u201d</p>\n<section id=\"id1259\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1259\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int,</span></dt><dd><p>an even integer that represent the order of the basis</p>\n</dd>\n<dt>zeta<span class=\"classifier\">unsigned int,</span></dt><dd><p>scale factor</p>\n</dd>\n<dt>sphere_vertices<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>vertices of the odf sphere</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1260\">\n<h4>References<a class=\"headerlink\" href=\"#id1260\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<aside class=\"footnote-list brackets\">\n<aside class=\"footnote brackets\" id=\"id1261\" role=\"note\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Merlet S. et al., \u201cContinuous diffusion signal, EAP and</p>\n</aside>\n</aside>\n<p>ODF estimation via Compressive Sensing in diffusion MRI\u201d, Medical\nImage Analysis, 2013.</p>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"l-shore\">\n<h3>l_shore<a class=\"headerlink\" href=\"#l-shore\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.l_shore\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">l_shore</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.l_shore\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the angular regularisation matrix for SHORE basis</p>\n</dd></dl>\n\n</section>\n<section id=\"n-shore\">\n<h3>n_shore<a class=\"headerlink\" href=\"#n-shore\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.n_shore\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">n_shore</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.n_shore\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the angular regularisation matrix for SHORE basis</p>\n</dd></dl>\n\n</section>\n<section id=\"id1262\">\n<h3>create_rspace<a class=\"headerlink\" href=\"#id1262\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.create_rspace\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">create_rspace</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gridsize</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radius_max</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.create_rspace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Create the real space table, that contains the points in which</dt><dd><p>to compute the pdf.</p>\n</dd>\n</dl>\n<section id=\"id1263\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1263\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gridsize<span class=\"classifier\">unsigned int</span></dt><dd><p>dimension of the propagator grid</p>\n</dd>\n<dt>radius_max<span class=\"classifier\">float</span></dt><dd><p>maximal radius in which compute the propagator</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1264\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1264\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>vecs<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>positions of the pdf points in a 3D matrix</p>\n</dd>\n<dt>tab<span class=\"classifier\">array, shape (N,3)</span></dt><dd><p>real space points in which calculates the pdf</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"shore-indices\">\n<h3>shore_indices<a class=\"headerlink\" href=\"#shore-indices\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.shore_indices\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">shore_indices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">radial_order</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">index</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.shore_indices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given the basis order and the index, return the shore indices n, l, m\nfor modified Merlet\u2019s 3D-SHORE\n..math::\n        :nowrap:\n            begin{equation}\n                textbf{E}(qtextbf{u})=sum_{l=0, even}^{N_{max}}\n                                        sum_{n=l}^{(N_{max}+l)/2}\n                                        sum_{m=-l}^l c_{nlm}\n                                        phi_{nlm}(qtextbf{u})\n            end{equation}\n\nwhere <span class=\"math notranslate nohighlight\">\\(\\phi_{nlm}\\)</span> is\n..math::\n        :nowrap:\n            begin{equation}\n                phi_{nlm}^{SHORE}(qtextbf{u})=Biggl[dfrac{2(n-l)!}\n                    {zeta^{3/2} Gamma(n+3/2)} Biggr]^{1/2}\n                    Biggl(dfrac{q^2}{zeta}Biggr)^{l/2}\n                    expBiggl(dfrac{-q^2}{2zeta}Biggr)\n                    L^{l+1/2}_{n-l} Biggl(dfrac{q^2}{zeta}Biggr)\n                    Y_l^m(textbf{u}).\n            end{equation}\n\nParameters\n\u2014\u2014\u2014-\nradial_order : unsigned int\n    an even integer that represent the maximal order of the basis\nindex : unsigned int\n    index of the coefficients, start from 0\n\nReturns\n\u2014\u2014-\nn :  unsigned int\n    the index n of the modified shore basis\nl :  unsigned int\n    the index l of the modified shore basis\nm :  unsigned int\n    the index m of the modified shore basis</p>\n</dd></dl>\n\n</section>\n<section id=\"shore-order\">\n<h3>shore_order<a class=\"headerlink\" href=\"#shore-order\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.shore.shore_order\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.shore.</span></span><span class=\"sig-name descname\"><span class=\"pre\">shore_order</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">m</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.shore.shore_order\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given the indices (n,l,m) of the basis, return the minimum order\nfor those indices and their index for modified Merlet\u2019s 3D-SHORE.</p>\n<section id=\"id1265\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1265\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>n<span class=\"classifier\">unsigned int</span></dt><dd><p>the index n of the modified shore basis</p>\n</dd>\n<dt>l<span class=\"classifier\">unsigned int</span></dt><dd><p>the index l of the modified shore basis</p>\n</dd>\n<dt>m<span class=\"classifier\">unsigned int</span></dt><dd><p>the index m of the modified shore basis</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1266\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1266\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>radial_order<span class=\"classifier\">unsigned int</span></dt><dd><p>an even integer that represent the maximal order of the basis</p>\n</dd>\n<dt>index<span class=\"classifier\">unsigned int</span></dt><dd><p>index of the coefficient corresponding to (n,l,m), start from 0</p>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n<section id=\"dki-design-matrix\">\n<h3>dki_design_matrix<a class=\"headerlink\" href=\"#dki-design-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.reconst.utils.dki_design_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.reconst.utils.</span></span><span class=\"sig-name descname\"><span class=\"pre\">dki_design_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gtab</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.reconst.utils.dki_design_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Construct B design matrix for DKI.</p>\n<section id=\"id1267\">\n<h4>Parameters<a class=\"headerlink\" href=\"#id1267\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl class=\"simple\">\n<dt>gtab<span class=\"classifier\">GradientTable</span></dt><dd><p>Measurement directions.</p>\n</dd>\n</dl>\n</section>\n<section id=\"id1268\">\n<h4>Returns<a class=\"headerlink\" href=\"#id1268\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<dl>\n<dt>B<span class=\"classifier\">array (N, 22)</span></dt><dd><p>Design matrix or B matrix for the DKI model\nB[j, :] = (Bxx, Bxy, Byy, Bxz, Byz, Bzz,</p>\n<blockquote>\n<div><p>Bxxxx, Byyyy, Bzzzz, Bxxxy, Bxxxz,\nBxyyy, Byyyz, Bxzzz, Byzzz, Bxxyy,\nBxxzz, Byyzz, Bxxyz, Bxyyz, Bxyzz,\nBlogS0)</p>\n</div></blockquote>\n</dd>\n</dl>\n</section>\n</dd></dl>\n\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.segment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment</span></code>", "N", "next"], ["reference/dipy.nn", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code>", "P", "previous"]], "sourcename": "reference/dipy.reconst.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.base\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.base</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.benchmarks\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.benchmarks.bench_bounding_box\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_bounding_box</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.benchmarks.bench_csd\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_csd</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.benchmarks.bench_peaks\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_peaks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.benchmarks.bench_squash\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_squash</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.benchmarks.bench_vec_val_sum\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.benchmarks.bench_vec_val_sum</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.cache\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.cache</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.cross_validation\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.cross_validation</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.csdeconv\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.csdeconv</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.dki\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dki</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.dki_micro\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dki_micro</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.dsi\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dsi</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.dti\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.dti</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.forecast\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.forecast</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.fwdti\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.fwdti</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.gqi\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.gqi</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.ivim\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.ivim</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.mapmri\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.mapmri</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.mcsd\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.mcsd</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.msdki\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.msdki</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.multi_voxel\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.multi_voxel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.odf\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.odf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.qtdmri\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.qtdmri</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.qti\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.qti</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.rumba\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.rumba</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.sfm\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.sfm</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.shm\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.shm</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.shore\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.shore</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.reconst.utils\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst.utils</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#reconstmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#reconstfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.base.ReconstFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstFit.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bench-bounding-box\">bench_bounding_box</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bench_bounding_box()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#num-grad\">num_grad</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_csd.num_grad\"><code class=\"docutils literal notranslate\"><span class=\"pre\">num_grad()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bench-csdeconv\">bench_csdeconv</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_csd.bench_csdeconv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bench_csdeconv()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bench-local-maxima\">bench_local_maxima</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_peaks.bench_local_maxima\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bench_local_maxima()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#old-squash\">old_squash</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_squash.old_squash\"><code class=\"docutils literal notranslate\"><span class=\"pre\">old_squash()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bench-quick-squash\">bench_quick_squash</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_squash.bench_quick_squash\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bench_quick_squash()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bench-vec-val-vect\">bench_vec_val_vect</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bench_vec_val_vect()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cache\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cache</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cache.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache.cache_clear\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cache.cache_clear()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache.cache_get\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cache.cache_get()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cache.Cache.cache_set\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cache.cache_set()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#coeff-of-determination\">coeff_of_determination</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cross_validation.coeff_of_determination\"><code class=\"docutils literal notranslate\"><span class=\"pre\">coeff_of_determination()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#kfold-xval\">kfold_xval</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.cross_validation.kfold_xval\"><code class=\"docutils literal notranslate\"><span class=\"pre\">kfold_xval()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#axsymshresponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AxSymShResponse</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.AxSymShResponse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AxSymShResponse</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.AxSymShResponse.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AxSymShResponse.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.AxSymShResponse.basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AxSymShResponse.basis()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.AxSymShResponse.on_sphere\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AxSymShResponse.on_sphere()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#constrainedsphericaldeconvmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#constrainedsdtmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSDTModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSDTModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSDTModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.ConstrainedSDTModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSDTModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#auto-response\">auto_response</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.auto_response\"><code class=\"docutils literal notranslate\"><span class=\"pre\">auto_response()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#response-from-mask\">response_from_mask</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.response_from_mask\"><code class=\"docutils literal notranslate\"><span class=\"pre\">response_from_mask()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#estimate-response\">estimate_response</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.estimate_response\"><code class=\"docutils literal notranslate\"><span class=\"pre\">estimate_response()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#forward-sdt-deconv-mat\">forward_sdt_deconv_mat</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.forward_sdt_deconv_mat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">forward_sdt_deconv_mat()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#csdeconv\">csdeconv</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.csdeconv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">csdeconv()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#odf-deconv\">odf_deconv</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.odf_deconv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">odf_deconv()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#odf-sh-to-sharp\">odf_sh_to_sharp</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.odf_sh_to_sharp\"><code class=\"docutils literal notranslate\"><span class=\"pre\">odf_sh_to_sharp()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mask-for-response-ssst\">mask_for_response_ssst</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.mask_for_response_ssst\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mask_for_response_ssst()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#response-from-mask-ssst\">response_from_mask_ssst</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.response_from_mask_ssst\"><code class=\"docutils literal notranslate\"><span class=\"pre\">response_from_mask_ssst()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#auto-response-ssst\">auto_response_ssst</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.auto_response_ssst\"><code class=\"docutils literal notranslate\"><span class=\"pre\">auto_response_ssst()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#recursive-response\">recursive_response</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.recursive_response\"><code class=\"docutils literal notranslate\"><span class=\"pre\">recursive_response()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#fa-trace-to-lambdas\">fa_trace_to_lambdas</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.csdeconv.fa_trace_to_lambdas\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fa_trace_to_lambdas()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusionkurtosismodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.multi_fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel.multi_fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusionkurtosisfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.ak\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.ak()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.akc\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.akc()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.kfa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.kfa</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.kmax\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.kmax()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.kt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.kt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.mk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.mk()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.mkt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.mkt()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.DiffusionKurtosisFit.rk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisFit.rk()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#carlson-rf\">carlson_rf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.carlson_rf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">carlson_rf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#carlson-rd\">carlson_rd</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.carlson_rd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">carlson_rd()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#directional-diffusion\">directional_diffusion</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.directional_diffusion\"><code class=\"docutils literal notranslate\"><span class=\"pre\">directional_diffusion()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#directional-diffusion-variance\">directional_diffusion_variance</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.directional_diffusion_variance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">directional_diffusion_variance()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#directional-kurtosis\">directional_kurtosis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.directional_kurtosis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">directional_kurtosis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#apparent-kurtosis-coef\">apparent_kurtosis_coef</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.apparent_kurtosis_coef\"><code class=\"docutils literal notranslate\"><span class=\"pre\">apparent_kurtosis_coef()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mean-kurtosis\">mean_kurtosis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.mean_kurtosis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mean_kurtosis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#radial-kurtosis\">radial_kurtosis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.radial_kurtosis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">radial_kurtosis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#axial-kurtosis\">axial_kurtosis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.axial_kurtosis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">axial_kurtosis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#kurtosis-maximum\">kurtosis_maximum</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.kurtosis_maximum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">kurtosis_maximum()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mean-kurtosis-tensor\">mean_kurtosis_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.mean_kurtosis_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mean_kurtosis_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#kurtosis-fractional-anisotropy\">kurtosis_fractional_anisotropy</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.kurtosis_fractional_anisotropy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">kurtosis_fractional_anisotropy()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#dki-prediction\">dki_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.dki_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dki_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#params-to-dki-params\">params_to_dki_params</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.params_to_dki_params\"><code class=\"docutils literal notranslate\"><span class=\"pre\">params_to_dki_params()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ls-fit-dki\">ls_fit_dki</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.ls_fit_dki\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ls_fit_dki()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cls-fit-dki\">cls_fit_dki</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.cls_fit_dki\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cls_fit_dki()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#wrotate\">Wrotate</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.Wrotate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Wrotate()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#wrotate-element\">Wrotate_element</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.Wrotate_element\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Wrotate_element()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#wcons\">Wcons</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.Wcons\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Wcons()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#split-dki-param\">split_dki_param</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki.split_dki_param\"><code class=\"docutils literal notranslate\"><span class=\"pre\">split_dki_param()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#kurtosismicrostructuremodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructureModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructureModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#kurtosismicrostructuralfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.awf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.awf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.axonal_diffusivity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.axonal_diffusivity</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_ad\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.hindered_ad</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_evals\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.hindered_evals</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_rd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.hindered_rd</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.restricted_evals\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.restricted_evals</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.KurtosisMicrostructuralFit.tortuosity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KurtosisMicrostructuralFit.tortuosity</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#axonal-water-fraction\">axonal_water_fraction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.axonal_water_fraction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">axonal_water_fraction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusion-components\">diffusion_components</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.diffusion_components\"><code class=\"docutils literal notranslate\"><span class=\"pre\">diffusion_components()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#dkimicro-prediction\">dkimicro_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.dkimicro_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dkimicro_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#tortuosity\">tortuosity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dki_micro.tortuosity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">tortuosity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusionspectrummodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusionspectrumfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.msd_discrete\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit.msd_discrete()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit.pdf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.rtop_pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit.rtop_pdf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumFit.rtop_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumFit.rtop_signal()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusionspectrumdeconvmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#diffusionspectrumdeconvfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.DiffusionSpectrumDeconvFit.pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionSpectrumDeconvFit.pdf()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#create-qspace\">create_qspace</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.create_qspace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create_qspace()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#create-qtable\">create_qtable</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.create_qtable\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create_qtable()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#hanning-filter\">hanning_filter</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.hanning_filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">hanning_filter()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#pdf-interp-coords\">pdf_interp_coords</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.pdf_interp_coords\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pdf_interp_coords()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#pdf-odf\">pdf_odf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.pdf_odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pdf_odf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#half-to-full-qspace\">half_to_full_qspace</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.half_to_full_qspace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">half_to_full_qspace()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#project-hemisph-bvecs\">project_hemisph_bvecs</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.project_hemisph_bvecs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">project_hemisph_bvecs()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#threshold-propagator\">threshold_propagator</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.threshold_propagator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">threshold_propagator()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#gen-psf\">gen_PSF</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.gen_PSF\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gen_PSF()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lr-deconv\">LR_deconv</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dsi.LR_deconv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LR_deconv()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#tensormodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#tensorfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.S0_hat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.S0_hat</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.ad\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.ad()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.adc\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.adc()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.color_fa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.color_fa()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.directions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.directions</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.evals\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.evals</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.evecs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.evecs</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.fa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.fa()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.ga\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.ga()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.linearity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.linearity()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.lower_triangular\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.lower_triangular()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.md\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.md()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.mode\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.mode()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.planarity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.planarity()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.quadratic_form\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.quadratic_form</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.rd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.rd()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.shape</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.sphericity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.sphericity()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.TensorFit.trace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorFit.trace()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#fractional-anisotropy\">fractional_anisotropy</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.fractional_anisotropy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#geodesic-anisotropy\">geodesic_anisotropy</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.geodesic_anisotropy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">geodesic_anisotropy()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mean-diffusivity\">mean_diffusivity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.mean_diffusivity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mean_diffusivity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#axial-diffusivity\">axial_diffusivity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.axial_diffusivity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">axial_diffusivity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#radial-diffusivity\">radial_diffusivity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.radial_diffusivity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">radial_diffusivity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#trace\">trace</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.trace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">trace()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#color-fa\">color_fa</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.color_fa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">color_fa()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#determinant\">determinant</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.determinant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">determinant()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#isotropic\">isotropic</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.isotropic\"><code class=\"docutils literal notranslate\"><span class=\"pre\">isotropic()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#deviatoric\">deviatoric</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.deviatoric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">deviatoric()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#norm\">norm</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.norm\"><code class=\"docutils literal notranslate\"><span class=\"pre\">norm()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mode\">mode</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.mode\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mode()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#linearity\">linearity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.linearity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">linearity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#planarity\">planarity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.planarity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">planarity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sphericity\">sphericity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.sphericity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sphericity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#apparent-diffusion-coef\">apparent_diffusion_coef</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.apparent_diffusion_coef\"><code class=\"docutils literal notranslate\"><span class=\"pre\">apparent_diffusion_coef()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#tensor-prediction\">tensor_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.tensor_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">tensor_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#iter-fit-tensor\">iter_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.iter_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#wls-fit-tensor\">wls_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.wls_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">wls_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ols-fit-tensor\">ols_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.ols_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ols_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#nlls-fit-tensor\">nlls_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.nlls_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nlls_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#restore-fit-tensor\">restore_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.restore_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">restore_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lt-indices\">_lt_indices</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti._lt_indices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_lt_indices()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#from-lower-triangular\">from_lower_triangular</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.from_lower_triangular\"><code class=\"docutils literal notranslate\"><span class=\"pre\">from_lower_triangular()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lt-rows\">_lt_rows</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti._lt_rows\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_lt_rows()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lt-cols\">_lt_cols</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti._lt_cols\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_lt_cols()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lower-triangular\">lower_triangular</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.lower_triangular\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lower_triangular()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#decompose-tensor\">decompose_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.decompose_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">decompose_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#design-matrix\">design_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.design_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">design_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#quantize-evecs\">quantize_evecs</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.quantize_evecs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">quantize_evecs()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#eig-from-lo-tri\">eig_from_lo_tri</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.dti.eig_from_lo_tri\"><code class=\"docutils literal notranslate\"><span class=\"pre\">eig_from_lo_tri()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#forecastmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForecastModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#forecastfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForecastFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.dpar\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.dpar</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.dperp\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.dperp</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.fractional_anisotropy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.fractional_anisotropy()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.mean_diffusivity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.mean_diffusivity()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.ForecastFit.sh_coeff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForecastFit.sh_coeff</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#find-signal-means\">find_signal_means</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.find_signal_means\"><code class=\"docutils literal notranslate\"><span class=\"pre\">find_signal_means()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#forecast-error-func\">forecast_error_func</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.forecast_error_func\"><code class=\"docutils literal notranslate\"><span class=\"pre\">forecast_error_func()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#psi-l\">psi_l</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.psi_l\"><code class=\"docutils literal notranslate\"><span class=\"pre\">psi_l()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#forecast-matrix\">forecast_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.forecast_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">forecast_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rho-matrix\">rho_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.rho_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rho_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lb-forecast\">lb_forecast</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.forecast.lb_forecast\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lb_forecast()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#freewatertensormodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#freewatertensorfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit.f\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit.f</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.FreeWaterTensorFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FreeWaterTensorFit.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#fwdti-prediction\">fwdti_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.fwdti_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fwdti_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#wls-iter\">wls_iter</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.wls_iter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">wls_iter()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id587\">wls_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.wls_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">wls_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#nls-iter\">nls_iter</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.nls_iter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nls_iter()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#nls-fit-tensor\">nls_fit_tensor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.nls_fit_tensor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nls_fit_tensor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lower-triangular-to-cholesky\">lower_triangular_to_cholesky</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.lower_triangular_to_cholesky\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lower_triangular_to_cholesky()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cholesky-to-lower-triangular\">cholesky_to_lower_triangular</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.fwdti.cholesky_to_lower_triangular\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cholesky_to_lower_triangular()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#generalizedqsamplingmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#generalizedqsamplingfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.GeneralizedQSamplingFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeneralizedQSamplingFit.odf()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#normalize-qa\">normalize_qa</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.normalize_qa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">normalize_qa()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#squared-radial-component\">squared_radial_component</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.squared_radial_component\"><code class=\"docutils literal notranslate\"><span class=\"pre\">squared_radial_component()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#npa\">npa</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.npa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">npa()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#equatorial-zone-vertices\">equatorial_zone_vertices</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.equatorial_zone_vertices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">equatorial_zone_vertices()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#polar-zone-vertices\">polar_zone_vertices</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.polar_zone_vertices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polar_zone_vertices()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#upper-hemi-map\">upper_hemi_map</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.upper_hemi_map\"><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_hemi_map()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#equatorial-maximum\">equatorial_maximum</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.equatorial_maximum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">equatorial_maximum()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#patch-vertices\">patch_vertices</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.patch_vertices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">patch_vertices()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#patch-maximum\">patch_maximum</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.patch_maximum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">patch_maximum()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#odf-sum\">odf_sum</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.odf_sum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">odf_sum()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#patch-sum\">patch_sum</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.patch_sum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">patch_sum()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#triple-odf-maxima\">triple_odf_maxima</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.gqi.triple_odf_maxima\"><code class=\"docutils literal notranslate\"><span class=\"pre\">triple_odf_maxima()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ivimmodeltrr\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IvimModelTRR</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelTRR</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelTRR.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR.estimate_f_D_star\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelTRR.estimate_f_D_star()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR.estimate_linear_fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelTRR.estimate_linear_fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelTRR.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelTRR.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelTRR.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ivimmodelvp\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IvimModelVP</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.cvx_fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.cvx_fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.ivim_mix_cost_one\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.ivim_mix_cost_one()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.nlls_cost\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.nlls_cost()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.phi\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.phi()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.stoc_search_cost\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.stoc_search_cost()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.x_and_f_to_x_f\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.x_and_f_to_x_f()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimModelVP.x_f_to_x_and_f\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimModelVP.x_f_to_x_and_f()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ivimfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IvimFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.D\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.D_star\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.D_star</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.S0_predicted\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.S0_predicted</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.perfusion_fraction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.perfusion_fraction</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.IvimFit.shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IvimFit.shape</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ivim-prediction\">ivim_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.ivim_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ivim_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#f-d-star-prediction\">f_D_star_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.f_D_star_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">f_D_star_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#f-d-star-error\">f_D_star_error</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.f_D_star_error\"><code class=\"docutils literal notranslate\"><span class=\"pre\">f_D_star_error()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ivim-model-selector\">ivim_model_selector</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.ivim.ivim_model_selector\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ivim_model_selector()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmrimodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MapmriModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmrifit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MapmriFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.fitted_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.fitted_signal()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.mapmri_R\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.mapmri_R</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.mapmri_coeff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.mapmri_coeff</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.mapmri_mu\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.mapmri_mu</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.msd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.msd()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.ng\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.ng()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.ng_parallel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.ng_parallel()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.ng_perpendicular\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.ng_perpendicular()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.norm_of_laplacian_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.norm_of_laplacian_signal()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.odf_sh\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.odf_sh()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.pdf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.qiv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.qiv()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.rtap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.rtap()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.rtop\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.rtop()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.MapmriFit.rtpp\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MapmriFit.rtpp()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#isotropic-scale-factor\">isotropic_scale_factor</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.isotropic_scale_factor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">isotropic_scale_factor()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-index-matrix\">mapmri_index_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_index_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_index_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#b-mat\">b_mat</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.b_mat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">b_mat()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#b-mat-isotropic\">b_mat_isotropic</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.b_mat_isotropic\"><code class=\"docutils literal notranslate\"><span class=\"pre\">b_mat_isotropic()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-phi-1d\">mapmri_phi_1d</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_phi_1d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_phi_1d()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-phi-matrix\">mapmri_phi_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_phi_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_phi_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-psi-1d\">mapmri_psi_1d</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_psi_1d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_psi_1d()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-psi-matrix\">mapmri_psi_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_psi_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_psi_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-odf-matrix\">mapmri_odf_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_odf_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_odf_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-phi-matrix\">mapmri_isotropic_phi_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_phi_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_phi_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-radial-signal-basis\">mapmri_isotropic_radial_signal_basis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_radial_signal_basis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-m-mu-independent\">mapmri_isotropic_M_mu_independent</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_M_mu_independent()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-m-mu-dependent\">mapmri_isotropic_M_mu_dependent</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_M_mu_dependent()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-psi-matrix\">mapmri_isotropic_psi_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_psi_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_psi_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-radial-pdf-basis\">mapmri_isotropic_radial_pdf_basis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_radial_pdf_basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_radial_pdf_basis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-k-mu-independent\">mapmri_isotropic_K_mu_independent</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_K_mu_independent\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_K_mu_independent()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-k-mu-dependent\">mapmri_isotropic_K_mu_dependent</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_K_mu_dependent\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_K_mu_dependent()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#binomialfloat\">binomialfloat</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.binomialfloat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">binomialfloat()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-odf-matrix\">mapmri_isotropic_odf_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_odf_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_odf_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-odf-sh-matrix\">mapmri_isotropic_odf_sh_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_odf_sh_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_odf_sh_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-laplacian-reg-matrix\">mapmri_isotropic_laplacian_reg_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_laplacian_reg_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-laplacian-reg-matrix-from-index-matrix\">mapmri_isotropic_laplacian_reg_matrix_from_index_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_laplacian_reg_matrix_from_index_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-isotropic-index-matrix\">mapmri_isotropic_index_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_isotropic_index_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_isotropic_index_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#create-rspace\">create_rspace</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.create_rspace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create_rspace()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#delta\">delta</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.delta\"><code class=\"docutils literal notranslate\"><span class=\"pre\">delta()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#map-laplace-u\">map_laplace_u</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.map_laplace_u\"><code class=\"docutils literal notranslate\"><span class=\"pre\">map_laplace_u()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#map-laplace-t\">map_laplace_t</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.map_laplace_t\"><code class=\"docutils literal notranslate\"><span class=\"pre\">map_laplace_t()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#map-laplace-s\">map_laplace_s</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.map_laplace_s\"><code class=\"docutils literal notranslate\"><span class=\"pre\">map_laplace_s()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-stu-reg-matrices\">mapmri_STU_reg_matrices</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_STU_reg_matrices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_STU_reg_matrices()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mapmri-laplacian-reg-matrix\">mapmri_laplacian_reg_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.mapmri_laplacian_reg_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mapmri_laplacian_reg_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#generalized-crossvalidation-array\">generalized_crossvalidation_array</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.generalized_crossvalidation_array\"><code class=\"docutils literal notranslate\"><span class=\"pre\">generalized_crossvalidation_array()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#generalized-crossvalidation\">generalized_crossvalidation</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.generalized_crossvalidation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">generalized_crossvalidation()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#gcv-cost-function\">gcv_cost_function</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mapmri.gcv_cost_function\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gcv_cost_function()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multishellresponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiShellResponse</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellResponse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellResponse</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellResponse.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellResponse.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellResponse.iso\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellResponse.iso</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multishelldeconvmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MultiShellDeconvModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiShellDeconvModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#msdeconvfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MSDeconvFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MSDeconvFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MSDeconvFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit.all_shm_coeff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MSDeconvFit.all_shm_coeff</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit.shm_coeff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MSDeconvFit.shm_coeff</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.MSDeconvFit.volume_fractions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MSDeconvFit.volume_fractions</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qpfitter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QpFitter</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.QpFitter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QpFitter</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.QpFitter.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QpFitter.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multi-tissue-basis\">multi_tissue_basis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.multi_tissue_basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">multi_tissue_basis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#solve-qp\">solve_qp</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.solve_qp\"><code class=\"docutils literal notranslate\"><span class=\"pre\">solve_qp()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multi-shell-fiber-response\">multi_shell_fiber_response</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.multi_shell_fiber_response\"><code class=\"docutils literal notranslate\"><span class=\"pre\">multi_shell_fiber_response()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mask-for-response-msmt\">mask_for_response_msmt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.mask_for_response_msmt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mask_for_response_msmt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#response-from-mask-msmt\">response_from_mask_msmt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.response_from_mask_msmt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">response_from_mask_msmt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#auto-response-msmt\">auto_response_msmt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.mcsd.auto_response_msmt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">auto_response_msmt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#meandiffusionkurtosismodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#meandiffusionkurtosisfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.S0_hat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.S0_hat</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.msd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.msd()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.msk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.msk()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2di\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.smt2di()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2f\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.smt2f()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2uFA\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MeanDiffusionKurtosisFit.smt2uFA()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mean-signal-bvalue\">mean_signal_bvalue</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.mean_signal_bvalue\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mean_signal_bvalue()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#msk-from-awf\">msk_from_awf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.msk_from_awf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">msk_from_awf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#awf-from-msk\">awf_from_msk</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.awf_from_msk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">awf_from_msk()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#msdki-prediction\">msdki_prediction</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.msdki_prediction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">msdki_prediction()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#wls-fit-msdki\">wls_fit_msdki</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.wls_fit_msdki\"><code class=\"docutils literal notranslate\"><span class=\"pre\">wls_fit_msdki()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id949\">design_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.msdki.design_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">design_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multivoxelfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.MultiVoxelFit.shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MultiVoxelFit.shape</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#callablearray\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CallableArray</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.CallableArray\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CallableArray</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.CallableArray.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CallableArray.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multi-voxel-fit\">multi_voxel_fit</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.multi_voxel.multi_voxel_fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">multi_voxel_fit()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#odfmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OdfModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OdfModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OdfModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#odffit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OdfFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OdfFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.OdfFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OdfFit.odf()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#gfa\">gfa</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.gfa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gfa()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#minmax-normalize\">minmax_normalize</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.odf.minmax_normalize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">minmax_normalize()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmrimodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtdmriModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmrifit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtdmriFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.fitted_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.fitted_signal()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.msd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.msd()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.norm_of_laplacian_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.norm_of_laplacian_signal()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.odf_sh\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.odf_sh()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.pdf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.qiv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.qiv()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.qtdmri_to_mapmri_coef\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.qtdmri_to_mapmri_coef()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.rtap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.rtap()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.rtop\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.rtop()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.rtpp\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.rtpp()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.sparsity_abs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.sparsity_abs()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.QtdmriFit.sparsity_density\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtdmriFit.sparsity_density()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-to-mapmri-matrix\">qtdmri_to_mapmri_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_to_mapmri_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_to_mapmri_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-isotropic-to-mapmri-matrix\">qtdmri_isotropic_to_mapmri_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_to_mapmri_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_to_mapmri_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-temporal-normalization\">qtdmri_temporal_normalization</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_temporal_normalization\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_temporal_normalization()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-mapmri-normalization\">qtdmri_mapmri_normalization</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_mapmri_normalization\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_mapmri_normalization()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-mapmri-isotropic-normalization\">qtdmri_mapmri_isotropic_normalization</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_mapmri_isotropic_normalization\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_mapmri_isotropic_normalization()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-signal-matrix\">qtdmri_signal_matrix_</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_signal_matrix_\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_signal_matrix_()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1011\">qtdmri_signal_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_signal_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_signal_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-eap-matrix\">qtdmri_eap_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_eap_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_eap_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-isotropic-signal-matrix\">qtdmri_isotropic_signal_matrix_</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix_\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_signal_matrix_()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1012\">qtdmri_isotropic_signal_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_signal_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1013\">qtdmri_eap_matrix_</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_eap_matrix_\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_eap_matrix_()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-isotropic-eap-matrix\">qtdmri_isotropic_eap_matrix_</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix_\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_eap_matrix_()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1014\">qtdmri_isotropic_eap_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_eap_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#radial-basis-opt\">radial_basis_opt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.radial_basis_opt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">radial_basis_opt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#angular-basis-opt\">angular_basis_opt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.angular_basis_opt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">angular_basis_opt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#radial-basis-eap-opt\">radial_basis_EAP_opt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.radial_basis_EAP_opt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">radial_basis_EAP_opt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#angular-basis-eap-opt\">angular_basis_EAP_opt</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.angular_basis_EAP_opt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">angular_basis_EAP_opt()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#temporal-basis\">temporal_basis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.temporal_basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">temporal_basis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-index-matrix\">qtdmri_index_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_index_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_index_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-isotropic-index-matrix\">qtdmri_isotropic_index_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_index_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-laplacian-reg-matrix\">qtdmri_laplacian_reg_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_laplacian_reg_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-isotropic-laplacian-reg-matrix\">qtdmri_isotropic_laplacian_reg_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_laplacian_reg_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part23-reg-matrix-q\">part23_reg_matrix_q</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part23_reg_matrix_q\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part23_reg_matrix_q()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part23-iso-reg-matrix-q\">part23_iso_reg_matrix_q</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part23_iso_reg_matrix_q\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part23_iso_reg_matrix_q()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part4-reg-matrix-q\">part4_reg_matrix_q</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part4_reg_matrix_q\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part4_reg_matrix_q()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part4-iso-reg-matrix-q\">part4_iso_reg_matrix_q</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part4_iso_reg_matrix_q\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part4_iso_reg_matrix_q()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part1-reg-matrix-tau\">part1_reg_matrix_tau</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part1_reg_matrix_tau\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part1_reg_matrix_tau()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part23-reg-matrix-tau\">part23_reg_matrix_tau</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part23_reg_matrix_tau\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part23_reg_matrix_tau()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#part4-reg-matrix-tau\">part4_reg_matrix_tau</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.part4_reg_matrix_tau\"><code class=\"docutils literal notranslate\"><span class=\"pre\">part4_reg_matrix_tau()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#h\">H</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.H\"><code class=\"docutils literal notranslate\"><span class=\"pre\">H()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1033\">generalized_crossvalidation</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.generalized_crossvalidation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">generalized_crossvalidation()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1036\">GCV_cost_function</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.GCV_cost_function\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GCV_cost_function()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-isotropic-scaling\">qtdmri_isotropic_scaling</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_isotropic_scaling\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_isotropic_scaling()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-anisotropic-scaling\">qtdmri_anisotropic_scaling</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_anisotropic_scaling\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_anisotropic_scaling()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#design-matrix-spatial\">design_matrix_spatial</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.design_matrix_spatial\"><code class=\"docutils literal notranslate\"><span class=\"pre\">design_matrix_spatial()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#create-rt-space-grid\">create_rt_space_grid</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.create_rt_space_grid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create_rt_space_grid()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtdmri-number-of-coefficients\">qtdmri_number_of_coefficients</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.qtdmri_number_of_coefficients\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qtdmri_number_of_coefficients()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#l1-crossvalidation\">l1_crossvalidation</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.l1_crossvalidation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">l1_crossvalidation()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#elastic-crossvalidation\">elastic_crossvalidation</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.elastic_crossvalidation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">elastic_crossvalidation()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#visualise-gradient-table-g-delta-rainbow\">visualise_gradient_table_G_Delta_rainbow</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">visualise_gradient_table_G_Delta_rainbow()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtimodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtiModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiModel.fit()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiModel.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiModel.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qtifit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QtiFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.S0_hat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.S0_hat()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.c_c\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.c_c()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.c_m\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.c_m()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.c_md\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.c_md()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.c_mu\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.c_mu()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.d_sq\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.d_sq()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.fa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.fa()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.k_bulk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.k_bulk()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.k_mu\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.k_mu()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.k_shear\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.k_shear()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.md\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.md()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.mean_d_sq\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.mean_d_sq()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.mk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.mk()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.ufa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.ufa()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.v_iso\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.v_iso()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.v_md\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.v_md()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.QtiFit.v_shear\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QtiFit.v_shear()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#from-3x3-to-6x1\">from_3x3_to_6x1</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_3x3_to_6x1\"><code class=\"docutils literal notranslate\"><span class=\"pre\">from_3x3_to_6x1()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#from-6x1-to-3x3\">from_6x1_to_3x3</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_6x1_to_3x3\"><code class=\"docutils literal notranslate\"><span class=\"pre\">from_6x1_to_3x3()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#from-6x6-to-21x1\">from_6x6_to_21x1</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_6x6_to_21x1\"><code class=\"docutils literal notranslate\"><span class=\"pre\">from_6x6_to_21x1()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#from-21x1-to-6x6\">from_21x1_to_6x6</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.from_21x1_to_6x6\"><code class=\"docutils literal notranslate\"><span class=\"pre\">from_21x1_to_6x6()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cvxpy-1x6-to-3x3\">cvxpy_1x6_to_3x3</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.cvxpy_1x6_to_3x3\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cvxpy_1x6_to_3x3()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cvxpy-1x21-to-6x6\">cvxpy_1x21_to_6x6</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.cvxpy_1x21_to_6x6\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cvxpy_1x21_to_6x6()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#dtd-covariance\">dtd_covariance</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.dtd_covariance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dtd_covariance()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qti-signal\">qti_signal</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.qti_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qti_signal()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1091\">design_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.qti.design_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">design_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rumbasdmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RumbaSDModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaSDModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaSDModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaSDModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaSDModel.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rumbafit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RumbaFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.combined_odf_iso\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.combined_odf_iso()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.f_csf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.f_csf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.f_gm\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.f_gm()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.f_iso\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.f_iso()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.f_wm\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.f_wm()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.RumbaFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RumbaFit.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#logger\">logger</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.logger\"><code class=\"docutils literal notranslate\"><span class=\"pre\">logger()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rumba-deconv\">rumba_deconv</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.rumba_deconv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rumba_deconv()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mbessel-ratio\">mbessel_ratio</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.mbessel_ratio\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mbessel_ratio()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#generate-kernel\">generate_kernel</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.generate_kernel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">generate_kernel()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#rumba-deconv-global\">rumba_deconv_global</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.rumba.rumba_deconv_global\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rumba_deconv_global()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#isotropicmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#isotropicfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.IsotropicFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IsotropicFit.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#exponentialisotropicmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#exponentialisotropicfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.ExponentialIsotropicFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExponentialIsotropicFit.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sparsefasciclemodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleModel.design_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel.design_matrix()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sparsefasciclefit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.SparseFascicleFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SparseFascicleFit.predict()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sfm-design-matrix\">sfm_design_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.sfm.sfm_design_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sfm_design_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sphharmmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmModel.sampling_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmModel.sampling_matrix()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qballbasemodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QballBaseModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QballBaseModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballBaseModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QballBaseModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sphharmfit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SphHarmFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit.gfa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit.gfa()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit.predict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit.predict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit.shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit.shape</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.SphHarmFit.shm_coeff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SphHarmFit.shm_coeff</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#csaodfmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.CsaOdfModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.CsaOdfModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.CsaOdfModel.max\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel.max</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.CsaOdfModel.min\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel.min</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#opdtmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OpdtModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.OpdtModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OpdtModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.OpdtModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">OpdtModel.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qballmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QballModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QballModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.QballModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QballModel.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#residualbootstrapwrapper\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResidualBootstrapWrapper</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.ResidualBootstrapWrapper\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResidualBootstrapWrapper</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.ResidualBootstrapWrapper.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResidualBootstrapWrapper.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#forward-sdeconv-mat\">forward_sdeconv_mat</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.forward_sdeconv_mat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">forward_sdeconv_mat()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sh-to-rh\">sh_to_rh</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.sh_to_rh\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sh_to_rh()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#gen-dirac\">gen_dirac</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.gen_dirac\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gen_dirac()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#spherical-harmonics\">spherical_harmonics</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.spherical_harmonics\"><code class=\"docutils literal notranslate\"><span class=\"pre\">spherical_harmonics()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sph-harm\">real_sph_harm</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sph_harm\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sph_harm()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sh-tournier-from-index\">real_sh_tournier_from_index</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_tournier_from_index\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sh_tournier_from_index()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sh-descoteaux-from-index\">real_sh_descoteaux_from_index</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_descoteaux_from_index\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sh_descoteaux_from_index()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sh-tournier\">real_sh_tournier</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_tournier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sh_tournier()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sh-descoteaux\">real_sh_descoteaux</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sh_descoteaux\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sh_descoteaux()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sym-sh-mrtrix\">real_sym_sh_mrtrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sym_sh_mrtrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sym_sh_mrtrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#real-sym-sh-basis\">real_sym_sh_basis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.real_sym_sh_basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">real_sym_sh_basis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sph-harm-ind-list\">sph_harm_ind_list</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.sph_harm_ind_list\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sph_harm_ind_list()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#order-from-ncoef\">order_from_ncoef</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.order_from_ncoef\"><code class=\"docutils literal notranslate\"><span class=\"pre\">order_from_ncoef()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#smooth-pinv\">smooth_pinv</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.smooth_pinv\"><code class=\"docutils literal notranslate\"><span class=\"pre\">smooth_pinv()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lazy-index\">lazy_index</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.lazy_index\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lazy_index()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#normalize-data\">normalize_data</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.normalize_data\"><code class=\"docutils literal notranslate\"><span class=\"pre\">normalize_data()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#hat\">hat</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.hat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">hat()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#lcr-matrix\">lcr_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.lcr_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lcr_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bootstrap-data-array\">bootstrap_data_array</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.bootstrap_data_array\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bootstrap_data_array()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bootstrap-data-voxel\">bootstrap_data_voxel</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.bootstrap_data_voxel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bootstrap_data_voxel()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sf-to-sh\">sf_to_sh</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.sf_to_sh\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sf_to_sh()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sh-to-sf\">sh_to_sf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.sh_to_sf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sh_to_sf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sh-to-sf-matrix\">sh_to_sf_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.sh_to_sf_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sh_to_sf_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#calculate-max-order\">calculate_max_order</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.calculate_max_order\"><code class=\"docutils literal notranslate\"><span class=\"pre\">calculate_max_order()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#anisotropic-power\">anisotropic_power</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.anisotropic_power\"><code class=\"docutils literal notranslate\"><span class=\"pre\">anisotropic_power()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#convert-sh-to-full-basis\">convert_sh_to_full_basis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.convert_sh_to_full_basis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">convert_sh_to_full_basis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#convert-sh-from-legacy\">convert_sh_from_legacy</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.convert_sh_from_legacy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">convert_sh_from_legacy()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#convert-sh-to-legacy\">convert_sh_to_legacy</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shm.convert_sh_to_legacy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">convert_sh_to_legacy()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shoremodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ShoreModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreModel.fit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreModel.fit()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shorefit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ShoreFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.fitted_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.fitted_signal()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.msd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.msd()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.odf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.odf_sh\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.odf_sh()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.pdf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.pdf_grid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.pdf_grid()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.rtop_pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.rtop_pdf()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.rtop_signal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.rtop_signal()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.ShoreFit.shore_coeff\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ShoreFit.shore_coeff</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shore-matrix\">shore_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">shore_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shore-matrix-pdf\">shore_matrix_pdf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_matrix_pdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">shore_matrix_pdf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shore-matrix-odf\">shore_matrix_odf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_matrix_odf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">shore_matrix_odf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#l-shore\">l_shore</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.l_shore\"><code class=\"docutils literal notranslate\"><span class=\"pre\">l_shore()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#n-shore\">n_shore</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.n_shore\"><code class=\"docutils literal notranslate\"><span class=\"pre\">n_shore()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id1262\">create_rspace</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.create_rspace\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create_rspace()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shore-indices\">shore_indices</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_indices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">shore_indices()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#shore-order\">shore_order</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.shore.shore_order\"><code class=\"docutils literal notranslate\"><span class=\"pre\">shore_order()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#dki-design-matrix\">dki_design_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.reconst.utils.dki_design_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dki_design_matrix()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.reconst", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}